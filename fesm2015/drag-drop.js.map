{"version":3,"file":"drag-drop.js","sources":["../../../../../../src/cdk/drag-drop/drag-styling.ts","../../../../../../src/cdk/drag-drop/transition-duration.ts","../../../../../../src/cdk/drag-drop/client-rect.ts","../../../../../../src/cdk/drag-drop/parent-position-tracker.ts","../../../../../../src/cdk/drag-drop/clone-node.ts","../../../../../../src/cdk/drag-drop/drag-ref.ts","../../../../../../src/cdk/drag-drop/drag-utils.ts","../../../../../../src/cdk/drag-drop/drop-list-ref.ts","../../../../../../src/cdk/drag-drop/drag-drop-registry.ts","../../../../../../src/cdk/drag-drop/drag-drop.ts","../../../../../../src/cdk/drag-drop/drag-parent.ts","../../../../../../src/cdk/drag-drop/drag-events.ts","../../../../../../src/cdk/drag-drop/directives/drop-list-group.ts","../../../../../../src/cdk/drag-drop/directives/config.ts","../../../../../../src/cdk/drag-drop/directives/assertions.ts","../../../../../../src/cdk/drag-drop/directives/drop-list.ts","../../../../../../src/cdk/drag-drop/directives/drag-handle.ts","../../../../../../src/cdk/drag-drop/directives/drag-placeholder.ts","../../../../../../src/cdk/drag-drop/directives/drag-preview.ts","../../../../../../src/cdk/drag-drop/directives/drag.ts","../../../../../../src/cdk/drag-drop/drag-drop-module.ts","../../../../../../src/cdk/drag-drop/public-api.ts","../../../../../../src/cdk/drag-drop/index.ts"],"sourcesContent":["/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n\r\n\r\n// Helper type that ignores `readonly` properties. This is used in\r\n// `extendStyles` to ignore the readonly properties on CSSStyleDeclaration\r\n// since we won't be touching those anyway.\r\ntype Writeable<T> = { -readonly [P in keyof T]-?: T[P] };\r\n\r\n/**\r\n * Extended CSSStyleDeclaration that includes a couple of drag-related\r\n * properties that aren't in the built-in TS typings.\r\n */\r\nexport interface DragCSSStyleDeclaration extends CSSStyleDeclaration {\r\n  webkitUserDrag: string;\r\n  MozUserSelect: string; // For some reason the Firefox property is in PascalCase.\r\n  msScrollSnapType: string;\r\n  scrollSnapType: string;\r\n  msUserSelect: string;\r\n}\r\n\r\n/**\r\n * Shallow-extends a stylesheet object with another stylesheet object.\r\n * @docs-private\r\n */\r\nexport function extendStyles(\r\n    dest: Writeable<CSSStyleDeclaration>,\r\n    source: Partial<DragCSSStyleDeclaration>) {\r\n  for (let key in source) {\r\n    if (source.hasOwnProperty(key)) {\r\n      dest[key] = source[key]!;\r\n    }\r\n  }\r\n\r\n  return dest;\r\n}\r\n\r\n\r\n/**\r\n * Toggles whether the native drag interactions should be enabled for an element.\r\n * @param element Element on which to toggle the drag interactions.\r\n * @param enable Whether the drag interactions should be enabled.\r\n * @docs-private\r\n */\r\nexport function toggleNativeDragInteractions(element: HTMLElement, enable: boolean) {\r\n  const userSelect = enable ? '' : 'none';\r\n\r\n  extendStyles(element.style, {\r\n    touchAction: enable ? '' : 'none',\r\n    webkitUserDrag: enable ? '' : 'none',\r\n    webkitTapHighlightColor: enable ? '' : 'transparent',\r\n    userSelect: userSelect,\r\n    msUserSelect: userSelect,\r\n    webkitUserSelect: userSelect,\r\n    MozUserSelect: userSelect\r\n  });\r\n}\r\n\r\n/**\r\n * Toggles whether an element is visible while preserving its dimensions.\r\n * @param element Element whose visibility to toggle\r\n * @param enable Whether the element should be visible.\r\n * @docs-private\r\n */\r\nexport function toggleVisibility(element: HTMLElement, enable: boolean) {\r\n  const styles = element.style;\r\n  styles.position = enable ? '' : 'fixed';\r\n  styles.top = styles.opacity = enable ? '' : '0';\r\n  styles.left = enable ? '' : '-999em';\r\n}\r\n","/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n\r\n/** Parses a CSS time value to milliseconds. */\r\nfunction parseCssTimeUnitsToMs(value: string): number {\r\n  // Some browsers will return it in seconds, whereas others will return milliseconds.\r\n  const multiplier = value.toLowerCase().indexOf('ms') > -1 ? 1 : 1000;\r\n  return parseFloat(value) * multiplier;\r\n}\r\n\r\n/** Gets the transform transition duration, including the delay, of an element in milliseconds. */\r\nexport function getTransformTransitionDurationInMs(element: HTMLElement): number {\r\n  const computedStyle = getComputedStyle(element);\r\n  const transitionedProperties = parseCssPropertyValue(computedStyle, 'transition-property');\r\n  const property = transitionedProperties.find(prop => prop === 'transform' || prop === 'all');\r\n\r\n  // If there's no transition for `all` or `transform`, we shouldn't do anything.\r\n  if (!property) {\r\n    return 0;\r\n  }\r\n\r\n  // Get the index of the property that we're interested in and match\r\n  // it up to the same index in `transition-delay` and `transition-duration`.\r\n  const propertyIndex = transitionedProperties.indexOf(property);\r\n  const rawDurations = parseCssPropertyValue(computedStyle, 'transition-duration');\r\n  const rawDelays = parseCssPropertyValue(computedStyle, 'transition-delay');\r\n\r\n  return parseCssTimeUnitsToMs(rawDurations[propertyIndex]) +\r\n         parseCssTimeUnitsToMs(rawDelays[propertyIndex]);\r\n}\r\n\r\n/** Parses out multiple values from a computed style into an array. */\r\nfunction parseCssPropertyValue(computedStyle: CSSStyleDeclaration, name: string): string[] {\r\n  const value = computedStyle.getPropertyValue(name);\r\n  return value.split(',').map(part => part.trim());\r\n}\r\n","/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n\r\n/** Gets a mutable version of an element's bounding `ClientRect`. */\r\nexport function getMutableClientRect(element: Element): ClientRect {\r\n  const clientRect = element.getBoundingClientRect();\r\n\r\n  // We need to clone the `clientRect` here, because all the values on it are readonly\r\n  // and we need to be able to update them. Also we can't use a spread here, because\r\n  // the values on a `ClientRect` aren't own properties. See:\r\n  // https://developer.mozilla.org/en-US/docs/Web/API/Element/getBoundingClientRect#Notes\r\n  return {\r\n    top: clientRect.top,\r\n    right: clientRect.right,\r\n    bottom: clientRect.bottom,\r\n    left: clientRect.left,\r\n    width: clientRect.width,\r\n    height: clientRect.height\r\n  };\r\n}\r\n\r\n/**\r\n * Checks whether some coordinates are within a `ClientRect`.\r\n * @param clientRect ClientRect that is being checked.\r\n * @param x Coordinates along the X axis.\r\n * @param y Coordinates along the Y axis.\r\n */\r\nexport function isInsideClientRect(clientRect: ClientRect, x: number, y: number) {\r\n  const {top, bottom, left, right} = clientRect;\r\n  return y >= top && y <= bottom && x >= left && x <= right;\r\n}\r\n\r\n/**\r\n * Updates the top/left positions of a `ClientRect`, as well as their bottom/right counterparts.\r\n * @param clientRect `ClientRect` that should be updated.\r\n * @param top Amount to add to the `top` position.\r\n * @param left Amount to add to the `left` position.\r\n */\r\nexport function adjustClientRect(clientRect: ClientRect, top: number, left: number) {\r\n  clientRect.top += top;\r\n  clientRect.bottom = clientRect.top + clientRect.height;\r\n\r\n  clientRect.left += left;\r\n  clientRect.right = clientRect.left + clientRect.width;\r\n}\r\n\r\n/**\r\n * Checks whether the pointer coordinates are close to a ClientRect.\r\n * @param rect ClientRect to check against.\r\n * @param threshold Threshold around the ClientRect.\r\n * @param pointerX Coordinates along the X axis.\r\n * @param pointerY Coordinates along the Y axis.\r\n */\r\nexport function isPointerNearClientRect(rect: ClientRect,\r\n                                        threshold: number,\r\n                                        pointerX: number,\r\n                                        pointerY: number): boolean {\r\n  const {top, right, bottom, left, width, height} = rect;\r\n  const xThreshold = width * threshold;\r\n  const yThreshold = height * threshold;\r\n\r\n  return pointerY > top - yThreshold && pointerY < bottom + yThreshold &&\r\n         pointerX > left - xThreshold && pointerX < right + xThreshold;\r\n}\r\n","/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n\r\nimport {ViewportRuler} from '@angular/cdk/scrolling';\r\nimport {getMutableClientRect, adjustClientRect} from './client-rect';\r\n\r\n/** Object holding the scroll position of something. */\r\ninterface ScrollPosition {\r\n  top: number;\r\n  left: number;\r\n}\r\n\r\n/** Keeps track of the scroll position and dimensions of the parents of an element. */\r\nexport class ParentPositionTracker {\r\n  /** Cached positions of the scrollable parent elements. */\r\n  readonly positions = new Map<Document|HTMLElement, {\r\n    scrollPosition: ScrollPosition,\r\n    clientRect?: ClientRect\r\n  }>();\r\n\r\n  constructor(private _document: Document, private _viewportRuler: ViewportRuler) {}\r\n\r\n  /** Clears the cached positions. */\r\n  clear() {\r\n    this.positions.clear();\r\n  }\r\n\r\n  /** Caches the positions. Should be called at the beginning of a drag sequence. */\r\n  cache(elements: HTMLElement[] | ReadonlyArray<HTMLElement>) {\r\n    this.clear();\r\n    this.positions.set(this._document, {\r\n      scrollPosition: this._viewportRuler.getViewportScrollPosition(),\r\n    });\r\n\r\n    elements.forEach(element => {\r\n      this.positions.set(element, {\r\n        scrollPosition: {top: element.scrollTop, left: element.scrollLeft},\r\n        clientRect: getMutableClientRect(element)\r\n      });\r\n    });\r\n  }\r\n\r\n  /** Handles scrolling while a drag is taking place. */\r\n  handleScroll(event: Event): ScrollPosition | null {\r\n    const target = event.target as HTMLElement | Document;\r\n    const cachedPosition = this.positions.get(target);\r\n\r\n    if (!cachedPosition) {\r\n      return null;\r\n    }\r\n\r\n    // Used when figuring out whether an element is inside the scroll parent. If the scrolled\r\n    // parent is the `document`, we use the `documentElement`, because IE doesn't support\r\n    // `contains` on the `document`.\r\n    const scrolledParentNode = target === this._document ? target.documentElement : target;\r\n    const scrollPosition = cachedPosition.scrollPosition;\r\n    let newTop: number;\r\n    let newLeft: number;\r\n\r\n    if (target === this._document) {\r\n      const viewportScrollPosition = this._viewportRuler!.getViewportScrollPosition();\r\n      newTop = viewportScrollPosition.top;\r\n      newLeft = viewportScrollPosition.left;\r\n    } else {\r\n      newTop = (target as HTMLElement).scrollTop;\r\n      newLeft = (target as HTMLElement).scrollLeft;\r\n    }\r\n\r\n    const topDifference = scrollPosition.top - newTop;\r\n    const leftDifference = scrollPosition.left - newLeft;\r\n\r\n    // Go through and update the cached positions of the scroll\r\n    // parents that are inside the element that was scrolled.\r\n    this.positions.forEach((position, node) => {\r\n      if (position.clientRect && target !== node && scrolledParentNode.contains(node)) {\r\n        adjustClientRect(position.clientRect, topDifference, leftDifference);\r\n      }\r\n    });\r\n\r\n    scrollPosition.top = newTop;\r\n    scrollPosition.left = newLeft;\r\n\r\n    return {top: topDifference, left: leftDifference};\r\n  }\r\n}\r\n","/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n\r\n/** Creates a deep clone of an element. */\r\nexport function deepCloneNode(node: HTMLElement): HTMLElement {\r\n  const clone = node.cloneNode(true) as HTMLElement;\r\n  const descendantsWithId = clone.querySelectorAll('[id]');\r\n  const nodeName = node.nodeName.toLowerCase();\r\n\r\n  // Remove the `id` to avoid having multiple elements with the same id on the page.\r\n  clone.removeAttribute('id');\r\n\r\n  for (let i = 0; i < descendantsWithId.length; i++) {\r\n    descendantsWithId[i].removeAttribute('id');\r\n  }\r\n\r\n  if (nodeName === 'canvas') {\r\n    transferCanvasData(node as HTMLCanvasElement, clone as HTMLCanvasElement);\r\n  } else if (nodeName === 'input' || nodeName === 'select' || nodeName === 'textarea') {\r\n    transferInputData(node as HTMLInputElement, clone as HTMLInputElement);\r\n  }\r\n\r\n  transferData('canvas', node, clone, transferCanvasData);\r\n  transferData('input, textarea, select', node, clone, transferInputData);\r\n  return clone;\r\n}\r\n\r\n/** Matches elements between an element and its clone and allows for their data to be cloned. */\r\nfunction transferData<T extends Element>(selector: string, node: HTMLElement, clone: HTMLElement,\r\n                                         callback: (source: T, clone: T) => void) {\r\n  const descendantElements = node.querySelectorAll<T>(selector);\r\n\r\n  if (descendantElements.length) {\r\n    const cloneElements = clone.querySelectorAll<T>(selector);\r\n\r\n    for (let i = 0; i < descendantElements.length; i++) {\r\n      callback(descendantElements[i], cloneElements[i]);\r\n    }\r\n  }\r\n}\r\n\r\n// Counter for unique cloned radio button names.\r\nlet cloneUniqueId = 0;\r\n\r\n/** Transfers the data of one input element to another. */\r\nfunction transferInputData(source: Element & {value: string},\r\n                           clone: Element & {value: string; name: string; type: string}) {\r\n  // Browsers throw an error when assigning the value of a file input programmatically.\r\n  if (clone.type !== 'file') {\r\n    clone.value = source.value;\r\n  }\r\n\r\n  // Radio button `name` attributes must be unique for radio button groups\r\n  // otherwise original radio buttons can lose their checked state\r\n  // once the clone is inserted in the DOM.\r\n  if (clone.type === 'radio' && clone.name) {\r\n    clone.name = `mat-clone-${clone.name}-${cloneUniqueId++}`;\r\n  }\r\n}\r\n\r\n/** Transfers the data of one canvas element to another. */\r\nfunction transferCanvasData(source: HTMLCanvasElement, clone: HTMLCanvasElement) {\r\n  const context = clone.getContext('2d');\r\n\r\n  if (context) {\r\n    // In some cases `drawImage` can throw (e.g. if the canvas size is 0x0).\r\n    // We can't do much about it so just ignore the error.\r\n    try {\r\n      context.drawImage(source, 0, 0);\r\n    } catch {}\r\n  }\r\n}\r\n","/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n\r\nimport {EmbeddedViewRef, ElementRef, NgZone, ViewContainerRef, TemplateRef} from '@angular/core';\r\nimport {ViewportRuler} from '@angular/cdk/scrolling';\r\nimport {Direction} from '@angular/cdk/bidi';\r\nimport {normalizePassiveListenerOptions, _getShadowRoot} from '@angular/cdk/platform';\r\nimport {coerceBooleanProperty, coerceElement} from '@angular/cdk/coercion';\r\nimport {Subscription, Subject, Observable} from 'rxjs';\r\nimport {DropListRefInternal as DropListRef} from './drop-list-ref';\r\nimport {DragDropRegistry} from './drag-drop-registry';\r\nimport {extendStyles, toggleNativeDragInteractions, toggleVisibility} from './drag-styling';\r\nimport {getTransformTransitionDurationInMs} from './transition-duration';\r\nimport {getMutableClientRect, adjustClientRect} from './client-rect';\r\nimport {ParentPositionTracker} from './parent-position-tracker';\r\nimport {deepCloneNode} from './clone-node';\r\n\r\n/** Object that can be used to configure the behavior of DragRef. */\r\nexport interface DragRefConfig {\r\n  /**\r\n   * Minimum amount of pixels that the user should\r\n   * drag, before the CDK initiates a drag sequence.\r\n   */\r\n  dragStartThreshold: number;\r\n\r\n  /**\r\n   * Amount the pixels the user should drag before the CDK\r\n   * considers them to have changed the drag direction.\r\n   */\r\n  pointerDirectionChangeThreshold: number;\r\n\r\n  /** `z-index` for the absolutely-positioned elements that are created by the drag item. */\r\n  zIndex?: number;\r\n\r\n  /** Ref that the current drag item is nested in. */\r\n  parentDragRef?: DragRef;\r\n}\r\n\r\n/** Options that can be used to bind a passive event listener. */\r\nconst passiveEventListenerOptions = normalizePassiveListenerOptions({passive: true});\r\n\r\n/** Options that can be used to bind an active event listener. */\r\nconst activeEventListenerOptions = normalizePassiveListenerOptions({passive: false});\r\n\r\n/**\r\n * Time in milliseconds for which to ignore mouse events, after\r\n * receiving a touch event. Used to avoid doing double work for\r\n * touch devices where the browser fires fake mouse events, in\r\n * addition to touch events.\r\n */\r\nconst MOUSE_EVENT_IGNORE_TIME = 800;\r\n\r\n// TODO(crisbeto): add an API for moving a draggable up/down the\r\n// list programmatically. Useful for keyboard controls.\r\n\r\n/**\r\n * Internal compile-time-only representation of a `DragRef`.\r\n * Used to avoid circular import issues between the `DragRef` and the `DropListRef`.\r\n * @docs-private\r\n */\r\nexport interface DragRefInternal extends DragRef {}\r\n\r\n/** Template that can be used to create a drag helper element (e.g. a preview or a placeholder). */\r\ninterface DragHelperTemplate<T = any> {\r\n  template: TemplateRef<T> | null;\r\n  viewContainer: ViewContainerRef;\r\n  context: T;\r\n}\r\n\r\n/** Template that can be used to create a drag preview element. */\r\ninterface DragPreviewTemplate<T = any> extends DragHelperTemplate<T> {\r\n  matchSize?: boolean;\r\n}\r\n\r\n/** Point on the page or within an element. */\r\nexport interface Point {\r\n  x: number;\r\n  y: number;\r\n}\r\n\r\n/**\r\n * Reference to a draggable item. Used to manipulate or dispose of the item.\r\n */\r\nexport class DragRef<T = any> {\r\n  /** Element displayed next to the user's pointer while the element is dragged. */\r\n  private _preview: HTMLElement;\r\n\r\n  /** Reference to the view of the preview element. */\r\n  private _previewRef: EmbeddedViewRef<any> | null;\r\n\r\n  /** Reference to the view of the placeholder element. */\r\n  private _placeholderRef: EmbeddedViewRef<any> | null;\r\n\r\n  /** Element that is rendered instead of the draggable item while it is being sorted. */\r\n  private _placeholder: HTMLElement;\r\n\r\n  /** Coordinates within the element at which the user picked up the element. */\r\n  private _pickupPositionInElement: Point;\r\n\r\n  /** Coordinates on the page at which the user picked up the element. */\r\n  private _pickupPositionOnPage: Point;\r\n\r\n  /**\r\n   * Anchor node used to save the place in the DOM where the element was\r\n   * picked up so that it can be restored at the end of the drag sequence.\r\n   */\r\n  private _anchor: Comment;\r\n\r\n  /**\r\n   * CSS `transform` applied to the element when it isn't being dragged. We need a\r\n   * passive transform in order for the dragged element to retain its new position\r\n   * after the user has stopped dragging and because we need to know the relative\r\n   * position in case they start dragging again. This corresponds to `element.style.transform`.\r\n   */\r\n  private _passiveTransform: Point = {x: 0, y: 0};\r\n\r\n  /** CSS `transform` that is applied to the element while it's being dragged. */\r\n  private _activeTransform: Point = {x: 0, y: 0};\r\n\r\n  /** Inline `transform` value that the element had before the first dragging sequence. */\r\n  private _initialTransform?: string;\r\n\r\n  /**\r\n   * Whether the dragging sequence has been started. Doesn't\r\n   * necessarily mean that the element has been moved.\r\n   */\r\n  private _hasStartedDragging: boolean;\r\n\r\n  /** Whether the element has moved since the user started dragging it. */\r\n  private _hasMoved: boolean;\r\n\r\n  /** Drop container in which the DragRef resided when dragging began. */\r\n  private _initialContainer: DropListRef;\r\n\r\n  /** Index at which the item started in its initial container. */\r\n  private _initialIndex: number;\r\n\r\n  /** Cached positions of scrollable parent elements. */\r\n  private _parentPositions: ParentPositionTracker;\r\n\r\n  /** Emits when the item is being moved. */\r\n  private _moveEvents = new Subject<{\r\n    source: DragRef;\r\n    pointerPosition: {x: number, y: number};\r\n    event: MouseEvent | TouchEvent;\r\n    distance: Point;\r\n    delta: {x: -1 | 0 | 1, y: -1 | 0 | 1};\r\n  }>();\r\n\r\n  /** Keeps track of the direction in which the user is dragging along each axis. */\r\n  private _pointerDirectionDelta: {x: -1 | 0 | 1, y: -1 | 0 | 1};\r\n\r\n  /** Pointer position at which the last change in the delta occurred. */\r\n  private _pointerPositionAtLastDirectionChange: Point;\r\n\r\n  /** Position of the pointer at the last pointer event. */\r\n  private _lastKnownPointerPosition: Point;\r\n\r\n  /**\r\n   * Root DOM node of the drag instance. This is the element that will\r\n   * be moved around as the user is dragging.\r\n   */\r\n  private _rootElement: HTMLElement;\r\n\r\n  /**\r\n   * Inline style value of `-webkit-tap-highlight-color` at the time the\r\n   * dragging was started. Used to restore the value once we're done dragging.\r\n   */\r\n  private _rootElementTapHighlight: string;\r\n\r\n  /** Subscription to pointer movement events. */\r\n  private _pointerMoveSubscription = Subscription.EMPTY;\r\n\r\n  /** Subscription to the event that is dispatched when the user lifts their pointer. */\r\n  private _pointerUpSubscription = Subscription.EMPTY;\r\n\r\n  /** Subscription to the viewport being scrolled. */\r\n  private _scrollSubscription = Subscription.EMPTY;\r\n\r\n  /** Subscription to the viewport being resized. */\r\n  private _resizeSubscription = Subscription.EMPTY;\r\n\r\n  /**\r\n   * Time at which the last touch event occurred. Used to avoid firing the same\r\n   * events multiple times on touch devices where the browser will fire a fake\r\n   * mouse event for each touch event, after a certain time.\r\n   */\r\n  private _lastTouchEventTime: number;\r\n\r\n  /** Time at which the last dragging sequence was started. */\r\n  private _dragStartTime: number;\r\n\r\n  /** Cached reference to the boundary element. */\r\n  private _boundaryElement: HTMLElement | null = null;\r\n\r\n  /** Whether the native dragging interactions have been enabled on the root element. */\r\n  private _nativeInteractionsEnabled = true;\r\n\r\n  /** Cached dimensions of the preview element. */\r\n  private _previewRect?: ClientRect;\r\n\r\n  /** Cached dimensions of the boundary element. */\r\n  private _boundaryRect?: ClientRect;\r\n\r\n  /** Element that will be used as a template to create the draggable item's preview. */\r\n  private _previewTemplate?: DragPreviewTemplate | null;\r\n\r\n  /** Template for placeholder element rendered to show where a draggable would be dropped. */\r\n  private _placeholderTemplate?: DragHelperTemplate | null;\r\n\r\n  /** Elements that can be used to drag the draggable item. */\r\n  private _handles: HTMLElement[] = [];\r\n\r\n  /** Registered handles that are currently disabled. */\r\n  private _disabledHandles = new Set<HTMLElement>();\r\n\r\n  /** Droppable container that the draggable is a part of. */\r\n  private _dropContainer?: DropListRef;\r\n\r\n  /** Layout direction of the item. */\r\n  private _direction: Direction = 'ltr';\r\n\r\n  /** Ref that the current drag item is nested in. */\r\n  private _parentDragRef: DragRef<unknown> | null;\r\n\r\n  /**\r\n   * Cached shadow root that the element is placed in. `null` means that the element isn't in\r\n   * the shadow DOM and `undefined` means that it hasn't been resolved yet. Should be read via\r\n   * `_getShadowRoot`, not directly.\r\n   */\r\n  private _cachedShadowRoot: ShadowRoot | null | undefined;\r\n\r\n  /** Axis along which dragging is locked. */\r\n  lockAxis: 'x' | 'y';\r\n\r\n  /**\r\n   * Amount of milliseconds to wait after the user has put their\r\n   * pointer down before starting to drag the element.\r\n   */\r\n  dragStartDelay: number | {touch: number, mouse: number} = 0;\r\n\r\n  /** Class to be added to the preview element. */\r\n  previewClass: string|string[]|undefined;\r\n\r\n  /** Whether starting to drag this element is disabled. */\r\n  get disabled(): boolean {\r\n    return this._disabled || !!(this._dropContainer && this._dropContainer.disabled);\r\n  }\r\n  set disabled(value: boolean) {\r\n    const newValue = coerceBooleanProperty(value);\r\n\r\n    if (newValue !== this._disabled) {\r\n      this._disabled = newValue;\r\n      this._toggleNativeDragInteractions();\r\n      this._handles.forEach(handle => toggleNativeDragInteractions(handle, newValue));\r\n    }\r\n  }\r\n  private _disabled = false;\r\n\r\n  /** Emits as the drag sequence is being prepared. */\r\n  beforeStarted = new Subject<void>();\r\n\r\n  /** Emits when the user starts dragging the item. */\r\n  started = new Subject<{source: DragRef}>();\r\n\r\n  /** Emits when the user has released a drag item, before any animations have started. */\r\n  released = new Subject<{source: DragRef}>();\r\n\r\n  /** Emits when the user stops dragging an item in the container. */\r\n  ended = new Subject<{source: DragRef, distance: Point}>();\r\n\r\n  /** Emits when the user has moved the item into a new container. */\r\n  entered = new Subject<{container: DropListRef, item: DragRef, currentIndex: number}>();\r\n\r\n  /** Emits when the user removes the item its container by dragging it into another container. */\r\n  exited = new Subject<{container: DropListRef, item: DragRef}>();\r\n\r\n  /** Emits when the user drops the item inside a container. */\r\n  dropped = new Subject<{\r\n    previousIndex: number;\r\n    currentIndex: number;\r\n    item: DragRef;\r\n    container: DropListRef;\r\n    previousContainer: DropListRef;\r\n    distance: Point;\r\n    isPointerOverContainer: boolean;\r\n  }>();\r\n\r\n  /**\r\n   * Emits as the user is dragging the item. Use with caution,\r\n   * because this event will fire for every pixel that the user has dragged.\r\n   */\r\n  moved: Observable<{\r\n    source: DragRef;\r\n    pointerPosition: {x: number, y: number};\r\n    event: MouseEvent | TouchEvent;\r\n    distance: Point;\r\n    delta: {x: -1 | 0 | 1, y: -1 | 0 | 1};\r\n  }> = this._moveEvents;\r\n\r\n  /** Arbitrary data that can be attached to the drag item. */\r\n  data: T;\r\n\r\n  /**\r\n   * Function that can be used to customize the logic of how the position of the drag item\r\n   * is limited while it's being dragged. Gets called with a point containing the current position\r\n   * of the user's pointer on the page and should return a point describing where the item should\r\n   * be rendered.\r\n   */\r\n  constrainPosition?: (point: Point, dragRef: DragRef) => Point;\r\n\r\n  constructor(\r\n    element: ElementRef<HTMLElement> | HTMLElement,\r\n    private _config: DragRefConfig,\r\n    private _document: Document,\r\n    private _ngZone: NgZone,\r\n    private _viewportRuler: ViewportRuler,\r\n    private _dragDropRegistry: DragDropRegistry<DragRef, DropListRef>) {\r\n\r\n    this.withRootElement(element).withParent(_config.parentDragRef || null);\r\n    this._parentPositions = new ParentPositionTracker(_document, _viewportRuler);\r\n    _dragDropRegistry.registerDragItem(this);\r\n  }\r\n\r\n  /**\r\n   * Returns the element that is being used as a placeholder\r\n   * while the current element is being dragged.\r\n   */\r\n  getPlaceholderElement(): HTMLElement {\r\n    return this._placeholder;\r\n  }\r\n\r\n  /** Returns the root draggable element. */\r\n  getRootElement(): HTMLElement {\r\n    return this._rootElement;\r\n  }\r\n\r\n  /**\r\n   * Gets the currently-visible element that represents the drag item.\r\n   * While dragging this is the placeholder, otherwise it's the root element.\r\n   */\r\n  getVisibleElement(): HTMLElement {\r\n    return this.isDragging() ? this.getPlaceholderElement() : this.getRootElement();\r\n  }\r\n\r\n  /** Registers the handles that can be used to drag the element. */\r\n  withHandles(handles: (HTMLElement | ElementRef<HTMLElement>)[]): this {\r\n    this._handles = handles.map(handle => coerceElement(handle));\r\n    this._handles.forEach(handle => toggleNativeDragInteractions(handle, this.disabled));\r\n    this._toggleNativeDragInteractions();\r\n\r\n    // Delete any lingering disabled handles that may have been destroyed. Note that we re-create\r\n    // the set, rather than iterate over it and filter out the destroyed handles, because while\r\n    // the ES spec allows for sets to be modified while they're being iterated over, some polyfills\r\n    // use an array internally which may throw an error.\r\n    const disabledHandles = new Set<HTMLElement>();\r\n    this._disabledHandles.forEach(handle => {\r\n      if (this._handles.indexOf(handle) > -1) {\r\n        disabledHandles.add(handle);\r\n      }\r\n    });\r\n    this._disabledHandles = disabledHandles;\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * Registers the template that should be used for the drag preview.\r\n   * @param template Template that from which to stamp out the preview.\r\n   */\r\n  withPreviewTemplate(template: DragPreviewTemplate | null): this {\r\n    this._previewTemplate = template;\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * Registers the template that should be used for the drag placeholder.\r\n   * @param template Template that from which to stamp out the placeholder.\r\n   */\r\n  withPlaceholderTemplate(template: DragHelperTemplate | null): this {\r\n    this._placeholderTemplate = template;\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * Sets an alternate drag root element. The root element is the element that will be moved as\r\n   * the user is dragging. Passing an alternate root element is useful when trying to enable\r\n   * dragging on an element that you might not have access to.\r\n   */\r\n  withRootElement(rootElement: ElementRef<HTMLElement> | HTMLElement): this {\r\n    const element = coerceElement(rootElement);\r\n\r\n    if (element !== this._rootElement) {\r\n      if (this._rootElement) {\r\n        this._removeRootElementListeners(this._rootElement);\r\n      }\r\n\r\n      this._ngZone.runOutsideAngular(() => {\r\n        element.addEventListener('mousedown', this._pointerDown, activeEventListenerOptions);\r\n        element.addEventListener('touchstart', this._pointerDown, passiveEventListenerOptions);\r\n      });\r\n      this._initialTransform = undefined;\r\n      this._rootElement = element;\r\n    }\r\n\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * Element to which the draggable's position will be constrained.\r\n   */\r\n  withBoundaryElement(boundaryElement: ElementRef<HTMLElement> | HTMLElement | null): this {\r\n    this._boundaryElement = boundaryElement ? coerceElement(boundaryElement) : null;\r\n    this._resizeSubscription.unsubscribe();\r\n    if (boundaryElement) {\r\n      this._resizeSubscription = this._viewportRuler\r\n        .change(10)\r\n        .subscribe(() => this._containInsideBoundaryOnResize());\r\n    }\r\n    return this;\r\n  }\r\n\r\n  /** Sets the parent ref that the ref is nested in.  */\r\n  withParent(parent: DragRef<unknown> | null): this {\r\n    this._parentDragRef = parent;\r\n    return this;\r\n  }\r\n\r\n  /** Removes the dragging functionality from the DOM element. */\r\n  dispose() {\r\n    this._removeRootElementListeners(this._rootElement);\r\n\r\n    // Do this check before removing from the registry since it'll\r\n    // stop being considered as dragged once it is removed.\r\n    if (this.isDragging()) {\r\n      // Since we move out the element to the end of the body while it's being\r\n      // dragged, we have to make sure that it's removed if it gets destroyed.\r\n      removeNode(this._rootElement);\r\n    }\r\n\r\n    removeNode(this._anchor);\r\n    this._destroyPreview();\r\n    this._destroyPlaceholder();\r\n    this._dragDropRegistry.removeDragItem(this);\r\n    this._removeSubscriptions();\r\n    this.beforeStarted.complete();\r\n    this.started.complete();\r\n    this.released.complete();\r\n    this.ended.complete();\r\n    this.entered.complete();\r\n    this.exited.complete();\r\n    this.dropped.complete();\r\n    this._moveEvents.complete();\r\n    this._handles = [];\r\n    this._disabledHandles.clear();\r\n    this._dropContainer = undefined;\r\n    this._resizeSubscription.unsubscribe();\r\n    this._parentPositions.clear();\r\n    this._boundaryElement = this._rootElement = this._placeholderTemplate =\r\n        this._previewTemplate = this._anchor = this._parentDragRef = null!;\r\n  }\r\n\r\n  /** Checks whether the element is currently being dragged. */\r\n  isDragging(): boolean {\r\n    return this._hasStartedDragging && this._dragDropRegistry.isDragging(this);\r\n  }\r\n\r\n  /** Resets a standalone drag item to its initial position. */\r\n  reset(): void {\r\n    this._rootElement.style.transform = this._initialTransform || '';\r\n    this._activeTransform = {x: 0, y: 0};\r\n    this._passiveTransform = {x: 0, y: 0};\r\n  }\r\n\r\n  /**\r\n   * Sets a handle as disabled. While a handle is disabled, it'll capture and interrupt dragging.\r\n   * @param handle Handle element that should be disabled.\r\n   */\r\n  disableHandle(handle: HTMLElement) {\r\n    if (!this._disabledHandles.has(handle) && this._handles.indexOf(handle) > -1) {\r\n      this._disabledHandles.add(handle);\r\n      toggleNativeDragInteractions(handle, true);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Enables a handle, if it has been disabled.\r\n   * @param handle Handle element to be enabled.\r\n   */\r\n  enableHandle(handle: HTMLElement) {\r\n    if (this._disabledHandles.has(handle)) {\r\n      this._disabledHandles.delete(handle);\r\n      toggleNativeDragInteractions(handle, this.disabled);\r\n    }\r\n  }\r\n\r\n  /** Sets the layout direction of the draggable item. */\r\n  withDirection(direction: Direction): this {\r\n    this._direction = direction;\r\n    return this;\r\n  }\r\n\r\n  /** Sets the container that the item is part of. */\r\n  _withDropContainer(container: DropListRef) {\r\n    this._dropContainer = container;\r\n  }\r\n\r\n  /**\r\n   * Gets the current position in pixels the draggable outside of a drop container.\r\n   */\r\n  getFreeDragPosition(): Readonly<Point> {\r\n    const position = this.isDragging() ? this._activeTransform : this._passiveTransform;\r\n    return {x: position.x, y: position.y};\r\n  }\r\n\r\n  /**\r\n   * Sets the current position in pixels the draggable outside of a drop container.\r\n   * @param value New position to be set.\r\n   */\r\n  setFreeDragPosition(value: Point): this {\r\n    this._activeTransform = {x: 0, y: 0};\r\n    this._passiveTransform.x = value.x;\r\n    this._passiveTransform.y = value.y;\r\n\r\n    if (!this._dropContainer) {\r\n      this._applyRootElementTransform(value.x, value.y);\r\n    }\r\n\r\n    return this;\r\n  }\r\n\r\n  /** Updates the item's sort order based on the last-known pointer position. */\r\n  _sortFromLastPointerPosition() {\r\n    const position = this._lastKnownPointerPosition;\r\n\r\n    if (position && this._dropContainer) {\r\n      this._updateActiveDropContainer(this._getConstrainedPointerPosition(position), position);\r\n    }\r\n  }\r\n\r\n  /** Unsubscribes from the global subscriptions. */\r\n  private _removeSubscriptions() {\r\n    this._pointerMoveSubscription.unsubscribe();\r\n    this._pointerUpSubscription.unsubscribe();\r\n    this._scrollSubscription.unsubscribe();\r\n  }\r\n\r\n  /** Destroys the preview element and its ViewRef. */\r\n  private _destroyPreview() {\r\n    if (this._preview) {\r\n      removeNode(this._preview);\r\n    }\r\n\r\n    if (this._previewRef) {\r\n      this._previewRef.destroy();\r\n    }\r\n\r\n    this._preview = this._previewRef = null!;\r\n  }\r\n\r\n  /** Destroys the placeholder element and its ViewRef. */\r\n  private _destroyPlaceholder() {\r\n    if (this._placeholder) {\r\n      removeNode(this._placeholder);\r\n    }\r\n\r\n    if (this._placeholderRef) {\r\n      this._placeholderRef.destroy();\r\n    }\r\n\r\n    this._placeholder = this._placeholderRef = null!;\r\n  }\r\n\r\n  /** Handler for the `mousedown`/`touchstart` events. */\r\n  private _pointerDown = (event: MouseEvent | TouchEvent) => {\r\n    this.beforeStarted.next();\r\n\r\n    // Delegate the event based on whether it started from a handle or the element itself.\r\n    if (this._handles.length) {\r\n      const targetHandle = this._handles.find(handle => {\r\n        const target = event.target;\r\n        return !!target && (target === handle || handle.contains(target as HTMLElement));\r\n      });\r\n\r\n      if (targetHandle && !this._disabledHandles.has(targetHandle) && !this.disabled) {\r\n        this._initializeDragSequence(targetHandle, event);\r\n      }\r\n    } else if (!this.disabled) {\r\n      this._initializeDragSequence(this._rootElement, event);\r\n    }\r\n  }\r\n\r\n  /** Handler that is invoked when the user moves their pointer after they've initiated a drag. */\r\n  private _pointerMove = (event: MouseEvent | TouchEvent) => {\r\n    const pointerPosition = this._getPointerPositionOnPage(event);\r\n\r\n    if (!this._hasStartedDragging) {\r\n      const distanceX = Math.abs(pointerPosition.x - this._pickupPositionOnPage.x);\r\n      const distanceY = Math.abs(pointerPosition.y - this._pickupPositionOnPage.y);\r\n      const isOverThreshold = distanceX + distanceY >= this._config.dragStartThreshold;\r\n\r\n      // Only start dragging after the user has moved more than the minimum distance in either\r\n      // direction. Note that this is preferrable over doing something like `skip(minimumDistance)`\r\n      // in the `pointerMove` subscription, because we're not guaranteed to have one move event\r\n      // per pixel of movement (e.g. if the user moves their pointer quickly).\r\n      if (isOverThreshold) {\r\n        const isDelayElapsed = Date.now() >= this._dragStartTime + this._getDragStartDelay(event);\r\n        const container = this._dropContainer;\r\n\r\n        if (!isDelayElapsed) {\r\n          this._endDragSequence(event);\r\n          return;\r\n        }\r\n\r\n        // Prevent other drag sequences from starting while something in the container is still\r\n        // being dragged. This can happen while we're waiting for the drop animation to finish\r\n        // and can cause errors, because some elements might still be moving around.\r\n        if (!container || (!container.isDragging() && !container.isReceiving())) {\r\n          // Prevent the default action as soon as the dragging sequence is considered as\r\n          // \"started\" since waiting for the next event can allow the device to begin scrolling.\r\n          event.preventDefault();\r\n          this._hasStartedDragging = true;\r\n          this._ngZone.run(() => this._startDragSequence(event));\r\n        }\r\n      }\r\n\r\n      return;\r\n    }\r\n\r\n    // We only need the preview dimensions if we have a boundary element.\r\n    if (this._boundaryElement) {\r\n      // Cache the preview element rect if we haven't cached it already or if\r\n      // we cached it too early before the element dimensions were computed.\r\n      if (!this._previewRect || (!this._previewRect.width && !this._previewRect.height)) {\r\n        this._previewRect = (this._preview || this._rootElement).getBoundingClientRect();\r\n      }\r\n    }\r\n\r\n    // We prevent the default action down here so that we know that dragging has started. This is\r\n    // important for touch devices where doing this too early can unnecessarily block scrolling,\r\n    // if there's a dragging delay.\r\n    event.preventDefault();\r\n\r\n    const constrainedPointerPosition = this._getConstrainedPointerPosition(pointerPosition);\r\n    this._hasMoved = true;\r\n    this._lastKnownPointerPosition = pointerPosition;\r\n    this._updatePointerDirectionDelta(constrainedPointerPosition);\r\n\r\n    let transformRatioX = 1.0;\r\n      let transformRatioY = 1.0;\r\n\r\n      if (typeof SVGElement !== 'undefined' && this._rootElement instanceof SVGElement) {\r\n        const svgElement = this._rootElement.ownerSVGElement;\r\n        const svgViewBoxRect = svgElement?.viewBox.baseVal;\r\n\r\n        if (svgElement?.clientWidth !== 0 && svgElement?.clientHeight !== 0) {\r\n          const preserveAspectRatio = svgElement!.preserveAspectRatio;\r\n          const aspectRatio = svgViewBoxRect!.width / svgViewBoxRect!.height;\r\n          let widthRatio = svgViewBoxRect!.width / svgElement!.clientWidth;\r\n          let heightRatio = svgViewBoxRect!.height / svgElement!.clientHeight;\r\n          if (preserveAspectRatio.baseVal.align !== preserveAspectRatio.baseVal.SVG_PRESERVEASPECTRATIO_NONE) {\r\n            if (preserveAspectRatio.baseVal.meetOrSlice == preserveAspectRatio.baseVal.SVG_MEETORSLICE_MEET) {\r\n              // meet (scale-down)\r\n              if (widthRatio > heightRatio) {\r\n                transformRatioX = widthRatio;\r\n                const height = svgElement!.clientWidth / aspectRatio;\r\n                transformRatioY = svgViewBoxRect!.height / height;\r\n                \r\n              } else if (heightRatio > widthRatio) {\r\n                transformRatioY = heightRatio;\r\n                const width = svgElement!.clientHeight * aspectRatio;\r\n                transformRatioX = svgViewBoxRect!.width / width;\r\n              }\r\n            } else {\r\n              // slice (scale-up)\r\n              if (widthRatio > heightRatio) {\r\n                \r\n                transformRatioY = heightRatio;\r\n                const width = svgElement!.clientHeight * aspectRatio;\r\n                transformRatioX = svgViewBoxRect!.width / width;\r\n                \r\n              } else if (heightRatio > widthRatio) {\r\n                transformRatioX = widthRatio;\r\n                const height = svgElement!.clientWidth / aspectRatio;\r\n                transformRatioY = svgViewBoxRect!.height / height;\r\n              }\r\n            }\r\n          } else {\r\n            if (svgViewBoxRect?.width !== 0) {\r\n              transformRatioX = widthRatio;\r\n            }\r\n          \r\n            if (svgViewBoxRect?.height !== 0) {\r\n              transformRatioY = heightRatio;\r\n            }\r\n          }\r\n        }\r\n      }\r\n      \r\n      const activeTransform = this._activeTransform;\r\n      activeTransform.x =\r\n          (constrainedPointerPosition.x - this._pickupPositionOnPage.x) * transformRatioX + this._passiveTransform.x;\r\n      activeTransform.y =\r\n          (constrainedPointerPosition.y - this._pickupPositionOnPage.y) * transformRatioY + this._passiveTransform.y;\r\n      \r\n      this._applyRootElementTransform(activeTransform.x, activeTransform.y);\r\n\r\n\r\n    // Since this event gets fired for every pixel while dragging, we only\r\n    // want to fire it if the consumer opted into it. Also we have to\r\n    // re-enter the zone because we run all of the events on the outside.\r\n    if (this._moveEvents.observers.length) {\r\n      this._ngZone.run(() => {\r\n        this._moveEvents.next({\r\n          source: this,\r\n          pointerPosition: constrainedPointerPosition,\r\n          event,\r\n          distance: this._getDragDistance(constrainedPointerPosition),\r\n          delta: this._pointerDirectionDelta\r\n        });\r\n      });\r\n    }\r\n  }\r\n\r\n  /** Handler that is invoked when the user lifts their pointer up, after initiating a drag. */\r\n  private _pointerUp = (event: MouseEvent | TouchEvent) => {\r\n    this._endDragSequence(event);\r\n  }\r\n\r\n  /**\r\n   * Clears subscriptions and stops the dragging sequence.\r\n   * @param event Browser event object that ended the sequence.\r\n   */\r\n  private _endDragSequence(event: MouseEvent | TouchEvent) {\r\n    // Note that here we use `isDragging` from the service, rather than from `this`.\r\n    // The difference is that the one from the service reflects whether a dragging sequence\r\n    // has been initiated, whereas the one on `this` includes whether the user has passed\r\n    // the minimum dragging threshold.\r\n    if (!this._dragDropRegistry.isDragging(this)) {\r\n      return;\r\n    }\r\n\r\n    this._removeSubscriptions();\r\n    this._dragDropRegistry.stopDragging(this);\r\n    this._toggleNativeDragInteractions();\r\n\r\n    if (this._handles) {\r\n      this._rootElement.style.webkitTapHighlightColor = this._rootElementTapHighlight;\r\n    }\r\n\r\n    if (!this._hasStartedDragging) {\r\n      return;\r\n    }\r\n\r\n    this.released.next({source: this});\r\n\r\n    if (this._dropContainer) {\r\n      // Stop scrolling immediately, instead of waiting for the animation to finish.\r\n      this._dropContainer._stopScrolling();\r\n      this._animatePreviewToPlaceholder().then(() => {\r\n        this._cleanupDragArtifacts(event);\r\n        this._cleanupCachedDimensions();\r\n        this._dragDropRegistry.stopDragging(this);\r\n      });\r\n    } else {\r\n      // Convert the active transform into a passive one. This means that next time\r\n      // the user starts dragging the item, its position will be calculated relatively\r\n      // to the new passive transform.\r\n      this._passiveTransform.x = this._activeTransform.x;\r\n      this._passiveTransform.y = this._activeTransform.y;\r\n      this._ngZone.run(() => {\r\n        this.ended.next({\r\n          source: this,\r\n          distance: this._getDragDistance(this._getPointerPositionOnPage(event))\r\n        });\r\n      });\r\n      this._cleanupCachedDimensions();\r\n      this._dragDropRegistry.stopDragging(this);\r\n    }\r\n  }\r\n\r\n  /** Starts the dragging sequence. */\r\n  private _startDragSequence(event: MouseEvent | TouchEvent) {\r\n    if (isTouchEvent(event)) {\r\n      this._lastTouchEventTime = Date.now();\r\n    }\r\n\r\n    this._toggleNativeDragInteractions();\r\n\r\n    const dropContainer = this._dropContainer;\r\n\r\n    if (dropContainer) {\r\n      const element = this._rootElement;\r\n      const parent = element.parentNode!;\r\n      const preview = this._preview = this._createPreviewElement();\r\n      const placeholder = this._placeholder = this._createPlaceholderElement();\r\n      const anchor = this._anchor = this._anchor || this._document.createComment('');\r\n\r\n      // Needs to happen before the root element is moved.\r\n      const shadowRoot = this._getShadowRoot();\r\n\r\n      // Insert an anchor node so that we can restore the element's position in the DOM.\r\n      parent.insertBefore(anchor, element);\r\n\r\n      // We move the element out at the end of the body and we make it hidden, because keeping it in\r\n      // place will throw off the consumer's `:last-child` selectors. We can't remove the element\r\n      // from the DOM completely, because iOS will stop firing all subsequent events in the chain.\r\n      toggleVisibility(element, false);\r\n      this._document.body.appendChild(parent.replaceChild(placeholder, element));\r\n      getPreviewInsertionPoint(this._document, shadowRoot).appendChild(preview);\r\n      this.started.next({source: this}); // Emit before notifying the container.\r\n      dropContainer.start();\r\n      this._initialContainer = dropContainer;\r\n      this._initialIndex = dropContainer.getItemIndex(this);\r\n    } else {\r\n      this.started.next({source: this});\r\n      this._initialContainer = this._initialIndex = undefined!;\r\n    }\r\n\r\n    // Important to run after we've called `start` on the parent container\r\n    // so that it has had time to resolve its scrollable parents.\r\n    this._parentPositions.cache(dropContainer ? dropContainer.getScrollableParents() : []);\r\n  }\r\n\r\n  /**\r\n   * Sets up the different variables and subscriptions\r\n   * that will be necessary for the dragging sequence.\r\n   * @param referenceElement Element that started the drag sequence.\r\n   * @param event Browser event object that started the sequence.\r\n   */\r\n  private _initializeDragSequence(referenceElement: HTMLElement, event: MouseEvent | TouchEvent) {\r\n    // Stop propagation if the item is inside another\r\n    // draggable so we don't start multiple drag sequences.\r\n    if (this._parentDragRef) {\r\n      event.stopPropagation();\r\n    }\r\n\r\n    const isDragging = this.isDragging();\r\n    const isTouchSequence = isTouchEvent(event);\r\n    const isAuxiliaryMouseButton = !isTouchSequence && (event as MouseEvent).button !== 0;\r\n    const rootElement = this._rootElement;\r\n    const isSyntheticEvent = !isTouchSequence && this._lastTouchEventTime &&\r\n      this._lastTouchEventTime + MOUSE_EVENT_IGNORE_TIME > Date.now();\r\n\r\n    // If the event started from an element with the native HTML drag&drop, it'll interfere\r\n    // with our own dragging (e.g. `img` tags do it by default). Prevent the default action\r\n    // to stop it from happening. Note that preventing on `dragstart` also seems to work, but\r\n    // it's flaky and it fails if the user drags it away quickly. Also note that we only want\r\n    // to do this for `mousedown` since doing the same for `touchstart` will stop any `click`\r\n    // events from firing on touch devices.\r\n    if (event.target && (event.target as HTMLElement).draggable && event.type === 'mousedown') {\r\n      event.preventDefault();\r\n    }\r\n\r\n    // Abort if the user is already dragging or is using a mouse button other than the primary one.\r\n    if (isDragging || isAuxiliaryMouseButton || isSyntheticEvent) {\r\n      return;\r\n    }\r\n\r\n    // If we've got handles, we need to disable the tap highlight on the entire root element,\r\n    // otherwise iOS will still add it, even though all the drag interactions on the handle\r\n    // are disabled.\r\n    if (this._handles.length) {\r\n      this._rootElementTapHighlight = rootElement.style.webkitTapHighlightColor || '';\r\n      rootElement.style.webkitTapHighlightColor = 'transparent';\r\n    }\r\n\r\n    this._hasStartedDragging = this._hasMoved = false;\r\n\r\n    // Avoid multiple subscriptions and memory leaks when multi touch\r\n    // (isDragging check above isn't enough because of possible temporal and/or dimensional delays)\r\n    this._removeSubscriptions();\r\n    this._pointerMoveSubscription = this._dragDropRegistry.pointerMove.subscribe(this._pointerMove);\r\n    this._pointerUpSubscription = this._dragDropRegistry.pointerUp.subscribe(this._pointerUp);\r\n    this._scrollSubscription = this._dragDropRegistry.scroll.subscribe(scrollEvent => {\r\n      this._updateOnScroll(scrollEvent);\r\n    });\r\n\r\n    if (this._boundaryElement) {\r\n      this._boundaryRect = getMutableClientRect(this._boundaryElement);\r\n    }\r\n\r\n    // If we have a custom preview we can't know ahead of time how large it'll be so we position\r\n    // it next to the cursor. The exception is when the consumer has opted into making the preview\r\n    // the same size as the root element, in which case we do know the size.\r\n    const previewTemplate = this._previewTemplate;\r\n    this._pickupPositionInElement = previewTemplate && previewTemplate.template &&\r\n      !previewTemplate.matchSize ? {x: 0, y: 0} :\r\n      this._getPointerPositionInElement(referenceElement, event);\r\n    const pointerPosition = this._pickupPositionOnPage = this._lastKnownPointerPosition =\r\n        this._getPointerPositionOnPage(event);\r\n    this._pointerDirectionDelta = {x: 0, y: 0};\r\n    this._pointerPositionAtLastDirectionChange = {x: pointerPosition.x, y: pointerPosition.y};\r\n    this._dragStartTime = Date.now();\r\n    this._dragDropRegistry.startDragging(this, event);\r\n  }\r\n\r\n  /** Cleans up the DOM artifacts that were added to facilitate the element being dragged. */\r\n  private _cleanupDragArtifacts(event: MouseEvent | TouchEvent) {\r\n    // Restore the element's visibility and insert it at its old position in the DOM.\r\n    // It's important that we maintain the position, because moving the element around in the DOM\r\n    // can throw off `NgFor` which does smart diffing and re-creates elements only when necessary,\r\n    // while moving the existing elements in all other cases.\r\n    toggleVisibility(this._rootElement, true);\r\n    this._anchor.parentNode!.replaceChild(this._rootElement, this._anchor);\r\n\r\n    this._destroyPreview();\r\n    this._destroyPlaceholder();\r\n    this._boundaryRect = this._previewRect = undefined;\r\n\r\n    // Re-enter the NgZone since we bound `document` events on the outside.\r\n    this._ngZone.run(() => {\r\n      const container = this._dropContainer!;\r\n      const currentIndex = container.getItemIndex(this);\r\n      const pointerPosition = this._getPointerPositionOnPage(event);\r\n      const distance = this._getDragDistance(this._getPointerPositionOnPage(event));\r\n      const isPointerOverContainer = container._isOverContainer(\r\n        pointerPosition.x, pointerPosition.y);\r\n\r\n      this.ended.next({source: this, distance});\r\n      this.dropped.next({\r\n        item: this,\r\n        currentIndex,\r\n        previousIndex: this._initialIndex,\r\n        container: container,\r\n        previousContainer: this._initialContainer,\r\n        isPointerOverContainer,\r\n        distance\r\n      });\r\n      container.drop(this, currentIndex, this._initialIndex, this._initialContainer,\r\n        isPointerOverContainer, distance);\r\n      this._dropContainer = this._initialContainer;\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Updates the item's position in its drop container, or moves it\r\n   * into a new one, depending on its current drag position.\r\n   */\r\n  private _updateActiveDropContainer({x, y}: Point, {x: rawX, y: rawY}: Point) {\r\n    // Drop container that draggable has been moved into.\r\n    let newContainer = this._initialContainer._getSiblingContainerFromPosition(this, x, y);\r\n\r\n    // If we couldn't find a new container to move the item into, and the item has left its\r\n    // initial container, check whether the it's over the initial container. This handles the\r\n    // case where two containers are connected one way and the user tries to undo dragging an\r\n    // item into a new container.\r\n    if (!newContainer && this._dropContainer !== this._initialContainer &&\r\n        this._initialContainer._isOverContainer(x, y)) {\r\n      newContainer = this._initialContainer;\r\n    }\r\n\r\n    if (newContainer && newContainer !== this._dropContainer) {\r\n      this._ngZone.run(() => {\r\n        // Notify the old container that the item has left.\r\n        this.exited.next({item: this, container: this._dropContainer!});\r\n        this._dropContainer!.exit(this);\r\n        // Notify the new container that the item has entered.\r\n        this._dropContainer = newContainer!;\r\n        this._dropContainer.enter(this, x, y, newContainer === this._initialContainer &&\r\n            // If we're re-entering the initial container and sorting is disabled,\r\n            // put item the into its starting index to begin with.\r\n            newContainer.sortingDisabled ? this._initialIndex : undefined);\r\n        this.entered.next({\r\n          item: this,\r\n          container: newContainer!,\r\n          currentIndex: newContainer!.getItemIndex(this)\r\n        });\r\n      });\r\n    }\r\n\r\n    this._dropContainer!._startScrollingIfNecessary(rawX, rawY);\r\n    this._dropContainer!._sortItem(this, x, y, this._pointerDirectionDelta);\r\n    this._preview.style.transform =\r\n        getTransform(x - this._pickupPositionInElement.x, y - this._pickupPositionInElement.y);\r\n  }\r\n\r\n  /**\r\n   * Creates the element that will be rendered next to the user's pointer\r\n   * and will be used as a preview of the element that is being dragged.\r\n   */\r\n  private _createPreviewElement(): HTMLElement {\r\n    const previewConfig = this._previewTemplate;\r\n    const previewClass = this.previewClass;\r\n    const previewTemplate = previewConfig ? previewConfig.template : null;\r\n    let preview: HTMLElement;\r\n\r\n    if (previewTemplate && previewConfig) {\r\n      // Measure the element before we've inserted the preview\r\n      // since the insertion could throw off the measurement.\r\n      const rootRect = previewConfig.matchSize ? this._rootElement.getBoundingClientRect() : null;\r\n      const viewRef = previewConfig.viewContainer.createEmbeddedView(previewTemplate,\r\n                                                                     previewConfig.context);\r\n      viewRef.detectChanges();\r\n      preview = getRootNode(viewRef, this._document);\r\n      this._previewRef = viewRef;\r\n      if (previewConfig.matchSize) {\r\n        matchElementSize(preview, rootRect!);\r\n      } else {\r\n        preview.style.transform =\r\n            getTransform(this._pickupPositionOnPage.x, this._pickupPositionOnPage.y);\r\n      }\r\n    } else {\r\n      const element = this._rootElement;\r\n      preview = deepCloneNode(element);\r\n      matchElementSize(preview, element.getBoundingClientRect());\r\n    }\r\n\r\n    extendStyles(preview.style, {\r\n      // It's important that we disable the pointer events on the preview, because\r\n      // it can throw off the `document.elementFromPoint` calls in the `CdkDropList`.\r\n      pointerEvents: 'none',\r\n      // We have to reset the margin, because it can throw off positioning relative to the viewport.\r\n      margin: '0',\r\n      position: 'fixed',\r\n      top: '0',\r\n      left: '0',\r\n      zIndex: `${this._config.zIndex || 1000}`\r\n    });\r\n\r\n    toggleNativeDragInteractions(preview, false);\r\n    preview.classList.add('cdk-drag-preview');\r\n    preview.setAttribute('dir', this._direction);\r\n\r\n    if (previewClass) {\r\n      if (Array.isArray(previewClass)) {\r\n        previewClass.forEach(className => preview.classList.add(className));\r\n      } else {\r\n        preview.classList.add(previewClass);\r\n      }\r\n    }\r\n\r\n    return preview;\r\n  }\r\n\r\n  /**\r\n   * Animates the preview element from its current position to the location of the drop placeholder.\r\n   * @returns Promise that resolves when the animation completes.\r\n   */\r\n  private _animatePreviewToPlaceholder(): Promise<void> {\r\n    // If the user hasn't moved yet, the transitionend event won't fire.\r\n    if (!this._hasMoved) {\r\n      return Promise.resolve();\r\n    }\r\n\r\n    const placeholderRect = this._placeholder.getBoundingClientRect();\r\n\r\n    // Apply the class that adds a transition to the preview.\r\n    this._preview.classList.add('cdk-drag-animating');\r\n\r\n    // Move the preview to the placeholder position.\r\n    this._preview.style.transform = getTransform(placeholderRect.left, placeholderRect.top);\r\n\r\n    // If the element doesn't have a `transition`, the `transitionend` event won't fire. Since\r\n    // we need to trigger a style recalculation in order for the `cdk-drag-animating` class to\r\n    // apply its style, we take advantage of the available info to figure out whether we need to\r\n    // bind the event in the first place.\r\n    const duration = getTransformTransitionDurationInMs(this._preview);\r\n\r\n    if (duration === 0) {\r\n      return Promise.resolve();\r\n    }\r\n\r\n    return this._ngZone.runOutsideAngular(() => {\r\n      return new Promise(resolve => {\r\n        const handler = ((event: TransitionEvent) => {\r\n          if (!event || (event.target === this._preview && event.propertyName === 'transform')) {\r\n            this._preview.removeEventListener('transitionend', handler);\r\n            resolve();\r\n            clearTimeout(timeout);\r\n          }\r\n        }) as EventListenerOrEventListenerObject;\r\n\r\n        // If a transition is short enough, the browser might not fire the `transitionend` event.\r\n        // Since we know how long it's supposed to take, add a timeout with a 50% buffer that'll\r\n        // fire if the transition hasn't completed when it was supposed to.\r\n        const timeout = setTimeout(handler as Function, duration * 1.5);\r\n        this._preview.addEventListener('transitionend', handler);\r\n      });\r\n    });\r\n  }\r\n\r\n  /** Creates an element that will be shown instead of the current element while dragging. */\r\n  private _createPlaceholderElement(): HTMLElement {\r\n    const placeholderConfig = this._placeholderTemplate;\r\n    const placeholderTemplate = placeholderConfig ? placeholderConfig.template : null;\r\n    let placeholder: HTMLElement;\r\n\r\n    if (placeholderTemplate) {\r\n      this._placeholderRef = placeholderConfig!.viewContainer.createEmbeddedView(\r\n        placeholderTemplate,\r\n        placeholderConfig!.context\r\n      );\r\n      this._placeholderRef.detectChanges();\r\n      placeholder = getRootNode(this._placeholderRef, this._document);\r\n    } else {\r\n      placeholder = deepCloneNode(this._rootElement);\r\n    }\r\n\r\n    placeholder.classList.add('cdk-drag-placeholder');\r\n    return placeholder;\r\n  }\r\n\r\n  /**\r\n   * Figures out the coordinates at which an element was picked up.\r\n   * @param referenceElement Element that initiated the dragging.\r\n   * @param event Event that initiated the dragging.\r\n   */\r\n  private _getPointerPositionInElement(referenceElement: HTMLElement,\r\n                                       event: MouseEvent | TouchEvent): Point {\r\n    const elementRect = this._rootElement.getBoundingClientRect();\r\n    const handleElement = referenceElement === this._rootElement ? null : referenceElement;\r\n    const referenceRect = handleElement ? handleElement.getBoundingClientRect() : elementRect;\r\n    const point = isTouchEvent(event) ? event.targetTouches[0] : event;\r\n    const scrollPosition = this._getViewportScrollPosition();\r\n    const x = point.pageX - referenceRect.left - scrollPosition.left;\r\n    const y = point.pageY - referenceRect.top - scrollPosition.top;\r\n\r\n    return {\r\n      x: referenceRect.left - elementRect.left + x,\r\n      y: referenceRect.top - elementRect.top + y\r\n    };\r\n  }\r\n\r\n  /** Determines the point of the page that was touched by the user. */\r\n  private _getPointerPositionOnPage(event: MouseEvent | TouchEvent): Point {\r\n    const scrollPosition = this._getViewportScrollPosition();\r\n    const point = isTouchEvent(event) ?\r\n        // `touches` will be empty for start/end events so we have to fall back to `changedTouches`.\r\n        // Also note that on real devices we're guaranteed for either `touches` or `changedTouches`\r\n        // to have a value, but Firefox in device emulation mode has a bug where both can be empty\r\n        // for `touchstart` and `touchend` so we fall back to a dummy object in order to avoid\r\n        // throwing an error. The value returned here will be incorrect, but since this only\r\n        // breaks inside a developer tool and the value is only used for secondary information,\r\n        // we can get away with it. See https://bugzilla.mozilla.org/show_bug.cgi?id=1615824.\r\n        (event.touches[0] || event.changedTouches[0] || {pageX: 0, pageY: 0}) : event;\r\n\r\n        return {\r\n          x: point.pageX - scrollPosition.left,\r\n          y: point.pageY - scrollPosition.top\r\n        };\r\n  }\r\n\r\n\r\n  /** Gets the pointer position on the page, accounting for any position constraints. */\r\n  private _getConstrainedPointerPosition(point: Point): Point {\r\n    const dropContainerLock = this._dropContainer ? this._dropContainer.lockAxis : null;\r\n    let {x, y} = this.constrainPosition ? this.constrainPosition(point, this) : point;\r\n\r\n    if (this.lockAxis === 'x' || dropContainerLock === 'x') {\r\n      y = this._pickupPositionOnPage.y;\r\n    } else if (this.lockAxis === 'y' || dropContainerLock === 'y') {\r\n      x = this._pickupPositionOnPage.x;\r\n    }\r\n\r\n    if (this._boundaryRect) {\r\n      const {x: pickupX, y: pickupY} = this._pickupPositionInElement;\r\n      const boundaryRect = this._boundaryRect;\r\n      const previewRect = this._previewRect!;\r\n      const minY = boundaryRect.top + pickupY;\r\n      const maxY = boundaryRect.bottom - (previewRect.height - pickupY);\r\n      const minX = boundaryRect.left + pickupX;\r\n      const maxX = boundaryRect.right - (previewRect.width - pickupX);\r\n\r\n      x = clamp(x, minX, maxX);\r\n      y = clamp(y, minY, maxY);\r\n    }\r\n\r\n    return {x, y};\r\n  }\r\n\r\n\r\n  /** Updates the current drag delta, based on the user's current pointer position on the page. */\r\n  private _updatePointerDirectionDelta(pointerPositionOnPage: Point) {\r\n    const {x, y} = pointerPositionOnPage;\r\n    const delta = this._pointerDirectionDelta;\r\n    const positionSinceLastChange = this._pointerPositionAtLastDirectionChange;\r\n\r\n    // Amount of pixels the user has dragged since the last time the direction changed.\r\n    const changeX = Math.abs(x - positionSinceLastChange.x);\r\n    const changeY = Math.abs(y - positionSinceLastChange.y);\r\n\r\n    // Because we handle pointer events on a per-pixel basis, we don't want the delta\r\n    // to change for every pixel, otherwise anything that depends on it can look erratic.\r\n    // To make the delta more consistent, we track how much the user has moved since the last\r\n    // delta change and we only update it after it has reached a certain threshold.\r\n    if (changeX > this._config.pointerDirectionChangeThreshold) {\r\n      delta.x = x > positionSinceLastChange.x ? 1 : -1;\r\n      positionSinceLastChange.x = x;\r\n    }\r\n\r\n    if (changeY > this._config.pointerDirectionChangeThreshold) {\r\n      delta.y = y > positionSinceLastChange.y ? 1 : -1;\r\n      positionSinceLastChange.y = y;\r\n    }\r\n\r\n    return delta;\r\n  }\r\n\r\n  /** Toggles the native drag interactions, based on how many handles are registered. */\r\n  private _toggleNativeDragInteractions() {\r\n    if (!this._rootElement || !this._handles) {\r\n      return;\r\n    }\r\n\r\n    const shouldEnable = this._handles.length > 0 || !this.isDragging();\r\n\r\n    if (shouldEnable !== this._nativeInteractionsEnabled) {\r\n      this._nativeInteractionsEnabled = shouldEnable;\r\n      toggleNativeDragInteractions(this._rootElement, shouldEnable);\r\n    }\r\n  }\r\n\r\n  /** Removes the manually-added event listeners from the root element. */\r\n  private _removeRootElementListeners(element: HTMLElement) {\r\n    element.removeEventListener('mousedown', this._pointerDown, activeEventListenerOptions);\r\n    element.removeEventListener('touchstart', this._pointerDown, passiveEventListenerOptions);\r\n  }\r\n\r\n  /**\r\n   * Applies a `transform` to the root element, taking into account any existing transforms on it.\r\n   * @param x New transform value along the X axis.\r\n   * @param y New transform value along the Y axis.\r\n   */\r\n  private _applyRootElementTransform(x: number, y: number) {\r\n    const transform = getTransform(x, y);\r\n\r\n    // Cache the previous transform amount only after the first drag sequence, because\r\n    // we don't want our own transforms to stack on top of each other.\r\n    if (this._initialTransform == null) {\r\n      this._initialTransform = this._rootElement.style.transform || '';\r\n    }\r\n\r\n    // Preserve the previous `transform` value, if there was one. Note that we apply our own\r\n    // transform before the user's, because things like rotation can affect which direction\r\n    // the element will be translated towards.\r\n    this._rootElement.style.transform = this._initialTransform ?\r\n      transform + ' ' + this._initialTransform  : transform;\r\n  }\r\n\r\n  /**\r\n   * Gets the distance that the user has dragged during the current drag sequence.\r\n   * @param currentPosition Current position of the user's pointer.\r\n   */\r\n  private _getDragDistance(currentPosition: Point): Point {\r\n    const pickupPosition = this._pickupPositionOnPage;\r\n\r\n    if (pickupPosition) {\r\n      return {x: currentPosition.x - pickupPosition.x, y: currentPosition.y - pickupPosition.y};\r\n    }\r\n\r\n    return {x: 0, y: 0};\r\n  }\r\n\r\n  /** Cleans up any cached element dimensions that we don't need after dragging has stopped. */\r\n  private _cleanupCachedDimensions() {\r\n    this._boundaryRect = this._previewRect = undefined;\r\n    this._parentPositions.clear();\r\n  }\r\n\r\n  /**\r\n   * Checks whether the element is still inside its boundary after the viewport has been resized.\r\n   * If not, the position is adjusted so that the element fits again.\r\n   */\r\n  private _containInsideBoundaryOnResize() {\r\n    let {x, y} = this._passiveTransform;\r\n\r\n    if ((x === 0 && y === 0) || this.isDragging() || !this._boundaryElement) {\r\n      return;\r\n    }\r\n\r\n    const boundaryRect = this._boundaryElement.getBoundingClientRect();\r\n    const elementRect = this._rootElement.getBoundingClientRect();\r\n\r\n    // It's possible that the element got hidden away after dragging (e.g. by switching to a\r\n    // different tab). Don't do anything in this case so we don't clear the user's position.\r\n    if ((boundaryRect.width === 0 && boundaryRect.height === 0) ||\r\n        (elementRect.width === 0 && elementRect.height === 0)) {\r\n      return;\r\n    }\r\n\r\n    const leftOverflow = boundaryRect.left - elementRect.left;\r\n    const rightOverflow = elementRect.right - boundaryRect.right;\r\n    const topOverflow = boundaryRect.top - elementRect.top;\r\n    const bottomOverflow = elementRect.bottom - boundaryRect.bottom;\r\n\r\n    // If the element has become wider than the boundary, we can't\r\n    // do much to make it fit so we just anchor it to the left.\r\n    if (boundaryRect.width > elementRect.width) {\r\n      if (leftOverflow > 0) {\r\n        x += leftOverflow;\r\n      }\r\n\r\n      if (rightOverflow > 0) {\r\n        x -= rightOverflow;\r\n      }\r\n    } else {\r\n      x = 0;\r\n    }\r\n\r\n    // If the element has become taller than the boundary, we can't\r\n    // do much to make it fit so we just anchor it to the top.\r\n    if (boundaryRect.height > elementRect.height) {\r\n      if (topOverflow > 0) {\r\n        y += topOverflow;\r\n      }\r\n\r\n      if (bottomOverflow > 0) {\r\n        y -= bottomOverflow;\r\n      }\r\n    } else {\r\n      y = 0;\r\n    }\r\n\r\n    if (x !== this._passiveTransform.x || y !== this._passiveTransform.y) {\r\n      this.setFreeDragPosition({y, x});\r\n    }\r\n  }\r\n\r\n  /** Gets the drag start delay, based on the event type. */\r\n  private _getDragStartDelay(event: MouseEvent | TouchEvent): number {\r\n    const value = this.dragStartDelay;\r\n\r\n    if (typeof value === 'number') {\r\n      return value;\r\n    } else if (isTouchEvent(event)) {\r\n      return value.touch;\r\n    }\r\n\r\n    return value ? value.mouse : 0;\r\n  }\r\n\r\n  /** Updates the internal state of the draggable element when scrolling has occurred. */\r\n  private _updateOnScroll(event: Event) {\r\n    const scrollDifference = this._parentPositions.handleScroll(event);\r\n\r\n    if (scrollDifference) {\r\n      const target = event.target as Node;\r\n\r\n      // ClientRect dimensions are based on the scroll position of the page and its parent node so\r\n      // we have to update the cached boundary ClientRect if the user has scrolled. Check for\r\n      // the `document` specifically since IE doesn't support `contains` on it.\r\n      if (this._boundaryRect && (target === this._document ||\r\n          (target !== this._boundaryElement && target.contains(this._boundaryElement)))) {\r\n        adjustClientRect(this._boundaryRect, scrollDifference.top, scrollDifference.left);\r\n      }\r\n\r\n      this._pickupPositionOnPage.x += scrollDifference.left;\r\n      this._pickupPositionOnPage.y += scrollDifference.top;\r\n\r\n      // If we're in free drag mode, we have to update the active transform, because\r\n      // it isn't relative to the viewport like the preview inside a drop list.\r\n      if (!this._dropContainer) {\r\n        this._activeTransform.x -= scrollDifference.left;\r\n        this._activeTransform.y -= scrollDifference.top;\r\n        this._applyRootElementTransform(this._activeTransform.x, this._activeTransform.y);\r\n      }\r\n    }\r\n  }\r\n\r\n  /** Gets the scroll position of the viewport. */\r\n  private _getViewportScrollPosition() {\r\n    const cachedPosition = this._parentPositions.positions.get(this._document);\r\n    return cachedPosition ? cachedPosition.scrollPosition :\r\n        this._viewportRuler.getViewportScrollPosition();\r\n  }\r\n\r\n  /**\r\n   * Lazily resolves and returns the shadow root of the element. We do this in a function, rather\r\n   * than saving it in property directly on init, because we want to resolve it as late as possible\r\n   * in order to ensure that the element has been moved into the shadow DOM. Doing it inside the\r\n   * constructor might be too early if the element is inside of something like `ngFor` or `ngIf`.\r\n   */\r\n  private _getShadowRoot(): ShadowRoot | null {\r\n    if (this._cachedShadowRoot === undefined) {\r\n      this._cachedShadowRoot = _getShadowRoot(this._rootElement);\r\n    }\r\n\r\n    return this._cachedShadowRoot;\r\n  }\r\n}\r\n\r\n/**\r\n * Gets a 3d `transform` that can be applied to an element.\r\n * @param x Desired position of the element along the X axis.\r\n * @param y Desired position of the element along the Y axis.\r\n */\r\nfunction getTransform(x: number, y: number): string {\r\n  // Round the transforms since some browsers will\r\n  // blur the elements for sub-pixel transforms.\r\n  return `translate3d(${Math.round(x)}px, ${Math.round(y)}px, 0)`;\r\n}\r\n\r\n/** Clamps a value between a minimum and a maximum. */\r\nfunction clamp(value: number, min: number, max: number) {\r\n  return Math.max(min, Math.min(max, value));\r\n}\r\n\r\n/**\r\n * Helper to remove a node from the DOM and to do all the necessary null checks.\r\n * @param node Node to be removed.\r\n */\r\nfunction removeNode(node: Node | null) {\r\n  if (node && node.parentNode) {\r\n    node.parentNode.removeChild(node);\r\n  }\r\n}\r\n\r\n/** Determines whether an event is a touch event. */\r\nfunction isTouchEvent(event: MouseEvent | TouchEvent): event is TouchEvent {\r\n  // This function is called for every pixel that the user has dragged so we need it to be\r\n  // as fast as possible. Since we only bind mouse events and touch events, we can assume\r\n  // that if the event's name starts with `t`, it's a touch event.\r\n  return event.type[0] === 't';\r\n}\r\n\r\n/** Gets the element into which the drag preview should be inserted. */\r\nfunction getPreviewInsertionPoint(documentRef: any, shadowRoot: ShadowRoot | null): HTMLElement {\r\n  // We can't use the body if the user is in fullscreen mode,\r\n  // because the preview will render under the fullscreen element.\r\n  // TODO(crisbeto): dedupe this with the `FullscreenOverlayContainer` eventually.\r\n  return shadowRoot ||\r\n         documentRef.fullscreenElement ||\r\n         documentRef.webkitFullscreenElement ||\r\n         documentRef.mozFullScreenElement ||\r\n         documentRef.msFullscreenElement ||\r\n         documentRef.body;\r\n}\r\n\r\n/**\r\n * Gets the root HTML element of an embedded view.\r\n * If the root is not an HTML element it gets wrapped in one.\r\n */\r\nfunction getRootNode(viewRef: EmbeddedViewRef<any>, _document: Document): HTMLElement {\r\n  const rootNodes: Node[] = viewRef.rootNodes;\r\n\r\n  if (rootNodes.length === 1 && rootNodes[0].nodeType === _document.ELEMENT_NODE) {\r\n    return rootNodes[0] as HTMLElement;\r\n  }\r\n\r\n  const wrapper = _document.createElement('div');\r\n  rootNodes.forEach(node => wrapper.appendChild(node));\r\n  return wrapper;\r\n}\r\n\r\n/**\r\n * Matches the target element's size to the source's size.\r\n * @param target Element that needs to be resized.\r\n * @param sourceRect Dimensions of the source element.\r\n */\r\nfunction matchElementSize(target: HTMLElement, sourceRect: ClientRect): void {\r\n  target.style.width = `${sourceRect.width}px`;\r\n  target.style.height = `${sourceRect.height}px`;\r\n  target.style.transform = getTransform(sourceRect.left, sourceRect.top);\r\n}\r\n","/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n\r\n/**\r\n * Moves an item one index in an array to another.\r\n * @param array Array in which to move the item.\r\n * @param fromIndex Starting index of the item.\r\n * @param toIndex Index to which the item should be moved.\r\n */\r\nexport function moveItemInArray<T = any>(array: T[], fromIndex: number, toIndex: number): void {\r\n  const from = clamp(fromIndex, array.length - 1);\r\n  const to = clamp(toIndex, array.length - 1);\r\n\r\n  if (from === to) {\r\n    return;\r\n  }\r\n\r\n  const target = array[from];\r\n  const delta = to < from ? -1 : 1;\r\n\r\n  for (let i = from; i !== to; i += delta) {\r\n    array[i] = array[i + delta];\r\n  }\r\n\r\n  array[to] = target;\r\n}\r\n\r\n\r\n/**\r\n * Moves an item from one array to another.\r\n * @param currentArray Array from which to transfer the item.\r\n * @param targetArray Array into which to put the item.\r\n * @param currentIndex Index of the item in its current array.\r\n * @param targetIndex Index at which to insert the item.\r\n */\r\nexport function transferArrayItem<T = any>(currentArray: T[],\r\n                                           targetArray: T[],\r\n                                           currentIndex: number,\r\n                                           targetIndex: number): void {\r\n  const from = clamp(currentIndex, currentArray.length - 1);\r\n  const to = clamp(targetIndex, targetArray.length);\r\n\r\n  if (currentArray.length) {\r\n    targetArray.splice(to, 0, currentArray.splice(from, 1)[0]);\r\n  }\r\n}\r\n\r\n/**\r\n * Copies an item from one array to another, leaving it in its\r\n * original position in current array.\r\n * @param currentArray Array from which to copy the item.\r\n * @param targetArray Array into which is copy the item.\r\n * @param currentIndex Index of the item in its current array.\r\n * @param targetIndex Index at which to insert the item.\r\n *\r\n */\r\nexport function copyArrayItem<T = any>(currentArray: T[],\r\n                                       targetArray: T[],\r\n                                       currentIndex: number,\r\n                                       targetIndex: number): void {\r\n  const to = clamp(targetIndex, targetArray.length);\r\n\r\n  if (currentArray.length) {\r\n    targetArray.splice(to, 0, currentArray[currentIndex]);\r\n  }\r\n}\r\n\r\n/** Clamps a number between zero and a maximum. */\r\nfunction clamp(value: number, max: number): number {\r\n  return Math.max(0, Math.min(max, value));\r\n}\r\n","/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n\r\nimport {ElementRef, NgZone} from '@angular/core';\r\nimport {Direction} from '@angular/cdk/bidi';\r\nimport {coerceElement} from '@angular/cdk/coercion';\r\nimport {ViewportRuler} from '@angular/cdk/scrolling';\r\nimport {_getShadowRoot} from '@angular/cdk/platform';\r\nimport {Subject, Subscription, interval, animationFrameScheduler} from 'rxjs';\r\nimport {takeUntil} from 'rxjs/operators';\r\nimport {moveItemInArray} from './drag-utils';\r\nimport {DragDropRegistry} from './drag-drop-registry';\r\nimport {DragRefInternal as DragRef, Point} from './drag-ref';\r\nimport {\r\n  isPointerNearClientRect,\r\n  adjustClientRect,\r\n  getMutableClientRect,\r\n  isInsideClientRect,\r\n} from './client-rect';\r\nimport {ParentPositionTracker} from './parent-position-tracker';\r\nimport {DragCSSStyleDeclaration} from './drag-styling';\r\n\r\n/**\r\n * Proximity, as a ratio to width/height, at which a\r\n * dragged item will affect the drop container.\r\n */\r\nconst DROP_PROXIMITY_THRESHOLD = 0.05;\r\n\r\n/**\r\n * Proximity, as a ratio to width/height at which to start auto-scrolling the drop list or the\r\n * viewport. The value comes from trying it out manually until it feels right.\r\n */\r\nconst SCROLL_PROXIMITY_THRESHOLD = 0.05;\r\n\r\n/**\r\n * Entry in the position cache for draggable items.\r\n * @docs-private\r\n */\r\ninterface CachedItemPosition {\r\n  /** Instance of the drag item. */\r\n  drag: DragRef;\r\n  /** Dimensions of the item. */\r\n  clientRect: ClientRect;\r\n  /** Amount by which the item has been moved since dragging started. */\r\n  offset: number;\r\n}\r\n\r\n/** Vertical direction in which we can auto-scroll. */\r\nconst enum AutoScrollVerticalDirection {NONE, UP, DOWN}\r\n\r\n/** Horizontal direction in which we can auto-scroll. */\r\nconst enum AutoScrollHorizontalDirection {NONE, LEFT, RIGHT}\r\n\r\n/**\r\n * Internal compile-time-only representation of a `DropListRef`.\r\n * Used to avoid circular import issues between the `DropListRef` and the `DragRef`.\r\n * @docs-private\r\n */\r\nexport interface DropListRefInternal extends DropListRef {}\r\n\r\n/**\r\n * Reference to a drop list. Used to manipulate or dispose of the container.\r\n */\r\nexport class DropListRef<T = any> {\r\n  /** Element that the drop list is attached to. */\r\n  element: HTMLElement | ElementRef<HTMLElement>;\r\n\r\n  /** Whether starting a dragging sequence from this container is disabled. */\r\n  disabled: boolean = false;\r\n\r\n  /** Whether sorting items within the list is disabled. */\r\n  sortingDisabled: boolean = false;\r\n\r\n  /** Locks the position of the draggable elements inside the container along the specified axis. */\r\n  lockAxis: 'x' | 'y';\r\n\r\n  /**\r\n   * Whether auto-scrolling the view when the user\r\n   * moves their pointer close to the edges is disabled.\r\n   */\r\n  autoScrollDisabled: boolean = false;\r\n\r\n  /** Number of pixels to scroll for each frame when auto-scrolling an element. */\r\n  autoScrollStep: number = 2;\r\n\r\n  /**\r\n   * Function that is used to determine whether an item\r\n   * is allowed to be moved into a drop container.\r\n   */\r\n  enterPredicate: (drag: DragRef, drop: DropListRef) => boolean = () => true;\r\n\r\n  /** Functions that is used to determine whether an item can be sorted into a particular index. */\r\n  sortPredicate: (index: number, drag: DragRef, drop: DropListRef) => boolean = () => true;\r\n\r\n  /** Emits right before dragging has started. */\r\n  beforeStarted = new Subject<void>();\r\n\r\n  /**\r\n   * Emits when the user has moved a new drag item into this container.\r\n   */\r\n  entered = new Subject<{item: DragRef, container: DropListRef, currentIndex: number}>();\r\n\r\n  /**\r\n   * Emits when the user removes an item from the container\r\n   * by dragging it into another container.\r\n   */\r\n  exited = new Subject<{item: DragRef, container: DropListRef}>();\r\n\r\n  /** Emits when the user drops an item inside the container. */\r\n  dropped = new Subject<{\r\n    item: DragRef,\r\n    currentIndex: number,\r\n    previousIndex: number,\r\n    container: DropListRef,\r\n    previousContainer: DropListRef,\r\n    isPointerOverContainer: boolean,\r\n    distance: Point;\r\n  }>();\r\n\r\n  /** Emits as the user is swapping items while actively dragging. */\r\n  sorted = new Subject<{\r\n    previousIndex: number,\r\n    currentIndex: number,\r\n    container: DropListRef,\r\n    item: DragRef\r\n  }>();\r\n\r\n  /** Arbitrary data that can be attached to the drop list. */\r\n  data: T;\r\n\r\n  /** Whether an item in the list is being dragged. */\r\n  private _isDragging = false;\r\n\r\n  /** Cache of the dimensions of all the items inside the container. */\r\n  private _itemPositions: CachedItemPosition[] = [];\r\n\r\n  /** Keeps track of the positions of any parent scrollable elements. */\r\n  private _parentPositions: ParentPositionTracker;\r\n\r\n  /** Cached `ClientRect` of the drop list. */\r\n  private _clientRect: ClientRect | undefined;\r\n\r\n  /**\r\n   * Draggable items that are currently active inside the container. Includes the items\r\n   * from `_draggables`, as well as any items that have been dragged in, but haven't\r\n   * been dropped yet.\r\n   */\r\n  private _activeDraggables: DragRef[];\r\n\r\n  /**\r\n   * Keeps track of the item that was last swapped with the dragged item, as well as what direction\r\n   * the pointer was moving in when the swap occured and whether the user's pointer continued to\r\n   * overlap with the swapped item after the swapping occurred.\r\n   */\r\n  private _previousSwap = {drag: null as DragRef | null, delta: 0, overlaps: false};\r\n\r\n  /** Draggable items in the container. */\r\n  private _draggables: ReadonlyArray<DragRef> = [];\r\n\r\n  /** Drop lists that are connected to the current one. */\r\n  private _siblings: ReadonlyArray<DropListRef> = [];\r\n\r\n  /** Direction in which the list is oriented. */\r\n  private _orientation: 'horizontal' | 'vertical' = 'vertical';\r\n\r\n  /** Connected siblings that currently have a dragged item. */\r\n  private _activeSiblings = new Set<DropListRef>();\r\n\r\n  /** Layout direction of the drop list. */\r\n  private _direction: Direction = 'ltr';\r\n\r\n  /** Subscription to the window being scrolled. */\r\n  private _viewportScrollSubscription = Subscription.EMPTY;\r\n\r\n  /** Vertical direction in which the list is currently scrolling. */\r\n  private _verticalScrollDirection = AutoScrollVerticalDirection.NONE;\r\n\r\n  /** Horizontal direction in which the list is currently scrolling. */\r\n  private _horizontalScrollDirection = AutoScrollHorizontalDirection.NONE;\r\n\r\n  /** Node that is being auto-scrolled. */\r\n  private _scrollNode: HTMLElement | Window;\r\n\r\n  /** Used to signal to the current auto-scroll sequence when to stop. */\r\n  private _stopScrollTimers = new Subject<void>();\r\n\r\n  /** Shadow root of the current element. Necessary for `elementFromPoint` to resolve correctly. */\r\n  private _cachedShadowRoot: DocumentOrShadowRoot | null = null;\r\n\r\n  /** Reference to the document. */\r\n  private _document: Document;\r\n\r\n  /** Elements that can be scrolled while the user is dragging. */\r\n  private _scrollableElements: HTMLElement[];\r\n\r\n  /** Initial value for the element's `scroll-snap-type` style. */\r\n  private _initialScrollSnap: string;\r\n\r\n  constructor(\r\n    element: ElementRef<HTMLElement> | HTMLElement,\r\n    private _dragDropRegistry: DragDropRegistry<DragRef, DropListRef>,\r\n    _document: any,\r\n    private _ngZone: NgZone,\r\n    private _viewportRuler: ViewportRuler) {\r\n    this.element = coerceElement(element);\r\n    this._document = _document;\r\n    this.withScrollableParents([this.element]);\r\n    _dragDropRegistry.registerDropContainer(this);\r\n    this._parentPositions = new ParentPositionTracker(_document, _viewportRuler);\r\n  }\r\n\r\n  /** Removes the drop list functionality from the DOM element. */\r\n  dispose() {\r\n    this._stopScrolling();\r\n    this._stopScrollTimers.complete();\r\n    this._viewportScrollSubscription.unsubscribe();\r\n    this.beforeStarted.complete();\r\n    this.entered.complete();\r\n    this.exited.complete();\r\n    this.dropped.complete();\r\n    this.sorted.complete();\r\n    this._activeSiblings.clear();\r\n    this._scrollNode = null!;\r\n    this._parentPositions.clear();\r\n    this._dragDropRegistry.removeDropContainer(this);\r\n  }\r\n\r\n  /** Whether an item from this list is currently being dragged. */\r\n  isDragging() {\r\n    return this._isDragging;\r\n  }\r\n\r\n  /** Starts dragging an item. */\r\n  start(): void {\r\n    this._draggingStarted();\r\n    this._notifyReceivingSiblings();\r\n  }\r\n\r\n  /**\r\n   * Emits an event to indicate that the user moved an item into the container.\r\n   * @param item Item that was moved into the container.\r\n   * @param pointerX Position of the item along the X axis.\r\n   * @param pointerY Position of the item along the Y axis.\r\n   * @param index Index at which the item entered. If omitted, the container will try to figure it\r\n   *   out automatically.\r\n   */\r\n  enter(item: DragRef, pointerX: number, pointerY: number, index?: number): void {\r\n    this._draggingStarted();\r\n\r\n    // If sorting is disabled, we want the item to return to its starting\r\n    // position if the user is returning it to its initial container.\r\n    let newIndex: number;\r\n\r\n    if (index == null) {\r\n      newIndex = this.sortingDisabled ? this._draggables.indexOf(item) : -1;\r\n\r\n      if (newIndex === -1) {\r\n        // We use the coordinates of where the item entered the drop\r\n        // zone to figure out at which index it should be inserted.\r\n        newIndex = this._getItemIndexFromPointerPosition(item, pointerX, pointerY);\r\n      }\r\n    } else {\r\n      newIndex = index;\r\n    }\r\n\r\n    const activeDraggables = this._activeDraggables;\r\n    const currentIndex = activeDraggables.indexOf(item);\r\n    const placeholder = item.getPlaceholderElement();\r\n    let newPositionReference: DragRef | undefined = activeDraggables[newIndex];\r\n\r\n    // If the item at the new position is the same as the item that is being dragged,\r\n    // it means that we're trying to restore the item to its initial position. In this\r\n    // case we should use the next item from the list as the reference.\r\n    if (newPositionReference === item) {\r\n      newPositionReference = activeDraggables[newIndex + 1];\r\n    }\r\n\r\n    // Since the item may be in the `activeDraggables` already (e.g. if the user dragged it\r\n    // into another container and back again), we have to ensure that it isn't duplicated.\r\n    if (currentIndex > -1) {\r\n      activeDraggables.splice(currentIndex, 1);\r\n    }\r\n\r\n    // Don't use items that are being dragged as a reference, because\r\n    // their element has been moved down to the bottom of the body.\r\n    if (newPositionReference && !this._dragDropRegistry.isDragging(newPositionReference)) {\r\n      const element = newPositionReference.getRootElement();\r\n      element.parentElement!.insertBefore(placeholder, element);\r\n      activeDraggables.splice(newIndex, 0, item);\r\n    } else if (this._shouldEnterAsFirstChild(pointerX, pointerY)) {\r\n      const reference = activeDraggables[0].getRootElement();\r\n      reference.parentNode!.insertBefore(placeholder, reference);\r\n      activeDraggables.unshift(item);\r\n    } else {\r\n      coerceElement(this.element).appendChild(placeholder);\r\n      activeDraggables.push(item);\r\n    }\r\n\r\n    // The transform needs to be cleared so it doesn't throw off the measurements.\r\n    placeholder.style.transform = '';\r\n\r\n    // Note that the positions were already cached when we called `start` above,\r\n    // but we need to refresh them since the amount of items has changed and also parent rects.\r\n    this._cacheItemPositions();\r\n    this._cacheParentPositions();\r\n\r\n    // Notify siblings at the end so that the item has been inserted into the `activeDraggables`.\r\n    this._notifyReceivingSiblings();\r\n    this.entered.next({item, container: this, currentIndex: this.getItemIndex(item)});\r\n  }\r\n\r\n  /**\r\n   * Removes an item from the container after it was dragged into another container by the user.\r\n   * @param item Item that was dragged out.\r\n   */\r\n  exit(item: DragRef): void {\r\n    this._reset();\r\n    this.exited.next({item, container: this});\r\n  }\r\n\r\n  /**\r\n   * Drops an item into this container.\r\n   * @param item Item being dropped into the container.\r\n   * @param currentIndex Index at which the item should be inserted.\r\n   * @param previousIndex Index of the item when dragging started.\r\n   * @param previousContainer Container from which the item got dragged in.\r\n   * @param isPointerOverContainer Whether the user's pointer was over the\r\n   *    container when the item was dropped.\r\n   * @param distance Distance the user has dragged since the start of the dragging sequence.\r\n   */\r\n  drop(item: DragRef, currentIndex: number, previousIndex: number, previousContainer: DropListRef,\r\n    isPointerOverContainer: boolean, distance: Point): void {\r\n    this._reset();\r\n    this.dropped.next({\r\n      item,\r\n      currentIndex,\r\n      previousIndex,\r\n      container: this,\r\n      previousContainer,\r\n      isPointerOverContainer,\r\n      distance\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Sets the draggable items that are a part of this list.\r\n   * @param items Items that are a part of this list.\r\n   */\r\n  withItems(items: DragRef[]): this {\r\n    const previousItems = this._draggables;\r\n    this._draggables = items;\r\n    items.forEach(item => item._withDropContainer(this));\r\n\r\n    if (this.isDragging()) {\r\n      const draggedItems = previousItems.filter(item => item.isDragging());\r\n\r\n      // If all of the items being dragged were removed\r\n      // from the list, abort the current drag sequence.\r\n      if (draggedItems.every(item => items.indexOf(item) === -1)) {\r\n        this._reset();\r\n      } else {\r\n        this._cacheItems();\r\n      }\r\n    }\r\n\r\n    return this;\r\n  }\r\n\r\n  /** Sets the layout direction of the drop list. */\r\n  withDirection(direction: Direction): this {\r\n    this._direction = direction;\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * Sets the containers that are connected to this one. When two or more containers are\r\n   * connected, the user will be allowed to transfer items between them.\r\n   * @param connectedTo Other containers that the current containers should be connected to.\r\n   */\r\n  connectedTo(connectedTo: DropListRef[]): this {\r\n    this._siblings = connectedTo.slice();\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * Sets the orientation of the container.\r\n   * @param orientation New orientation for the container.\r\n   */\r\n  withOrientation(orientation: 'vertical' | 'horizontal'): this {\r\n    this._orientation = orientation;\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * Sets which parent elements are can be scrolled while the user is dragging.\r\n   * @param elements Elements that can be scrolled.\r\n   */\r\n  withScrollableParents(elements: HTMLElement[]): this {\r\n    const element = coerceElement(this.element);\r\n\r\n    // We always allow the current element to be scrollable\r\n    // so we need to ensure that it's in the array.\r\n    this._scrollableElements =\r\n        elements.indexOf(element) === -1 ? [element, ...elements] : elements.slice();\r\n    return this;\r\n  }\r\n\r\n  /** Gets the scrollable parents that are registered with this drop container. */\r\n  getScrollableParents(): ReadonlyArray<HTMLElement> {\r\n    return this._scrollableElements;\r\n  }\r\n\r\n  /**\r\n   * Figures out the index of an item in the container.\r\n   * @param item Item whose index should be determined.\r\n   */\r\n  getItemIndex(item: DragRef): number {\r\n    if (!this._isDragging) {\r\n      return this._draggables.indexOf(item);\r\n    }\r\n\r\n    // Items are sorted always by top/left in the cache, however they flow differently in RTL.\r\n    // The rest of the logic still stands no matter what orientation we're in, however\r\n    // we need to invert the array when determining the index.\r\n    const items = this._orientation === 'horizontal' && this._direction === 'rtl' ?\r\n        this._itemPositions.slice().reverse() : this._itemPositions;\r\n\r\n    return findIndex(items, currentItem => currentItem.drag === item);\r\n  }\r\n\r\n  /**\r\n   * Whether the list is able to receive the item that\r\n   * is currently being dragged inside a connected drop list.\r\n   */\r\n  isReceiving(): boolean {\r\n    return this._activeSiblings.size > 0;\r\n  }\r\n\r\n  /**\r\n   * Sorts an item inside the container based on its position.\r\n   * @param item Item to be sorted.\r\n   * @param pointerX Position of the item along the X axis.\r\n   * @param pointerY Position of the item along the Y axis.\r\n   * @param pointerDelta Direction in which the pointer is moving along each axis.\r\n   */\r\n  _sortItem(item: DragRef, pointerX: number, pointerY: number,\r\n            pointerDelta: {x: number, y: number}): void {\r\n    // Don't sort the item if sorting is disabled or it's out of range.\r\n    if (this.sortingDisabled || !this._clientRect ||\r\n        !isPointerNearClientRect(this._clientRect, DROP_PROXIMITY_THRESHOLD, pointerX, pointerY)) {\r\n      return;\r\n    }\r\n\r\n    const siblings = this._itemPositions;\r\n    const newIndex = this._getItemIndexFromPointerPosition(item, pointerX, pointerY, pointerDelta);\r\n\r\n    if (newIndex === -1 && siblings.length > 0) {\r\n      return;\r\n    }\r\n\r\n    const isHorizontal = this._orientation === 'horizontal';\r\n    const currentIndex = findIndex(siblings, currentItem => currentItem.drag === item);\r\n    const siblingAtNewPosition = siblings[newIndex];\r\n    const currentPosition = siblings[currentIndex].clientRect;\r\n    const newPosition = siblingAtNewPosition.clientRect;\r\n    const delta = currentIndex > newIndex ? 1 : -1;\r\n\r\n    // How many pixels the item's placeholder should be offset.\r\n    const itemOffset = this._getItemOffsetPx(currentPosition, newPosition, delta);\r\n\r\n    // How many pixels all the other items should be offset.\r\n    const siblingOffset = this._getSiblingOffsetPx(currentIndex, siblings, delta);\r\n\r\n    // Save the previous order of the items before moving the item to its new index.\r\n    // We use this to check whether an item has been moved as a result of the sorting.\r\n    const oldOrder = siblings.slice();\r\n\r\n    // Shuffle the array in place.\r\n    moveItemInArray(siblings, currentIndex, newIndex);\r\n\r\n    this.sorted.next({\r\n      previousIndex: currentIndex,\r\n      currentIndex: newIndex,\r\n      container: this,\r\n      item\r\n    });\r\n\r\n    siblings.forEach((sibling, index) => {\r\n      // Don't do anything if the position hasn't changed.\r\n      if (oldOrder[index] === sibling) {\r\n        return;\r\n      }\r\n\r\n      const isDraggedItem = sibling.drag === item;\r\n      const offset = isDraggedItem ? itemOffset : siblingOffset;\r\n      const elementToOffset = isDraggedItem ? item.getPlaceholderElement() :\r\n                                              sibling.drag.getRootElement();\r\n\r\n      // Update the offset to reflect the new position.\r\n      sibling.offset += offset;\r\n\r\n      // Since we're moving the items with a `transform`, we need to adjust their cached\r\n      // client rects to reflect their new position, as well as swap their positions in the cache.\r\n      // Note that we shouldn't use `getBoundingClientRect` here to update the cache, because the\r\n      // elements may be mid-animation which will give us a wrong result.\r\n      if (isHorizontal) {\r\n        // Round the transforms since some browsers will\r\n        // blur the elements, for sub-pixel transforms.\r\n        elementToOffset.style.transform = `translate3d(${Math.round(sibling.offset)}px, 0, 0)`;\r\n        adjustClientRect(sibling.clientRect, 0, offset);\r\n      } else {\r\n        elementToOffset.style.transform = `translate3d(0, ${Math.round(sibling.offset)}px, 0)`;\r\n        adjustClientRect(sibling.clientRect, offset, 0);\r\n      }\r\n    });\r\n\r\n    // Note that it's important that we do this after the client rects have been adjusted.\r\n    this._previousSwap.overlaps = isInsideClientRect(newPosition, pointerX, pointerY);\r\n    this._previousSwap.drag = siblingAtNewPosition.drag;\r\n    this._previousSwap.delta = isHorizontal ? pointerDelta.x : pointerDelta.y;\r\n  }\r\n\r\n  /**\r\n   * Checks whether the user's pointer is close to the edges of either the\r\n   * viewport or the drop list and starts the auto-scroll sequence.\r\n   * @param pointerX User's pointer position along the x axis.\r\n   * @param pointerY User's pointer position along the y axis.\r\n   */\r\n  _startScrollingIfNecessary(pointerX: number, pointerY: number) {\r\n    if (this.autoScrollDisabled) {\r\n      return;\r\n    }\r\n\r\n    let scrollNode: HTMLElement | Window | undefined;\r\n    let verticalScrollDirection = AutoScrollVerticalDirection.NONE;\r\n    let horizontalScrollDirection = AutoScrollHorizontalDirection.NONE;\r\n\r\n    // Check whether we should start scrolling any of the parent containers.\r\n    this._parentPositions.positions.forEach((position, element) => {\r\n      // We have special handling for the `document` below. Also this would be\r\n      // nicer with a  for...of loop, but it requires changing a compiler flag.\r\n      if (element === this._document || !position.clientRect || scrollNode) {\r\n        return;\r\n      }\r\n\r\n      if (isPointerNearClientRect(position.clientRect, DROP_PROXIMITY_THRESHOLD,\r\n          pointerX, pointerY)) {\r\n        [verticalScrollDirection, horizontalScrollDirection] = getElementScrollDirections(\r\n            element as HTMLElement, position.clientRect, pointerX, pointerY);\r\n\r\n        if (verticalScrollDirection || horizontalScrollDirection) {\r\n          scrollNode = element as HTMLElement;\r\n        }\r\n      }\r\n    });\r\n\r\n    // Otherwise check if we can start scrolling the viewport.\r\n    if (!verticalScrollDirection && !horizontalScrollDirection) {\r\n      const {width, height} = this._viewportRuler.getViewportSize();\r\n      const clientRect = {width, height, top: 0, right: width, bottom: height, left: 0};\r\n      verticalScrollDirection = getVerticalScrollDirection(clientRect, pointerY);\r\n      horizontalScrollDirection = getHorizontalScrollDirection(clientRect, pointerX);\r\n      scrollNode = window;\r\n    }\r\n\r\n    if (scrollNode && (verticalScrollDirection !== this._verticalScrollDirection ||\r\n        horizontalScrollDirection !== this._horizontalScrollDirection ||\r\n        scrollNode !== this._scrollNode)) {\r\n      this._verticalScrollDirection = verticalScrollDirection;\r\n      this._horizontalScrollDirection = horizontalScrollDirection;\r\n      this._scrollNode = scrollNode;\r\n\r\n      if ((verticalScrollDirection || horizontalScrollDirection) && scrollNode) {\r\n        this._ngZone.runOutsideAngular(this._startScrollInterval);\r\n      } else {\r\n        this._stopScrolling();\r\n      }\r\n    }\r\n  }\r\n\r\n  /** Stops any currently-running auto-scroll sequences. */\r\n  _stopScrolling() {\r\n    this._stopScrollTimers.next();\r\n  }\r\n\r\n  /** Starts the dragging sequence within the list. */\r\n  private _draggingStarted() {\r\n    const styles = coerceElement(this.element).style as DragCSSStyleDeclaration;\r\n    this.beforeStarted.next();\r\n    this._isDragging = true;\r\n\r\n    // We need to disable scroll snapping while the user is dragging, because it breaks automatic\r\n    // scrolling. The browser seems to round the value based on the snapping points which means\r\n    // that we can't increment/decrement the scroll position.\r\n    this._initialScrollSnap = styles.msScrollSnapType || styles.scrollSnapType || '';\r\n    styles.scrollSnapType = styles.msScrollSnapType = 'none';\r\n    this._cacheItems();\r\n    this._viewportScrollSubscription.unsubscribe();\r\n    this._listenToScrollEvents();\r\n  }\r\n\r\n  /** Caches the positions of the configured scrollable parents. */\r\n  private _cacheParentPositions() {\r\n    const element = coerceElement(this.element);\r\n    this._parentPositions.cache(this._scrollableElements);\r\n\r\n    // The list element is always in the `scrollableElements`\r\n    // so we can take advantage of the cached `ClientRect`.\r\n    this._clientRect = this._parentPositions.positions.get(element)!.clientRect!;\r\n  }\r\n\r\n  /** Refreshes the position cache of the items and sibling containers. */\r\n  private _cacheItemPositions() {\r\n    const isHorizontal = this._orientation === 'horizontal';\r\n\r\n    this._itemPositions = this._activeDraggables.map(drag => {\r\n      const elementToMeasure = drag.getVisibleElement();\r\n      return {drag, offset: 0, clientRect: getMutableClientRect(elementToMeasure)};\r\n    }).sort((a, b) => {\r\n      return isHorizontal ? a.clientRect.left - b.clientRect.left :\r\n                            a.clientRect.top - b.clientRect.top;\r\n    });\r\n  }\r\n\r\n  /** Resets the container to its initial state. */\r\n  private _reset() {\r\n    this._isDragging = false;\r\n\r\n    const styles = coerceElement(this.element).style as DragCSSStyleDeclaration;\r\n    styles.scrollSnapType = styles.msScrollSnapType = this._initialScrollSnap;\r\n\r\n    // TODO(crisbeto): may have to wait for the animations to finish.\r\n    this._activeDraggables.forEach(item => {\r\n      const rootElement = item.getRootElement();\r\n\r\n      if (rootElement) {\r\n        rootElement.style.transform = '';\r\n      }\r\n    });\r\n    this._siblings.forEach(sibling => sibling._stopReceiving(this));\r\n    this._activeDraggables = [];\r\n    this._itemPositions = [];\r\n    this._previousSwap.drag = null;\r\n    this._previousSwap.delta = 0;\r\n    this._previousSwap.overlaps = false;\r\n    this._stopScrolling();\r\n    this._viewportScrollSubscription.unsubscribe();\r\n    this._parentPositions.clear();\r\n  }\r\n\r\n  /**\r\n   * Gets the offset in pixels by which the items that aren't being dragged should be moved.\r\n   * @param currentIndex Index of the item currently being dragged.\r\n   * @param siblings All of the items in the list.\r\n   * @param delta Direction in which the user is moving.\r\n   */\r\n  private _getSiblingOffsetPx(currentIndex: number,\r\n                              siblings: CachedItemPosition[],\r\n                              delta: 1 | -1) {\r\n\r\n    const isHorizontal = this._orientation === 'horizontal';\r\n    const currentPosition = siblings[currentIndex].clientRect;\r\n    const immediateSibling = siblings[currentIndex + delta * -1];\r\n    let siblingOffset = currentPosition[isHorizontal ? 'width' : 'height'] * delta;\r\n\r\n    if (immediateSibling) {\r\n      const start = isHorizontal ? 'left' : 'top';\r\n      const end = isHorizontal ? 'right' : 'bottom';\r\n\r\n      // Get the spacing between the start of the current item and the end of the one immediately\r\n      // after it in the direction in which the user is dragging, or vice versa. We add it to the\r\n      // offset in order to push the element to where it will be when it's inline and is influenced\r\n      // by the `margin` of its siblings.\r\n      if (delta === -1) {\r\n        siblingOffset -= immediateSibling.clientRect[start] - currentPosition[end];\r\n      } else {\r\n        siblingOffset += currentPosition[start] - immediateSibling.clientRect[end];\r\n      }\r\n    }\r\n\r\n    return siblingOffset;\r\n  }\r\n\r\n  /**\r\n   * Gets the offset in pixels by which the item that is being dragged should be moved.\r\n   * @param currentPosition Current position of the item.\r\n   * @param newPosition Position of the item where the current item should be moved.\r\n   * @param delta Direction in which the user is moving.\r\n   */\r\n  private _getItemOffsetPx(currentPosition: ClientRect, newPosition: ClientRect, delta: 1 | -1) {\r\n    const isHorizontal = this._orientation === 'horizontal';\r\n    let itemOffset = isHorizontal ? newPosition.left - currentPosition.left :\r\n                                    newPosition.top - currentPosition.top;\r\n\r\n    // Account for differences in the item width/height.\r\n    if (delta === -1) {\r\n      itemOffset += isHorizontal ? newPosition.width - currentPosition.width :\r\n                                   newPosition.height - currentPosition.height;\r\n    }\r\n\r\n    return itemOffset;\r\n  }\r\n\r\n  /**\r\n   * Checks if pointer is entering in the first position\r\n   * @param pointerX Position of the user's pointer along the X axis.\r\n   * @param pointerY Position of the user's pointer along the Y axis.\r\n   */\r\n  private _shouldEnterAsFirstChild(pointerX: number, pointerY: number) {\r\n    if (!this._activeDraggables.length) {\r\n      return false;\r\n    }\r\n\r\n    const itemPositions = this._itemPositions;\r\n    const isHorizontal = this._orientation === 'horizontal';\r\n\r\n    // `itemPositions` are sorted by position while `activeDraggables` are sorted by child index\r\n    // check if container is using some sort of \"reverse\" ordering (eg: flex-direction: row-reverse)\r\n    const reversed = itemPositions[0].drag !== this._activeDraggables[0];\r\n    if (reversed) {\r\n      const lastItemRect = itemPositions[itemPositions.length - 1].clientRect;\r\n      return isHorizontal ? pointerX >= lastItemRect.right : pointerY >= lastItemRect.bottom;\r\n    } else {\r\n      const firstItemRect = itemPositions[0].clientRect;\r\n      return isHorizontal ? pointerX <= firstItemRect.left : pointerY <= firstItemRect.top;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Gets the index of an item in the drop container, based on the position of the user's pointer.\r\n   * @param item Item that is being sorted.\r\n   * @param pointerX Position of the user's pointer along the X axis.\r\n   * @param pointerY Position of the user's pointer along the Y axis.\r\n   * @param delta Direction in which the user is moving their pointer.\r\n   */\r\n  private _getItemIndexFromPointerPosition(item: DragRef, pointerX: number, pointerY: number,\r\n                                           delta?: {x: number, y: number}): number {\r\n    const isHorizontal = this._orientation === 'horizontal';\r\n    const index = findIndex(this._itemPositions, ({drag, clientRect}, _, array) => {\r\n      if (drag === item) {\r\n        // If there's only one item left in the container, it must be\r\n        // the dragged item itself so we use it as a reference.\r\n        return array.length < 2;\r\n      }\r\n\r\n      if (delta) {\r\n        const direction = isHorizontal ? delta.x : delta.y;\r\n\r\n        // If the user is still hovering over the same item as last time, their cursor hasn't left\r\n        // the item after we made the swap, and they didn't change the direction in which they're\r\n        // dragging, we don't consider it a direction swap.\r\n        if (drag === this._previousSwap.drag && this._previousSwap.overlaps &&\r\n            direction === this._previousSwap.delta) {\r\n          return false;\r\n        }\r\n      }\r\n\r\n      return isHorizontal ?\r\n          // Round these down since most browsers report client rects with\r\n          // sub-pixel precision, whereas the pointer coordinates are rounded to pixels.\r\n          pointerX >= Math.floor(clientRect.left) && pointerX < Math.floor(clientRect.right) :\r\n          pointerY >= Math.floor(clientRect.top) && pointerY < Math.floor(clientRect.bottom);\r\n    });\r\n\r\n    return (index === -1 || !this.sortPredicate(index, item, this)) ? -1 : index;\r\n  }\r\n\r\n  /** Caches the current items in the list and their positions. */\r\n  private _cacheItems(): void {\r\n    this._activeDraggables = this._draggables.slice();\r\n    this._cacheItemPositions();\r\n    this._cacheParentPositions();\r\n  }\r\n\r\n  /** Starts the interval that'll auto-scroll the element. */\r\n  private _startScrollInterval = () => {\r\n    this._stopScrolling();\r\n\r\n    interval(0, animationFrameScheduler)\r\n      .pipe(takeUntil(this._stopScrollTimers))\r\n      .subscribe(() => {\r\n        const node = this._scrollNode;\r\n        const scrollStep = this.autoScrollStep;\r\n\r\n        if (this._verticalScrollDirection === AutoScrollVerticalDirection.UP) {\r\n          incrementVerticalScroll(node, -scrollStep);\r\n        } else if (this._verticalScrollDirection === AutoScrollVerticalDirection.DOWN) {\r\n          incrementVerticalScroll(node, scrollStep);\r\n        }\r\n\r\n        if (this._horizontalScrollDirection === AutoScrollHorizontalDirection.LEFT) {\r\n          incrementHorizontalScroll(node, -scrollStep);\r\n        } else if (this._horizontalScrollDirection === AutoScrollHorizontalDirection.RIGHT) {\r\n          incrementHorizontalScroll(node, scrollStep);\r\n        }\r\n      });\r\n  }\r\n\r\n  /**\r\n   * Checks whether the user's pointer is positioned over the container.\r\n   * @param x Pointer position along the X axis.\r\n   * @param y Pointer position along the Y axis.\r\n   */\r\n  _isOverContainer(x: number, y: number): boolean {\r\n    return this._clientRect != null && isInsideClientRect(this._clientRect, x, y);\r\n  }\r\n\r\n  /**\r\n   * Figures out whether an item should be moved into a sibling\r\n   * drop container, based on its current position.\r\n   * @param item Drag item that is being moved.\r\n   * @param x Position of the item along the X axis.\r\n   * @param y Position of the item along the Y axis.\r\n   */\r\n  _getSiblingContainerFromPosition(item: DragRef, x: number, y: number): DropListRef | undefined {\r\n    return this._siblings.find(sibling => sibling._canReceive(item, x, y));\r\n  }\r\n\r\n  /**\r\n   * Checks whether the drop list can receive the passed-in item.\r\n   * @param item Item that is being dragged into the list.\r\n   * @param x Position of the item along the X axis.\r\n   * @param y Position of the item along the Y axis.\r\n   */\r\n  _canReceive(item: DragRef, x: number, y: number): boolean {\r\n    if (!this._clientRect || !isInsideClientRect(this._clientRect, x, y) ||\r\n        !this.enterPredicate(item, this)) {\r\n      return false;\r\n    }\r\n\r\n    const elementFromPoint = this._getShadowRoot().elementFromPoint(x, y) as HTMLElement | null;\r\n\r\n    // If there's no element at the pointer position, then\r\n    // the client rect is probably scrolled out of the view.\r\n    if (!elementFromPoint) {\r\n      return false;\r\n    }\r\n\r\n    const nativeElement = coerceElement(this.element);\r\n\r\n    // The `ClientRect`, that we're using to find the container over which the user is\r\n    // hovering, doesn't give us any information on whether the element has been scrolled\r\n    // out of the view or whether it's overlapping with other containers. This means that\r\n    // we could end up transferring the item into a container that's invisible or is positioned\r\n    // below another one. We use the result from `elementFromPoint` to get the top-most element\r\n    // at the pointer position and to find whether it's one of the intersecting drop containers.\r\n    return elementFromPoint === nativeElement || nativeElement.contains(elementFromPoint);\r\n  }\r\n\r\n  /**\r\n   * Called by one of the connected drop lists when a dragging sequence has started.\r\n   * @param sibling Sibling in which dragging has started.\r\n   */\r\n  _startReceiving(sibling: DropListRef, items: DragRef[]) {\r\n    const activeSiblings = this._activeSiblings;\r\n\r\n    if (!activeSiblings.has(sibling) && items.every(item => {\r\n      // Note that we have to add an exception to the `enterPredicate` for items that started off\r\n      // in this drop list. The drag ref has logic that allows an item to return to its initial\r\n      // container, if it has left the initial container and none of the connected containers\r\n      // allow it to enter. See `DragRef._updateActiveDropContainer` for more context.\r\n      return this.enterPredicate(item, this) || this._draggables.indexOf(item) > -1;\r\n    })) {\r\n      activeSiblings.add(sibling);\r\n      this._cacheParentPositions();\r\n      this._listenToScrollEvents();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Called by a connected drop list when dragging has stopped.\r\n   * @param sibling Sibling whose dragging has stopped.\r\n   */\r\n  _stopReceiving(sibling: DropListRef) {\r\n    this._activeSiblings.delete(sibling);\r\n    this._viewportScrollSubscription.unsubscribe();\r\n  }\r\n\r\n  /**\r\n   * Starts listening to scroll events on the viewport.\r\n   * Used for updating the internal state of the list.\r\n   */\r\n  private _listenToScrollEvents() {\r\n    this._viewportScrollSubscription = this._dragDropRegistry.scroll.subscribe(event => {\r\n      if (this.isDragging()) {\r\n        const scrollDifference = this._parentPositions.handleScroll(event);\r\n\r\n        if (scrollDifference) {\r\n          // Since we know the amount that the user has scrolled we can shift all of the\r\n          // client rectangles ourselves. This is cheaper than re-measuring everything and\r\n          // we can avoid inconsistent behavior where we might be measuring the element before\r\n          // its position has changed.\r\n          this._itemPositions.forEach(({clientRect}) => {\r\n            adjustClientRect(clientRect, scrollDifference.top, scrollDifference.left);\r\n          });\r\n\r\n          // We need two loops for this, because we want all of the cached\r\n          // positions to be up-to-date before we re-sort the item.\r\n          this._itemPositions.forEach(({drag}) => {\r\n            if (this._dragDropRegistry.isDragging(drag)) {\r\n              // We need to re-sort the item manually, because the pointer move\r\n              // events won't be dispatched while the user is scrolling.\r\n              drag._sortFromLastPointerPosition();\r\n            }\r\n          });\r\n        }\r\n      } else if (this.isReceiving()) {\r\n        this._cacheParentPositions();\r\n      }\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Lazily resolves and returns the shadow root of the element. We do this in a function, rather\r\n   * than saving it in property directly on init, because we want to resolve it as late as possible\r\n   * in order to ensure that the element has been moved into the shadow DOM. Doing it inside the\r\n   * constructor might be too early if the element is inside of something like `ngFor` or `ngIf`.\r\n   */\r\n  private _getShadowRoot(): DocumentOrShadowRoot {\r\n    if (!this._cachedShadowRoot) {\r\n      const shadowRoot = _getShadowRoot(coerceElement(this.element));\r\n      this._cachedShadowRoot = shadowRoot || this._document;\r\n    }\r\n\r\n    return this._cachedShadowRoot;\r\n  }\r\n\r\n  /** Notifies any siblings that may potentially receive the item. */\r\n  private _notifyReceivingSiblings() {\r\n    const draggedItems = this._activeDraggables.filter(item => item.isDragging());\r\n    this._siblings.forEach(sibling => sibling._startReceiving(this, draggedItems));\r\n  }\r\n}\r\n\r\n\r\n/**\r\n * Finds the index of an item that matches a predicate function. Used as an equivalent\r\n * of `Array.prototype.findIndex` which isn't part of the standard Google typings.\r\n * @param array Array in which to look for matches.\r\n * @param predicate Function used to determine whether an item is a match.\r\n */\r\nfunction findIndex<T>(array: T[],\r\n                      predicate: (value: T, index: number, obj: T[]) => boolean): number {\r\n\r\n  for (let i = 0; i < array.length; i++) {\r\n    if (predicate(array[i], i, array)) {\r\n      return i;\r\n    }\r\n  }\r\n\r\n  return -1;\r\n}\r\n\r\n/**\r\n * Increments the vertical scroll position of a node.\r\n * @param node Node whose scroll position should change.\r\n * @param amount Amount of pixels that the `node` should be scrolled.\r\n */\r\nfunction incrementVerticalScroll(node: HTMLElement | Window, amount: number) {\r\n  if (node === window) {\r\n    (node as Window).scrollBy(0, amount);\r\n  } else {\r\n    // Ideally we could use `Element.scrollBy` here as well, but IE and Edge don't support it.\r\n    (node as HTMLElement).scrollTop += amount;\r\n  }\r\n}\r\n\r\n/**\r\n * Increments the horizontal scroll position of a node.\r\n * @param node Node whose scroll position should change.\r\n * @param amount Amount of pixels that the `node` should be scrolled.\r\n */\r\nfunction incrementHorizontalScroll(node: HTMLElement | Window, amount: number) {\r\n  if (node === window) {\r\n    (node as Window).scrollBy(amount, 0);\r\n  } else {\r\n    // Ideally we could use `Element.scrollBy` here as well, but IE and Edge don't support it.\r\n    (node as HTMLElement).scrollLeft += amount;\r\n  }\r\n}\r\n\r\n/**\r\n * Gets whether the vertical auto-scroll direction of a node.\r\n * @param clientRect Dimensions of the node.\r\n * @param pointerY Position of the user's pointer along the y axis.\r\n */\r\nfunction getVerticalScrollDirection(clientRect: ClientRect, pointerY: number) {\r\n  const {top, bottom, height} = clientRect;\r\n  const yThreshold = height * SCROLL_PROXIMITY_THRESHOLD;\r\n\r\n  if (pointerY >= top - yThreshold && pointerY <= top + yThreshold) {\r\n    return AutoScrollVerticalDirection.UP;\r\n  } else if (pointerY >= bottom - yThreshold && pointerY <= bottom + yThreshold) {\r\n    return AutoScrollVerticalDirection.DOWN;\r\n  }\r\n\r\n  return AutoScrollVerticalDirection.NONE;\r\n}\r\n\r\n/**\r\n * Gets whether the horizontal auto-scroll direction of a node.\r\n * @param clientRect Dimensions of the node.\r\n * @param pointerX Position of the user's pointer along the x axis.\r\n */\r\nfunction getHorizontalScrollDirection(clientRect: ClientRect, pointerX: number) {\r\n  const {left, right, width} = clientRect;\r\n  const xThreshold = width * SCROLL_PROXIMITY_THRESHOLD;\r\n\r\n  if (pointerX >= left - xThreshold && pointerX <= left + xThreshold) {\r\n    return AutoScrollHorizontalDirection.LEFT;\r\n  } else if (pointerX >= right - xThreshold && pointerX <= right + xThreshold) {\r\n    return AutoScrollHorizontalDirection.RIGHT;\r\n  }\r\n\r\n  return AutoScrollHorizontalDirection.NONE;\r\n}\r\n\r\n/**\r\n * Gets the directions in which an element node should be scrolled,\r\n * assuming that the user's pointer is already within it scrollable region.\r\n * @param element Element for which we should calculate the scroll direction.\r\n * @param clientRect Bounding client rectangle of the element.\r\n * @param pointerX Position of the user's pointer along the x axis.\r\n * @param pointerY Position of the user's pointer along the y axis.\r\n */\r\nfunction getElementScrollDirections(element: HTMLElement, clientRect: ClientRect, pointerX: number,\r\n  pointerY: number): [AutoScrollVerticalDirection, AutoScrollHorizontalDirection] {\r\n  const computedVertical = getVerticalScrollDirection(clientRect, pointerY);\r\n  const computedHorizontal = getHorizontalScrollDirection(clientRect, pointerX);\r\n  let verticalScrollDirection = AutoScrollVerticalDirection.NONE;\r\n  let horizontalScrollDirection = AutoScrollHorizontalDirection.NONE;\r\n\r\n  // Note that we here we do some extra checks for whether the element is actually scrollable in\r\n  // a certain direction and we only assign the scroll direction if it is. We do this so that we\r\n  // can allow other elements to be scrolled, if the current element can't be scrolled anymore.\r\n  // This allows us to handle cases where the scroll regions of two scrollable elements overlap.\r\n  if (computedVertical) {\r\n    const scrollTop = element.scrollTop;\r\n\r\n    if (computedVertical === AutoScrollVerticalDirection.UP) {\r\n      if (scrollTop > 0) {\r\n        verticalScrollDirection = AutoScrollVerticalDirection.UP;\r\n      }\r\n    } else if (element.scrollHeight - scrollTop > element.clientHeight) {\r\n      verticalScrollDirection = AutoScrollVerticalDirection.DOWN;\r\n    }\r\n  }\r\n\r\n  if (computedHorizontal) {\r\n    const scrollLeft = element.scrollLeft;\r\n\r\n    if (computedHorizontal === AutoScrollHorizontalDirection.LEFT) {\r\n      if (scrollLeft > 0) {\r\n        horizontalScrollDirection = AutoScrollHorizontalDirection.LEFT;\r\n      }\r\n    } else if (element.scrollWidth - scrollLeft > element.clientWidth) {\r\n      horizontalScrollDirection = AutoScrollHorizontalDirection.RIGHT;\r\n    }\r\n  }\r\n\r\n  return [verticalScrollDirection, horizontalScrollDirection];\r\n}\r\n","/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n\r\nimport {Injectable, NgZone, OnDestroy, Inject} from '@angular/core';\r\nimport {DOCUMENT} from '@angular/common';\r\nimport {normalizePassiveListenerOptions} from '@angular/cdk/platform';\r\nimport {Subject} from 'rxjs';\r\n\r\n/** Event options that can be used to bind an active, capturing event. */\r\nconst activeCapturingEventOptions = normalizePassiveListenerOptions({\r\n  passive: false,\r\n  capture: true\r\n});\r\n\r\n/**\r\n * Service that keeps track of all the drag item and drop container\r\n * instances, and manages global event listeners on the `document`.\r\n * @docs-private\r\n */\r\n// Note: this class is generic, rather than referencing CdkDrag and CdkDropList directly, in order\r\n// to avoid circular imports. If we were to reference them here, importing the registry into the\r\n// classes that are registering themselves will introduce a circular import.\r\n@Injectable({providedIn: 'root'})\r\nexport class DragDropRegistry<I extends {isDragging(): boolean}, C> implements OnDestroy {\r\n  private _document: Document;\r\n\r\n  /** Registered drop container instances. */\r\n  private _dropInstances = new Set<C>();\r\n\r\n  /** Registered drag item instances. */\r\n  private _dragInstances = new Set<I>();\r\n\r\n  /** Drag item instances that are currently being dragged. */\r\n  private _activeDragInstances: I[] = [];\r\n\r\n  /** Keeps track of the event listeners that we've bound to the `document`. */\r\n  private _globalListeners = new Map<string, {\r\n    handler: (event: Event) => void,\r\n    options?: AddEventListenerOptions | boolean\r\n  }>();\r\n\r\n  /**\r\n   * Predicate function to check if an item is being dragged.  Moved out into a property,\r\n   * because it'll be called a lot and we don't want to create a new function every time.\r\n   */\r\n  private _draggingPredicate = (item: I) => item.isDragging();\r\n\r\n  /**\r\n   * Emits the `touchmove` or `mousemove` events that are dispatched\r\n   * while the user is dragging a drag item instance.\r\n   */\r\n  readonly pointerMove: Subject<TouchEvent | MouseEvent> = new Subject<TouchEvent | MouseEvent>();\r\n\r\n  /**\r\n   * Emits the `touchend` or `mouseup` events that are dispatched\r\n   * while the user is dragging a drag item instance.\r\n   */\r\n  readonly pointerUp: Subject<TouchEvent | MouseEvent> = new Subject<TouchEvent | MouseEvent>();\r\n\r\n  /** Emits when the viewport has been scrolled while the user is dragging an item. */\r\n  readonly scroll: Subject<Event> = new Subject<Event>();\r\n\r\n  constructor(\r\n    private _ngZone: NgZone,\r\n    @Inject(DOCUMENT) _document: any) {\r\n    this._document = _document;\r\n  }\r\n\r\n  /** Adds a drop container to the registry. */\r\n  registerDropContainer(drop: C) {\r\n    if (!this._dropInstances.has(drop)) {\r\n      this._dropInstances.add(drop);\r\n    }\r\n  }\r\n\r\n  /** Adds a drag item instance to the registry. */\r\n  registerDragItem(drag: I) {\r\n    this._dragInstances.add(drag);\r\n\r\n    // The `touchmove` event gets bound once, ahead of time, because WebKit\r\n    // won't preventDefault on a dynamically-added `touchmove` listener.\r\n    // See https://bugs.webkit.org/show_bug.cgi?id=184250.\r\n    if (this._dragInstances.size === 1) {\r\n      this._ngZone.runOutsideAngular(() => {\r\n        // The event handler has to be explicitly active,\r\n        // because newer browsers make it passive by default.\r\n        this._document.addEventListener('touchmove', this._persistentTouchmoveListener,\r\n            activeCapturingEventOptions);\r\n      });\r\n    }\r\n  }\r\n\r\n  /** Removes a drop container from the registry. */\r\n  removeDropContainer(drop: C) {\r\n    this._dropInstances.delete(drop);\r\n  }\r\n\r\n  /** Removes a drag item instance from the registry. */\r\n  removeDragItem(drag: I) {\r\n    this._dragInstances.delete(drag);\r\n    this.stopDragging(drag);\r\n\r\n    if (this._dragInstances.size === 0) {\r\n      this._document.removeEventListener('touchmove', this._persistentTouchmoveListener,\r\n          activeCapturingEventOptions);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Starts the dragging sequence for a drag instance.\r\n   * @param drag Drag instance which is being dragged.\r\n   * @param event Event that initiated the dragging.\r\n   */\r\n  startDragging(drag: I, event: TouchEvent | MouseEvent) {\r\n    // Do not process the same drag twice to avoid memory leaks and redundant listeners\r\n    if (this._activeDragInstances.indexOf(drag) > -1) {\r\n      return;\r\n    }\r\n\r\n    this._activeDragInstances.push(drag);\r\n\r\n    if (this._activeDragInstances.length === 1) {\r\n      const isTouchEvent = event.type.startsWith('touch');\r\n\r\n      // We explicitly bind __active__ listeners here, because newer browsers will default to\r\n      // passive ones for `mousemove` and `touchmove`. The events need to be active, because we\r\n      // use `preventDefault` to prevent the page from scrolling while the user is dragging.\r\n      this._globalListeners\r\n        .set(isTouchEvent ? 'touchend' : 'mouseup', {\r\n          handler: (e: Event) => this.pointerUp.next(e as TouchEvent | MouseEvent),\r\n          options: true\r\n        })\r\n        .set('scroll', {\r\n          handler: (e: Event) => this.scroll.next(e),\r\n          // Use capturing so that we pick up scroll changes in any scrollable nodes that aren't\r\n          // the document. See https://github.com/angular/components/issues/17144.\r\n          options: true\r\n        })\r\n        // Preventing the default action on `mousemove` isn't enough to disable text selection\r\n        // on Safari so we need to prevent the selection event as well. Alternatively this can\r\n        // be done by setting `user-select: none` on the `body`, however it has causes a style\r\n        // recalculation which can be expensive on pages with a lot of elements.\r\n        .set('selectstart', {\r\n          handler: this._preventDefaultWhileDragging,\r\n          options: activeCapturingEventOptions\r\n        });\r\n\r\n      // We don't have to bind a move event for touch drag sequences, because\r\n      // we already have a persistent global one bound from `registerDragItem`.\r\n      if (!isTouchEvent) {\r\n        this._globalListeners.set('mousemove', {\r\n          handler: (e: Event) => this.pointerMove.next(e as MouseEvent),\r\n          options: activeCapturingEventOptions\r\n        });\r\n      }\r\n\r\n      this._ngZone.runOutsideAngular(() => {\r\n        this._globalListeners.forEach((config, name) => {\r\n          this._document.addEventListener(name, config.handler, config.options);\r\n        });\r\n      });\r\n    }\r\n  }\r\n\r\n  /** Stops dragging a drag item instance. */\r\n  stopDragging(drag: I) {\r\n    const index = this._activeDragInstances.indexOf(drag);\r\n\r\n    if (index > -1) {\r\n      this._activeDragInstances.splice(index, 1);\r\n\r\n      if (this._activeDragInstances.length === 0) {\r\n        this._clearGlobalListeners();\r\n      }\r\n    }\r\n  }\r\n\r\n  /** Gets whether a drag item instance is currently being dragged. */\r\n  isDragging(drag: I) {\r\n    return this._activeDragInstances.indexOf(drag) > -1;\r\n  }\r\n\r\n  ngOnDestroy() {\r\n    this._dragInstances.forEach(instance => this.removeDragItem(instance));\r\n    this._dropInstances.forEach(instance => this.removeDropContainer(instance));\r\n    this._clearGlobalListeners();\r\n    this.pointerMove.complete();\r\n    this.pointerUp.complete();\r\n  }\r\n\r\n  /**\r\n   * Event listener that will prevent the default browser action while the user is dragging.\r\n   * @param event Event whose default action should be prevented.\r\n   */\r\n  private _preventDefaultWhileDragging = (event: Event) => {\r\n    if (this._activeDragInstances.length > 0) {\r\n      event.preventDefault();\r\n    }\r\n  }\r\n\r\n  /** Event listener for `touchmove` that is bound even if no dragging is happening. */\r\n  private _persistentTouchmoveListener = (event: TouchEvent) => {\r\n    if (this._activeDragInstances.length > 0) {\r\n      // Note that we only want to prevent the default action after dragging has actually started.\r\n      // Usually this is the same time at which the item is added to the `_activeDragInstances`,\r\n      // but it could be pushed back if the user has set up a drag delay or threshold.\r\n      if (this._activeDragInstances.some(this._draggingPredicate)) {\r\n        event.preventDefault();\r\n      }\r\n\r\n      this.pointerMove.next(event);\r\n    }\r\n  }\r\n\r\n  /** Clears out the global event listeners from the `document`. */\r\n  private _clearGlobalListeners() {\r\n    this._globalListeners.forEach((config, name) => {\r\n      this._document.removeEventListener(name, config.handler, config.options);\r\n    });\r\n\r\n    this._globalListeners.clear();\r\n  }\r\n}\r\n","/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n\r\nimport {Injectable, Inject, NgZone, ElementRef} from '@angular/core';\r\nimport {DOCUMENT} from '@angular/common';\r\nimport {ViewportRuler} from '@angular/cdk/scrolling';\r\nimport {DragRef, DragRefConfig} from './drag-ref';\r\nimport {DropListRef} from './drop-list-ref';\r\nimport {DragDropRegistry} from './drag-drop-registry';\r\n\r\n/** Default configuration to be used when creating a `DragRef`. */\r\nconst DEFAULT_CONFIG = {\r\n  dragStartThreshold: 5,\r\n  pointerDirectionChangeThreshold: 5\r\n};\r\n\r\n/**\r\n * Service that allows for drag-and-drop functionality to be attached to DOM elements.\r\n */\r\n@Injectable({providedIn: 'root'})\r\nexport class DragDrop {\r\n  constructor(\r\n    @Inject(DOCUMENT) private _document: any,\r\n    private _ngZone: NgZone,\r\n    private _viewportRuler: ViewportRuler,\r\n    private _dragDropRegistry: DragDropRegistry<DragRef, DropListRef>) {}\r\n\r\n  /**\r\n   * Turns an element into a draggable item.\r\n   * @param element Element to which to attach the dragging functionality.\r\n   * @param config Object used to configure the dragging behavior.\r\n   */\r\n  createDrag<T = any>(element: ElementRef<HTMLElement> | HTMLElement,\r\n                config: DragRefConfig = DEFAULT_CONFIG): DragRef<T> {\r\n\r\n    return new DragRef<T>(element, config, this._document, this._ngZone, this._viewportRuler,\r\n        this._dragDropRegistry);\r\n  }\r\n\r\n  /**\r\n   * Turns an element into a drop list.\r\n   * @param element Element to which to attach the drop list functionality.\r\n   */\r\n  createDropList<T = any>(element: ElementRef<HTMLElement> | HTMLElement): DropListRef<T> {\r\n    return new DropListRef<T>(element, this._dragDropRegistry, this._document, this._ngZone,\r\n        this._viewportRuler);\r\n  }\r\n}\r\n","/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n\r\nimport {InjectionToken} from '@angular/core';\r\n\r\n/**\r\n * Injection token that can be used for a `CdkDrag` to provide itself as a parent to the\r\n * drag-specific child directive (`CdkDragHandle`, `CdkDragPreview` etc.). Used primarily\r\n * to avoid circular imports.\r\n * @docs-private\r\n */\r\nexport const CDK_DRAG_PARENT = new InjectionToken<{}>('CDK_DRAG_PARENT');\r\n","/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n\r\nimport {CdkDrag} from './directives/drag';\r\nimport {CdkDropList} from './directives/drop-list';\r\n\r\n/** Event emitted when the user starts dragging a draggable. */\r\nexport interface CdkDragStart<T = any> {\r\n  /** Draggable that emitted the event. */\r\n  source: CdkDrag<T>;\r\n}\r\n\r\n/** Event emitted when the user releases an item, before any animations have started. */\r\nexport interface CdkDragRelease<T = any> {\r\n  /** Draggable that emitted the event. */\r\n  source: CdkDrag<T>;\r\n}\r\n\r\n/** Event emitted when the user stops dragging a draggable. */\r\nexport interface CdkDragEnd<T = any> {\r\n  /** Draggable that emitted the event. */\r\n  source: CdkDrag<T>;\r\n  /** Distance in pixels that the user has dragged since the drag sequence started. */\r\n  distance: {x: number, y: number};\r\n}\r\n\r\n/** Event emitted when the user moves an item into a new drop container. */\r\nexport interface CdkDragEnter<T = any, I = T> {\r\n  /** Container into which the user has moved the item. */\r\n  container: CdkDropList<T>;\r\n  /** Item that was moved into the container. */\r\n  item: CdkDrag<I>;\r\n  /** Index at which the item has entered the container. */\r\n  currentIndex: number;\r\n}\r\n\r\n/**\r\n * Event emitted when the user removes an item from a\r\n * drop container by moving it into another one.\r\n */\r\nexport interface CdkDragExit<T = any, I = T> {\r\n  /** Container from which the user has a removed an item. */\r\n  container: CdkDropList<T>;\r\n  /** Item that was removed from the container. */\r\n  item: CdkDrag<I>;\r\n}\r\n\r\n\r\n/** Event emitted when the user drops a draggable item inside a drop container. */\r\nexport interface CdkDragDrop<T, O = T> {\r\n  /** Index of the item when it was picked up. */\r\n  previousIndex: number;\r\n  /** Current index of the item. */\r\n  currentIndex: number;\r\n  /** Item that is being dropped. */\r\n  item: CdkDrag;\r\n  /** Container in which the item was dropped. */\r\n  container: CdkDropList<T>;\r\n  /** Container from which the item was picked up. Can be the same as the `container`. */\r\n  previousContainer: CdkDropList<O>;\r\n  /** Whether the user's pointer was over the container when the item was dropped. */\r\n  isPointerOverContainer: boolean;\r\n  /** Distance in pixels that the user has dragged since the drag sequence started. */\r\n  distance: {x: number, y: number};\r\n}\r\n\r\n/** Event emitted as the user is dragging a draggable item. */\r\nexport interface CdkDragMove<T = any> {\r\n  /** Item that is being dragged. */\r\n  source: CdkDrag<T>;\r\n  /** Position of the user's pointer on the page. */\r\n  pointerPosition: {x: number, y: number};\r\n  /** Native event that is causing the dragging. */\r\n  event: MouseEvent | TouchEvent;\r\n  /** Distance in pixels that the user has dragged since the drag sequence started. */\r\n  distance: {x: number, y: number};\r\n  /**\r\n   * Indicates the direction in which the user is dragging the element along each axis.\r\n   * `1` means that the position is increasing (e.g. the user is moving to the right or downwards),\r\n   * whereas `-1` means that it's decreasing (they're moving to the left or upwards). `0` means\r\n   * that the position hasn't changed.\r\n   */\r\n  delta: {x: -1 | 0 | 1, y: -1 | 0 | 1};\r\n}\r\n\r\n/** Event emitted when the user swaps the position of two drag items. */\r\nexport interface CdkDragSortEvent<T = any, I = T> {\r\n  /** Index from which the item was sorted previously. */\r\n  previousIndex: number;\r\n  /** Index that the item is currently in. */\r\n  currentIndex: number;\r\n  /** Container that the item belongs to. */\r\n  container: CdkDropList<T>;\r\n  /** Item that is being sorted. */\r\n  item: CdkDrag<I>;\r\n}\r\n","/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n\r\nimport {Directive, OnDestroy, Input, InjectionToken} from '@angular/core';\r\nimport {BooleanInput, coerceBooleanProperty} from '@angular/cdk/coercion';\r\n\r\n/**\r\n * Injection token that can be used to reference instances of `CdkDropListGroup`. It serves as\r\n * alternative token to the actual `CdkDropListGroup` class which could cause unnecessary\r\n * retention of the class and its directive metadata.\r\n */\r\nexport const CDK_DROP_LIST_GROUP =\r\n    new InjectionToken<CdkDropListGroup<unknown>>('CdkDropListGroup');\r\n\r\n/**\r\n * Declaratively connects sibling `cdkDropList` instances together. All of the `cdkDropList`\r\n * elements that are placed inside a `cdkDropListGroup` will be connected to each other\r\n * automatically. Can be used as an alternative to the `cdkDropListConnectedTo` input\r\n * from `cdkDropList`.\r\n */\r\n@Directive({\r\n  selector: '[cdkDropListGroup]',\r\n  exportAs: 'cdkDropListGroup',\r\n  providers: [{provide: CDK_DROP_LIST_GROUP, useExisting: CdkDropListGroup}],\r\n})\r\nexport class CdkDropListGroup<T> implements OnDestroy {\r\n  /** Drop lists registered inside the group. */\r\n  readonly _items = new Set<T>();\r\n\r\n  /** Whether starting a dragging sequence from inside this group is disabled. */\r\n  @Input('cdkDropListGroupDisabled')\r\n  get disabled(): boolean { return this._disabled; }\r\n  set disabled(value: boolean) {\r\n    this._disabled = coerceBooleanProperty(value);\r\n  }\r\n  private _disabled = false;\r\n\r\n  ngOnDestroy() {\r\n    this._items.clear();\r\n  }\r\n\r\n  static ngAcceptInputType_disabled: BooleanInput;\r\n}\r\n","/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n\r\nimport {InjectionToken} from '@angular/core';\r\nimport {DragRefConfig, Point, DragRef} from '../drag-ref';\r\n\r\n/** Possible values that can be used to configure the drag start delay. */\r\nexport type DragStartDelay = number | {touch: number, mouse: number};\r\n\r\n/** Possible axis along which dragging can be locked. */\r\nexport type DragAxis = 'x' | 'y';\r\n\r\n/** Function that can be used to constrain the position of a dragged element. */\r\nexport type DragConstrainPosition = (point: Point, dragRef: DragRef) => Point;\r\n\r\n/** Possible orientations for a drop list. */\r\nexport type DropListOrientation = 'horizontal' | 'vertical';\r\n\r\n/**\r\n * Injection token that can be used to configure the\r\n * behavior of the drag&drop-related components.\r\n */\r\nexport const CDK_DRAG_CONFIG = new InjectionToken<DragDropConfig>('CDK_DRAG_CONFIG');\r\n\r\n/**\r\n * Object that can be used to configure the drag\r\n * items and drop lists within a module or a component.\r\n */\r\nexport interface DragDropConfig extends Partial<DragRefConfig> {\r\n  lockAxis?: DragAxis;\r\n  dragStartDelay?: DragStartDelay;\r\n  constrainPosition?: DragConstrainPosition;\r\n  previewClass?: string | string[];\r\n  boundaryElement?: string;\r\n  rootElementSelector?: string;\r\n  draggingDisabled?: boolean;\r\n  sortingDisabled?: boolean;\r\n  listAutoScrollDisabled?: boolean;\r\n  listOrientation?: DropListOrientation;\r\n  zIndex?: number;\r\n}\r\n","/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n\r\n/**\r\n * Asserts that a particular node is an element.\r\n * @param node Node to be checked.\r\n * @param name Name to attach to the error message.\r\n */\r\nexport function assertElementNode(node: Node, name: string): asserts node is HTMLElement {\r\n  if (node.nodeType !== 1) {\r\n    throw Error(`${name} must be attached to an element node. ` +\r\n                `Currently attached to \"${node.nodeName}\".`);\r\n  }\r\n}\r\n","/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n\r\nimport {\r\n  BooleanInput,\r\n  coerceArray,\r\n  coerceNumberProperty,\r\n  coerceBooleanProperty,\r\n  NumberInput,\r\n} from '@angular/cdk/coercion';\r\nimport {\r\n  ElementRef,\r\n  EventEmitter,\r\n  Input,\r\n  OnDestroy,\r\n  Output,\r\n  Optional,\r\n  Directive,\r\n  ChangeDetectorRef,\r\n  SkipSelf,\r\n  Inject,\r\n  InjectionToken,\r\n} from '@angular/core';\r\nimport {Directionality} from '@angular/cdk/bidi';\r\nimport {ScrollDispatcher} from '@angular/cdk/scrolling';\r\nimport {CdkDrag} from './drag';\r\nimport {CdkDragDrop, CdkDragEnter, CdkDragExit, CdkDragSortEvent} from '../drag-events';\r\nimport {CDK_DROP_LIST_GROUP, CdkDropListGroup} from './drop-list-group';\r\nimport {DropListRef} from '../drop-list-ref';\r\nimport {DragRef} from '../drag-ref';\r\nimport {DragDrop} from '../drag-drop';\r\nimport {DropListOrientation, DragAxis, DragDropConfig, CDK_DRAG_CONFIG} from './config';\r\nimport {Subject} from 'rxjs';\r\nimport {startWith, takeUntil} from 'rxjs/operators';\r\nimport {assertElementNode} from './assertions';\r\n\r\n/** Counter used to generate unique ids for drop zones. */\r\nlet _uniqueIdCounter = 0;\r\n\r\n/**\r\n * Internal compile-time-only representation of a `CdkDropList`.\r\n * Used to avoid circular import issues between the `CdkDropList` and the `CdkDrag`.\r\n * @docs-private\r\n */\r\nexport interface CdkDropListInternal extends CdkDropList {}\r\n\r\n/**\r\n * Injection token that can be used to reference instances of `CdkDropList`. It serves as\r\n * alternative token to the actual `CdkDropList` class which could cause unnecessary\r\n * retention of the class and its directive metadata.\r\n */\r\nexport const CDK_DROP_LIST = new InjectionToken<CdkDropList>('CdkDropList');\r\n\r\n/** Container that wraps a set of draggable items. */\r\n@Directive({\r\n  selector: '[cdkDropList], cdk-drop-list',\r\n  exportAs: 'cdkDropList',\r\n  providers: [\r\n    // Prevent child drop lists from picking up the same group as their parent.\r\n    {provide: CDK_DROP_LIST_GROUP, useValue: undefined},\r\n    {provide: CDK_DROP_LIST, useExisting: CdkDropList},\r\n  ],\r\n  host: {\r\n    'class': 'cdk-drop-list',\r\n    '[attr.id]': 'id',\r\n    '[class.cdk-drop-list-disabled]': 'disabled',\r\n    '[class.cdk-drop-list-dragging]': '_dropListRef.isDragging()',\r\n    '[class.cdk-drop-list-receiving]': '_dropListRef.isReceiving()',\r\n  }\r\n})\r\nexport class CdkDropList<T = any> implements OnDestroy {\r\n  /** Emits when the list has been destroyed. */\r\n  private _destroyed = new Subject<void>();\r\n\r\n  /** Whether the element's scrollable parents have been resolved. */\r\n  private _scrollableParentsResolved: boolean;\r\n\r\n  /** Keeps track of the drop lists that are currently on the page. */\r\n  private static _dropLists: CdkDropList[] = [];\r\n\r\n  /** Reference to the underlying drop list instance. */\r\n  _dropListRef: DropListRef<CdkDropList<T>>;\r\n\r\n  /**\r\n   * Other draggable containers that this container is connected to and into which the\r\n   * container's items can be transferred. Can either be references to other drop containers,\r\n   * or their unique IDs.\r\n   */\r\n  @Input('cdkDropListConnectedTo')\r\n  connectedTo: (CdkDropList | string)[] | CdkDropList | string = [];\r\n\r\n  /** Arbitrary data to attach to this container. */\r\n  @Input('cdkDropListData') data: T;\r\n\r\n  /** Direction in which the list is oriented. */\r\n  @Input('cdkDropListOrientation') orientation: DropListOrientation;\r\n\r\n  /**\r\n   * Unique ID for the drop zone. Can be used as a reference\r\n   * in the `connectedTo` of another `CdkDropList`.\r\n   */\r\n  @Input() id: string = `cdk-drop-list-${_uniqueIdCounter++}`;\r\n\r\n  /** Locks the position of the draggable elements inside the container along the specified axis. */\r\n  @Input('cdkDropListLockAxis') lockAxis: DragAxis;\r\n\r\n  /** Whether starting a dragging sequence from this container is disabled. */\r\n  @Input('cdkDropListDisabled')\r\n  get disabled(): boolean {\r\n    return this._disabled || (!!this._group && this._group.disabled);\r\n  }\r\n  set disabled(value: boolean) {\r\n    // Usually we sync the directive and ref state right before dragging starts, in order to have\r\n    // a single point of failure and to avoid having to use setters for everything. `disabled` is\r\n    // a special case, because it can prevent the `beforeStarted` event from firing, which can lock\r\n    // the user in a disabled state, so we also need to sync it as it's being set.\r\n    this._dropListRef.disabled = this._disabled = coerceBooleanProperty(value);\r\n  }\r\n  private _disabled: boolean;\r\n\r\n  /** Whether sorting within this drop list is disabled. */\r\n  @Input('cdkDropListSortingDisabled')\r\n  sortingDisabled: boolean;\r\n\r\n  /**\r\n   * Function that is used to determine whether an item\r\n   * is allowed to be moved into a drop container.\r\n   */\r\n  @Input('cdkDropListEnterPredicate')\r\n  enterPredicate: (drag: CdkDrag, drop: CdkDropList) => boolean = () => true\r\n\r\n  /** Functions that is used to determine whether an item can be sorted into a particular index. */\r\n  @Input('cdkDropListSortPredicate')\r\n  sortPredicate: (index: number, drag: CdkDrag, drop: CdkDropList) => boolean = () => true\r\n\r\n  /** Whether to auto-scroll the view when the user moves their pointer close to the edges. */\r\n  @Input('cdkDropListAutoScrollDisabled')\r\n  autoScrollDisabled: boolean;\r\n\r\n  /** Number of pixels to scroll for each frame when auto-scrolling an element. */\r\n  @Input('cdkDropListAutoScrollStep')\r\n  autoScrollStep: number;\r\n\r\n  /** Emits when the user drops an item inside the container. */\r\n  @Output('cdkDropListDropped')\r\n  dropped: EventEmitter<CdkDragDrop<T, any>> = new EventEmitter<CdkDragDrop<T, any>>();\r\n\r\n  /**\r\n   * Emits when the user has moved a new drag item into this container.\r\n   */\r\n  @Output('cdkDropListEntered')\r\n  entered: EventEmitter<CdkDragEnter<T>> = new EventEmitter<CdkDragEnter<T>>();\r\n\r\n  /**\r\n   * Emits when the user removes an item from the container\r\n   * by dragging it into another container.\r\n   */\r\n  @Output('cdkDropListExited')\r\n  exited: EventEmitter<CdkDragExit<T>> = new EventEmitter<CdkDragExit<T>>();\r\n\r\n  /** Emits as the user is swapping items while actively dragging. */\r\n  @Output('cdkDropListSorted')\r\n  sorted: EventEmitter<CdkDragSortEvent<T>> = new EventEmitter<CdkDragSortEvent<T>>();\r\n\r\n  /**\r\n   * Keeps track of the items that are registered with this container. Historically we used to\r\n   * do this with a `ContentChildren` query, however queries don't handle transplanted views very\r\n   * well which means that we can't handle cases like dragging the headers of a `mat-table`\r\n   * correctly. What we do instead is to have the items register themselves with the container\r\n   * and then we sort them based on their position in the DOM.\r\n   */\r\n  private _unsortedItems = new Set<CdkDrag>();\r\n\r\n  constructor(\r\n      /** Element that the drop list is attached to. */\r\n      public element: ElementRef<HTMLElement>, dragDrop: DragDrop,\r\n      private _changeDetectorRef: ChangeDetectorRef,\r\n      private _scrollDispatcher: ScrollDispatcher,\r\n      @Optional() private _dir?: Directionality,\r\n      @Optional() @Inject(CDK_DROP_LIST_GROUP) @SkipSelf()\r\n      private _group?: CdkDropListGroup<CdkDropList>,\r\n      @Optional() @Inject(CDK_DRAG_CONFIG) config?: DragDropConfig) {\r\n\r\n    if (typeof ngDevMode === 'undefined' || ngDevMode) {\r\n      assertElementNode(element.nativeElement, 'cdkDropList');\r\n    }\r\n\r\n    this._dropListRef = dragDrop.createDropList(element);\r\n    this._dropListRef.data = this;\r\n\r\n    if (config) {\r\n      this._assignDefaults(config);\r\n    }\r\n\r\n    this._dropListRef.enterPredicate = (drag: DragRef<CdkDrag>, drop: DropListRef<CdkDropList>) => {\r\n      return this.enterPredicate(drag.data, drop.data);\r\n    };\r\n\r\n    this._dropListRef.sortPredicate =\r\n      (index: number, drag: DragRef<CdkDrag>, drop: DropListRef<CdkDropList>) => {\r\n        return this.sortPredicate(index, drag.data, drop.data);\r\n      };\r\n\r\n    this._setupInputSyncSubscription(this._dropListRef);\r\n    this._handleEvents(this._dropListRef);\r\n    CdkDropList._dropLists.push(this);\r\n\r\n    if (_group) {\r\n      _group._items.add(this);\r\n    }\r\n  }\r\n\r\n  /** Registers an items with the drop list. */\r\n  addItem(item: CdkDrag): void {\r\n    this._unsortedItems.add(item);\r\n\r\n    if (this._dropListRef.isDragging()) {\r\n      this._syncItemsWithRef();\r\n    }\r\n  }\r\n\r\n  /** Removes an item from the drop list. */\r\n  removeItem(item: CdkDrag): void {\r\n    this._unsortedItems.delete(item);\r\n\r\n    if (this._dropListRef.isDragging()) {\r\n      this._syncItemsWithRef();\r\n    }\r\n  }\r\n\r\n  /** Gets the registered items in the list, sorted by their position in the DOM. */\r\n  getSortedItems(): CdkDrag[] {\r\n    return Array.from(this._unsortedItems).sort((a: CdkDrag, b: CdkDrag) => {\r\n      const documentPosition =\r\n          a._dragRef.getVisibleElement().compareDocumentPosition(b._dragRef.getVisibleElement());\r\n\r\n      // `compareDocumentPosition` returns a bitmask so we have to use a bitwise operator.\r\n      // https://developer.mozilla.org/en-US/docs/Web/API/Node/compareDocumentPosition\r\n      // tslint:disable-next-line:no-bitwise\r\n      return documentPosition & Node.DOCUMENT_POSITION_FOLLOWING ? -1 : 1;\r\n    });\r\n  }\r\n\r\n  ngOnDestroy() {\r\n    const index = CdkDropList._dropLists.indexOf(this);\r\n\r\n    if (index > -1) {\r\n      CdkDropList._dropLists.splice(index, 1);\r\n    }\r\n\r\n    if (this._group) {\r\n      this._group._items.delete(this);\r\n    }\r\n\r\n    this._unsortedItems.clear();\r\n    this._dropListRef.dispose();\r\n    this._destroyed.next();\r\n    this._destroyed.complete();\r\n  }\r\n\r\n  /** Syncs the inputs of the CdkDropList with the options of the underlying DropListRef. */\r\n  private _setupInputSyncSubscription(ref: DropListRef<CdkDropList>) {\r\n    if (this._dir) {\r\n      this._dir.change\r\n        .pipe(startWith(this._dir.value), takeUntil(this._destroyed))\r\n        .subscribe(value => ref.withDirection(value));\r\n    }\r\n\r\n    ref.beforeStarted.subscribe(() => {\r\n      const siblings = coerceArray(this.connectedTo).map(drop => {\r\n        if (typeof drop === 'string') {\r\n          const correspondingDropList = CdkDropList._dropLists.find(list => list.id === drop);\r\n\r\n          if (!correspondingDropList && (typeof ngDevMode === 'undefined' || ngDevMode)) {\r\n            console.warn(`CdkDropList could not find connected drop list with id \"${drop}\"`);\r\n          }\r\n\r\n          return correspondingDropList!;\r\n        }\r\n\r\n        return drop;\r\n      });\r\n\r\n      if (this._group) {\r\n        this._group._items.forEach(drop => {\r\n          if (siblings.indexOf(drop) === -1) {\r\n            siblings.push(drop);\r\n          }\r\n        });\r\n      }\r\n\r\n      // Note that we resolve the scrollable parents here so that we delay the resolution\r\n      // as long as possible, ensuring that the element is in its final place in the DOM.\r\n      if (!this._scrollableParentsResolved) {\r\n        const scrollableParents = this._scrollDispatcher\r\n          .getAncestorScrollContainers(this.element)\r\n          .map(scrollable => scrollable.getElementRef().nativeElement);\r\n        this._dropListRef.withScrollableParents(scrollableParents);\r\n\r\n        // Only do this once since it involves traversing the DOM and the parents\r\n        // shouldn't be able to change without the drop list being destroyed.\r\n        this._scrollableParentsResolved = true;\r\n      }\r\n\r\n      ref.disabled = this.disabled;\r\n      ref.lockAxis = this.lockAxis;\r\n      ref.sortingDisabled = coerceBooleanProperty(this.sortingDisabled);\r\n      ref.autoScrollDisabled = coerceBooleanProperty(this.autoScrollDisabled);\r\n      ref.autoScrollStep = coerceNumberProperty(this.autoScrollStep, 2);\r\n      ref\r\n        .connectedTo(siblings.filter(drop => drop && drop !== this).map(list => list._dropListRef))\r\n        .withOrientation(this.orientation);\r\n    });\r\n  }\r\n\r\n  /** Handles events from the underlying DropListRef. */\r\n  private _handleEvents(ref: DropListRef<CdkDropList>) {\r\n    ref.beforeStarted.subscribe(() => {\r\n      this._syncItemsWithRef();\r\n      this._changeDetectorRef.markForCheck();\r\n    });\r\n\r\n    ref.entered.subscribe(event => {\r\n      this.entered.emit({\r\n        container: this,\r\n        item: event.item.data,\r\n        currentIndex: event.currentIndex\r\n      });\r\n    });\r\n\r\n    ref.exited.subscribe(event => {\r\n      this.exited.emit({\r\n        container: this,\r\n        item: event.item.data\r\n      });\r\n      this._changeDetectorRef.markForCheck();\r\n    });\r\n\r\n    ref.sorted.subscribe(event => {\r\n      this.sorted.emit({\r\n        previousIndex: event.previousIndex,\r\n        currentIndex: event.currentIndex,\r\n        container: this,\r\n        item: event.item.data\r\n      });\r\n    });\r\n\r\n    ref.dropped.subscribe(event => {\r\n      this.dropped.emit({\r\n        previousIndex: event.previousIndex,\r\n        currentIndex: event.currentIndex,\r\n        previousContainer: event.previousContainer.data,\r\n        container: event.container.data,\r\n        item: event.item.data,\r\n        isPointerOverContainer: event.isPointerOverContainer,\r\n        distance: event.distance\r\n      });\r\n\r\n      // Mark for check since all of these events run outside of change\r\n      // detection and we're not guaranteed for something else to have triggered it.\r\n      this._changeDetectorRef.markForCheck();\r\n    });\r\n  }\r\n\r\n  /** Assigns the default input values based on a provided config object. */\r\n  private _assignDefaults(config: DragDropConfig) {\r\n    const {\r\n      lockAxis, draggingDisabled, sortingDisabled, listAutoScrollDisabled, listOrientation\r\n    } = config;\r\n\r\n    this.disabled = draggingDisabled == null ? false : draggingDisabled;\r\n    this.sortingDisabled = sortingDisabled == null ? false : sortingDisabled;\r\n    this.autoScrollDisabled = listAutoScrollDisabled == null ? false : listAutoScrollDisabled;\r\n    this.orientation = listOrientation || 'vertical';\r\n\r\n    if (lockAxis) {\r\n      this.lockAxis = lockAxis;\r\n    }\r\n  }\r\n\r\n  /** Syncs up the registered drag items with underlying drop list ref. */\r\n  private _syncItemsWithRef() {\r\n    this._dropListRef.withItems(this.getSortedItems().map(item => item._dragRef));\r\n  }\r\n\r\n  static ngAcceptInputType_disabled: BooleanInput;\r\n  static ngAcceptInputType_sortingDisabled: BooleanInput;\r\n  static ngAcceptInputType_autoScrollDisabled: BooleanInput;\r\n  static ngAcceptInputType_autoScrollStep: NumberInput;\r\n}\r\n","/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n\r\nimport {BooleanInput, coerceBooleanProperty} from '@angular/cdk/coercion';\r\nimport {\r\n  Directive,\r\n  ElementRef,\r\n  Inject,\r\n  InjectionToken,\r\n  Input,\r\n  OnDestroy,\r\n  Optional,\r\n  SkipSelf,\r\n} from '@angular/core';\r\nimport {Subject} from 'rxjs';\r\nimport {CDK_DRAG_PARENT} from '../drag-parent';\r\nimport {assertElementNode} from './assertions';\r\n\r\n/**\r\n * Injection token that can be used to reference instances of `CdkDragHandle`. It serves as\r\n * alternative token to the actual `CdkDragHandle` class which could cause unnecessary\r\n * retention of the class and its directive metadata.\r\n */\r\nexport const CDK_DRAG_HANDLE = new InjectionToken<CdkDragHandle>('CdkDragHandle');\r\n\r\n/** Handle that can be used to drag a CdkDrag instance. */\r\n@Directive({\r\n  selector: '[cdkDragHandle]',\r\n  host: {\r\n    'class': 'cdk-drag-handle'\r\n  },\r\n  providers: [{provide: CDK_DRAG_HANDLE, useExisting: CdkDragHandle}],\r\n})\r\nexport class CdkDragHandle implements OnDestroy {\r\n  /** Closest parent draggable instance. */\r\n  _parentDrag: {} | undefined;\r\n\r\n  /** Emits when the state of the handle has changed. */\r\n  _stateChanges = new Subject<CdkDragHandle>();\r\n\r\n  /** Whether starting to drag through this handle is disabled. */\r\n  @Input('cdkDragHandleDisabled')\r\n  get disabled(): boolean { return this._disabled; }\r\n  set disabled(value: boolean) {\r\n    this._disabled = coerceBooleanProperty(value);\r\n    this._stateChanges.next(this);\r\n  }\r\n  private _disabled = false;\r\n\r\n  constructor(\r\n    public element: ElementRef<HTMLElement>,\r\n    @Inject(CDK_DRAG_PARENT) @Optional() @SkipSelf() parentDrag?: any) {\r\n\r\n    if (typeof ngDevMode === 'undefined' || ngDevMode) {\r\n      assertElementNode(element.nativeElement, 'cdkDragHandle');\r\n    }\r\n\r\n    this._parentDrag = parentDrag;\r\n  }\r\n\r\n  ngOnDestroy() {\r\n    this._stateChanges.complete();\r\n  }\r\n\r\n  static ngAcceptInputType_disabled: BooleanInput;\r\n}\r\n","/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n\r\nimport {Directive, TemplateRef, Input, InjectionToken} from '@angular/core';\r\n\r\n/**\r\n * Injection token that can be used to reference instances of `CdkDragPlaceholder`. It serves as\r\n * alternative token to the actual `CdkDragPlaceholder` class which could cause unnecessary\r\n * retention of the class and its directive metadata.\r\n */\r\nexport const CDK_DRAG_PLACEHOLDER = new InjectionToken<CdkDragPlaceholder>('CdkDragPlaceholder');\r\n\r\n/**\r\n * Element that will be used as a template for the placeholder of a CdkDrag when\r\n * it is being dragged. The placeholder is displayed in place of the element being dragged.\r\n */\r\n@Directive({\r\n  selector: 'ng-template[cdkDragPlaceholder]',\r\n  providers: [{provide: CDK_DRAG_PLACEHOLDER, useExisting: CdkDragPlaceholder}],\r\n})\r\nexport class CdkDragPlaceholder<T = any> {\r\n  /** Context data to be added to the placeholder template instance. */\r\n  @Input() data: T;\r\n  constructor(public templateRef: TemplateRef<T>) {}\r\n}\r\n","/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n\r\nimport {BooleanInput, coerceBooleanProperty} from '@angular/cdk/coercion';\r\nimport {Directive, InjectionToken, Input, TemplateRef} from '@angular/core';\r\n\r\n/**\r\n * Injection token that can be used to reference instances of `CdkDragPreview`. It serves as\r\n * alternative token to the actual `CdkDragPreview` class which could cause unnecessary\r\n * retention of the class and its directive metadata.\r\n */\r\nexport const CDK_DRAG_PREVIEW = new InjectionToken<CdkDragPreview>('CdkDragPreview');\r\n\r\n/**\r\n * Element that will be used as a template for the preview\r\n * of a CdkDrag when it is being dragged.\r\n */\r\n@Directive({\r\n  selector: 'ng-template[cdkDragPreview]',\r\n  providers: [{provide: CDK_DRAG_PREVIEW, useExisting: CdkDragPreview}],\r\n})\r\nexport class CdkDragPreview<T = any> {\r\n  /** Context data to be added to the preview template instance. */\r\n  @Input() data: T;\r\n\r\n  /** Whether the preview should preserve the same size as the item that is being dragged. */\r\n  @Input()\r\n  get matchSize(): boolean { return this._matchSize; }\r\n  set matchSize(value: boolean) { this._matchSize = coerceBooleanProperty(value); }\r\n  private _matchSize = false;\r\n\r\n  constructor(public templateRef: TemplateRef<T>) {}\r\n\r\n  static ngAcceptInputType_matchSize: BooleanInput;\r\n}\r\n","/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n\r\nimport {Directionality} from '@angular/cdk/bidi';\r\nimport {DOCUMENT} from '@angular/common';\r\nimport {\r\n  AfterViewInit,\r\n  ContentChild,\r\n  ContentChildren,\r\n  Directive,\r\n  ElementRef,\r\n  EventEmitter,\r\n  Inject,\r\n  Input,\r\n  NgZone,\r\n  OnDestroy,\r\n  Optional,\r\n  Output,\r\n  QueryList,\r\n  SkipSelf,\r\n  ViewContainerRef,\r\n  OnChanges,\r\n  SimpleChanges,\r\n  ChangeDetectorRef,\r\n  Self,\r\n} from '@angular/core';\r\nimport {\r\n  coerceBooleanProperty,\r\n  coerceNumberProperty,\r\n  coerceElement,\r\n  BooleanInput\r\n} from '@angular/cdk/coercion';\r\nimport {Observable, Observer, Subject, merge} from 'rxjs';\r\nimport {startWith, take, map, takeUntil, switchMap, tap} from 'rxjs/operators';\r\nimport {\r\n  CdkDragDrop,\r\n  CdkDragEnd,\r\n  CdkDragEnter,\r\n  CdkDragExit,\r\n  CdkDragMove,\r\n  CdkDragStart,\r\n  CdkDragRelease,\r\n} from '../drag-events';\r\nimport {CDK_DRAG_HANDLE, CdkDragHandle} from './drag-handle';\r\nimport {CDK_DRAG_PLACEHOLDER, CdkDragPlaceholder} from './drag-placeholder';\r\nimport {CDK_DRAG_PREVIEW, CdkDragPreview} from './drag-preview';\r\nimport {CDK_DRAG_PARENT} from '../drag-parent';\r\nimport {DragRef, Point} from '../drag-ref';\r\nimport {CDK_DROP_LIST, CdkDropListInternal as CdkDropList} from './drop-list';\r\nimport {DragDrop} from '../drag-drop';\r\nimport {CDK_DRAG_CONFIG, DragDropConfig, DragStartDelay, DragAxis} from './config';\r\nimport {assertElementNode} from './assertions';\r\n\r\nconst DRAG_HOST_CLASS = 'cdk-drag';\r\n\r\n/** Element that can be moved inside a CdkDropList container. */\r\n@Directive({\r\n  selector: '[cdkDrag]',\r\n  exportAs: 'cdkDrag',\r\n  host: {\r\n    'class': DRAG_HOST_CLASS,\r\n    '[class.cdk-drag-disabled]': 'disabled',\r\n    '[class.cdk-drag-dragging]': '_dragRef.isDragging()',\r\n  },\r\n  providers: [{provide: CDK_DRAG_PARENT, useExisting: CdkDrag}]\r\n})\r\nexport class CdkDrag<T = any> implements AfterViewInit, OnChanges, OnDestroy {\r\n  private _destroyed = new Subject<void>();\r\n  private static _dragInstances: CdkDrag[] = [];\r\n\r\n  /** Reference to the underlying drag instance. */\r\n  _dragRef: DragRef<CdkDrag<T>>;\r\n\r\n  /** Elements that can be used to drag the draggable item. */\r\n  @ContentChildren(CDK_DRAG_HANDLE, {descendants: true}) _handles: QueryList<CdkDragHandle>;\r\n\r\n  /** Element that will be used as a template to create the draggable item's preview. */\r\n  @ContentChild(CDK_DRAG_PREVIEW) _previewTemplate: CdkDragPreview;\r\n\r\n  /** Template for placeholder element rendered to show where a draggable would be dropped. */\r\n  @ContentChild(CDK_DRAG_PLACEHOLDER) _placeholderTemplate: CdkDragPlaceholder;\r\n\r\n  /** Arbitrary data to attach to this drag instance. */\r\n  @Input('cdkDragData') data: T;\r\n\r\n  /** Locks the position of the dragged element along the specified axis. */\r\n  @Input('cdkDragLockAxis') lockAxis: DragAxis;\r\n\r\n  /**\r\n   * Selector that will be used to determine the root draggable element, starting from\r\n   * the `cdkDrag` element and going up the DOM. Passing an alternate root element is useful\r\n   * when trying to enable dragging on an element that you might not have access to.\r\n   */\r\n  @Input('cdkDragRootElement') rootElementSelector: string;\r\n\r\n  /**\r\n   * Node or selector that will be used to determine the element to which the draggable's\r\n   * position will be constrained. If a string is passed in, it'll be used as a selector that\r\n   * will be matched starting from the element's parent and going up the DOM until a match\r\n   * has been found.\r\n   */\r\n  @Input('cdkDragBoundary') boundaryElement: string | ElementRef<HTMLElement> | HTMLElement;\r\n\r\n  /**\r\n   * Amount of milliseconds to wait after the user has put their\r\n   * pointer down before starting to drag the element.\r\n   */\r\n  @Input('cdkDragStartDelay') dragStartDelay: DragStartDelay;\r\n\r\n  /**\r\n   * Sets the position of a `CdkDrag` that is outside of a drop container.\r\n   * Can be used to restore the element's position for a returning user.\r\n   */\r\n  @Input('cdkDragFreeDragPosition') freeDragPosition: {x: number, y: number};\r\n\r\n  /** Whether starting to drag this element is disabled. */\r\n  @Input('cdkDragDisabled')\r\n  get disabled(): boolean {\r\n    return this._disabled || (this.dropContainer && this.dropContainer.disabled);\r\n  }\r\n  set disabled(value: boolean) {\r\n    this._disabled = coerceBooleanProperty(value);\r\n    this._dragRef.disabled = this._disabled;\r\n  }\r\n  private _disabled: boolean;\r\n\r\n  /**\r\n   * Function that can be used to customize the logic of how the position of the drag item\r\n   * is limited while it's being dragged. Gets called with a point containing the current position\r\n   * of the user's pointer on the page and should return a point describing where the item should\r\n   * be rendered.\r\n   */\r\n  @Input('cdkDragConstrainPosition') constrainPosition?: (point: Point, dragRef: DragRef) => Point;\r\n\r\n  /** Class to be added to the preview element. */\r\n  @Input('cdkDragPreviewClass') previewClass: string | string[];\r\n\r\n  /** Emits when the user starts dragging the item. */\r\n  @Output('cdkDragStarted') started: EventEmitter<CdkDragStart> = new EventEmitter<CdkDragStart>();\r\n\r\n  /** Emits when the user has released a drag item, before any animations have started. */\r\n  @Output('cdkDragReleased') released: EventEmitter<CdkDragRelease> =\r\n      new EventEmitter<CdkDragRelease>();\r\n\r\n  /** Emits when the user stops dragging an item in the container. */\r\n  @Output('cdkDragEnded') ended: EventEmitter<CdkDragEnd> = new EventEmitter<CdkDragEnd>();\r\n\r\n  /** Emits when the user has moved the item into a new container. */\r\n  @Output('cdkDragEntered') entered: EventEmitter<CdkDragEnter<any>> =\r\n      new EventEmitter<CdkDragEnter<any>>();\r\n\r\n  /** Emits when the user removes the item its container by dragging it into another container. */\r\n  @Output('cdkDragExited') exited: EventEmitter<CdkDragExit<any>> =\r\n      new EventEmitter<CdkDragExit<any>>();\r\n\r\n  /** Emits when the user drops the item inside a container. */\r\n  @Output('cdkDragDropped') dropped: EventEmitter<CdkDragDrop<any>> =\r\n      new EventEmitter<CdkDragDrop<any>>();\r\n\r\n  /**\r\n   * Emits as the user is dragging the item. Use with caution,\r\n   * because this event will fire for every pixel that the user has dragged.\r\n   */\r\n  @Output('cdkDragMoved') moved: Observable<CdkDragMove<T>> =\r\n      new Observable((observer: Observer<CdkDragMove<T>>) => {\r\n        const subscription = this._dragRef.moved.pipe(map(movedEvent => ({\r\n          source: this,\r\n          pointerPosition: movedEvent.pointerPosition,\r\n          event: movedEvent.event,\r\n          delta: movedEvent.delta,\r\n          distance: movedEvent.distance\r\n        }))).subscribe(observer);\r\n\r\n        return () => {\r\n          subscription.unsubscribe();\r\n        };\r\n      });\r\n\r\n  constructor(\r\n      /** Element that the draggable is attached to. */\r\n      public element: ElementRef<HTMLElement>,\r\n      /** Droppable container that the draggable is a part of. */\r\n      @Inject(CDK_DROP_LIST) @Optional() @SkipSelf() public dropContainer: CdkDropList,\r\n      /**\r\n       * @deprecated `_document` parameter no longer being used and will be removed.\r\n       * @breaking-change 12.0.0\r\n       */\r\n      @Inject(DOCUMENT) _document: any, private _ngZone: NgZone,\r\n      private _viewContainerRef: ViewContainerRef,\r\n      @Optional() @Inject(CDK_DRAG_CONFIG) config: DragDropConfig,\r\n      @Optional() private _dir: Directionality, dragDrop: DragDrop,\r\n      private _changeDetectorRef: ChangeDetectorRef,\r\n      @Optional() @Self() @Inject(CDK_DRAG_HANDLE) private _selfHandle?: CdkDragHandle,\r\n      @Optional() @SkipSelf() @Inject(CDK_DRAG_PARENT) private _parentDrag?: CdkDrag) {\r\n    this._dragRef = dragDrop.createDrag(element, {\r\n      dragStartThreshold: config && config.dragStartThreshold != null ?\r\n          config.dragStartThreshold : 5,\r\n      pointerDirectionChangeThreshold: config && config.pointerDirectionChangeThreshold != null ?\r\n          config.pointerDirectionChangeThreshold : 5,\r\n      zIndex: config?.zIndex,\r\n    });\r\n    this._dragRef.data = this;\r\n\r\n    // We have to keep track of the drag instances in order to be able to match an element to\r\n    // a drag instance. We can't go through the global registry of `DragRef`, because the root\r\n    // element could be different.\r\n    CdkDrag._dragInstances.push(this);\r\n\r\n    if (config) {\r\n      this._assignDefaults(config);\r\n    }\r\n\r\n    // Note that usually the container is assigned when the drop list is picks up the item, but in\r\n    // some cases (mainly transplanted views with OnPush, see #18341) we may end up in a situation\r\n    // where there are no items on the first change detection pass, but the items get picked up as\r\n    // soon as the user triggers another pass by dragging. This is a problem, because the item would\r\n    // have to switch from standalone mode to drag mode in the middle of the dragging sequence which\r\n    // is too late since the two modes save different kinds of information. We work around it by\r\n    // assigning the drop container both from here and the list.\r\n    if (dropContainer) {\r\n      this._dragRef._withDropContainer(dropContainer._dropListRef);\r\n      dropContainer.addItem(this);\r\n    }\r\n\r\n    this._syncInputs(this._dragRef);\r\n    this._handleEvents(this._dragRef);\r\n  }\r\n\r\n  /**\r\n   * Returns the element that is being used as a placeholder\r\n   * while the current element is being dragged.\r\n   */\r\n  getPlaceholderElement(): HTMLElement {\r\n    return this._dragRef.getPlaceholderElement();\r\n  }\r\n\r\n  /** Returns the root draggable element. */\r\n  getRootElement(): HTMLElement {\r\n    return this._dragRef.getRootElement();\r\n  }\r\n\r\n  /** Resets a standalone drag item to its initial position. */\r\n  reset(): void {\r\n    this._dragRef.reset();\r\n  }\r\n\r\n  /**\r\n   * Gets the pixel coordinates of the draggable outside of a drop container.\r\n   */\r\n  getFreeDragPosition(): {readonly x: number, readonly y: number} {\r\n    return this._dragRef.getFreeDragPosition();\r\n  }\r\n\r\n  ngAfterViewInit() {\r\n    // We need to wait for the zone to stabilize, in order for the reference\r\n    // element to be in the proper place in the DOM. This is mostly relevant\r\n    // for draggable elements inside portals since they get stamped out in\r\n    // their original DOM position and then they get transferred to the portal.\r\n    this._ngZone.onStable\r\n      .pipe(take(1), takeUntil(this._destroyed))\r\n      .subscribe(() => {\r\n        this._updateRootElement();\r\n\r\n        // Listen for any newly-added handles.\r\n        this._handles.changes.pipe(\r\n          startWith(this._handles),\r\n          // Sync the new handles with the DragRef.\r\n          tap((handles: QueryList<CdkDragHandle>) => {\r\n            const childHandleElements = handles\r\n              .filter(handle => handle._parentDrag === this)\r\n              .map(handle => handle.element);\r\n\r\n            // Usually handles are only allowed to be a descendant of the drag element, but if\r\n            // the consumer defined a different drag root, we should allow the drag element\r\n            // itself to be a handle too.\r\n            if (this._selfHandle && this.rootElementSelector) {\r\n              childHandleElements.push(this.element);\r\n            }\r\n\r\n            this._dragRef.withHandles(childHandleElements);\r\n          }),\r\n          // Listen if the state of any of the handles changes.\r\n          switchMap((handles: QueryList<CdkDragHandle>) => {\r\n            return merge(...handles.map(item => {\r\n              return item._stateChanges.pipe(startWith(item));\r\n            })) as Observable<CdkDragHandle>;\r\n          }),\r\n          takeUntil(this._destroyed)\r\n        ).subscribe(handleInstance => {\r\n          // Enabled/disable the handle that changed in the DragRef.\r\n          const dragRef = this._dragRef;\r\n          const handle = handleInstance.element.nativeElement;\r\n          handleInstance.disabled ? dragRef.disableHandle(handle) : dragRef.enableHandle(handle);\r\n        });\r\n\r\n        if (this.freeDragPosition) {\r\n          this._dragRef.setFreeDragPosition(this.freeDragPosition);\r\n        }\r\n      });\r\n  }\r\n\r\n  ngOnChanges(changes: SimpleChanges) {\r\n    const rootSelectorChange = changes['rootElementSelector'];\r\n    const positionChange = changes['freeDragPosition'];\r\n\r\n    // We don't have to react to the first change since it's being\r\n    // handled in `ngAfterViewInit` where it needs to be deferred.\r\n    if (rootSelectorChange && !rootSelectorChange.firstChange) {\r\n      this._updateRootElement();\r\n    }\r\n\r\n    // Skip the first change since it's being handled in `ngAfterViewInit`.\r\n    if (positionChange && !positionChange.firstChange && this.freeDragPosition) {\r\n      this._dragRef.setFreeDragPosition(this.freeDragPosition);\r\n    }\r\n  }\r\n\r\n  ngOnDestroy() {\r\n    if (this.dropContainer) {\r\n      this.dropContainer.removeItem(this);\r\n    }\r\n\r\n    const index = CdkDrag._dragInstances.indexOf(this);\r\n    if (index > -1) {\r\n      CdkDrag._dragInstances.splice(index, 1);\r\n    }\r\n    this._destroyed.next();\r\n    this._destroyed.complete();\r\n    this._dragRef.dispose();\r\n  }\r\n\r\n  /** Syncs the root element with the `DragRef`. */\r\n  private _updateRootElement() {\r\n    const element = this.element.nativeElement;\r\n    const rootElement = this.rootElementSelector ?\r\n        getClosestMatchingAncestor(element, this.rootElementSelector) : element;\r\n\r\n    if (rootElement && (typeof ngDevMode === 'undefined' || ngDevMode)) {\r\n      assertElementNode(rootElement, 'cdkDrag');\r\n    }\r\n\r\n    this._dragRef.withRootElement(rootElement || element);\r\n  }\r\n\r\n  /** Gets the boundary element, based on the `boundaryElement` value. */\r\n  private _getBoundaryElement() {\r\n    const boundary = this.boundaryElement;\r\n\r\n    if (!boundary) {\r\n      return null;\r\n    }\r\n\r\n    if (typeof boundary === 'string') {\r\n      return getClosestMatchingAncestor(this.element.nativeElement, boundary);\r\n    }\r\n\r\n    const element = coerceElement(boundary);\r\n\r\n    if ((typeof ngDevMode === 'undefined' || ngDevMode) &&\r\n      !element.contains(this.element.nativeElement)) {\r\n      throw Error('Draggable element is not inside of the node passed into cdkDragBoundary.');\r\n    }\r\n\r\n    return element;\r\n  }\r\n\r\n  /** Syncs the inputs of the CdkDrag with the options of the underlying DragRef. */\r\n  private _syncInputs(ref: DragRef<CdkDrag<T>>) {\r\n    ref.beforeStarted.subscribe(() => {\r\n      if (!ref.isDragging()) {\r\n        const dir = this._dir;\r\n        const dragStartDelay = this.dragStartDelay;\r\n        const placeholder = this._placeholderTemplate ? {\r\n          template: this._placeholderTemplate.templateRef,\r\n          context: this._placeholderTemplate.data,\r\n          viewContainer: this._viewContainerRef\r\n        } : null;\r\n        const preview = this._previewTemplate ? {\r\n          template: this._previewTemplate.templateRef,\r\n          context: this._previewTemplate.data,\r\n          matchSize: this._previewTemplate.matchSize,\r\n          viewContainer: this._viewContainerRef\r\n        } : null;\r\n\r\n        ref.disabled = this.disabled;\r\n        ref.lockAxis = this.lockAxis;\r\n        ref.dragStartDelay = (typeof dragStartDelay === 'object' && dragStartDelay) ?\r\n            dragStartDelay : coerceNumberProperty(dragStartDelay);\r\n        ref.constrainPosition = this.constrainPosition;\r\n        ref.previewClass = this.previewClass;\r\n        ref\r\n          .withBoundaryElement(this._getBoundaryElement())\r\n          .withPlaceholderTemplate(placeholder)\r\n          .withPreviewTemplate(preview);\r\n\r\n        if (dir) {\r\n          ref.withDirection(dir.value);\r\n        }\r\n      }\r\n    });\r\n\r\n    // This only needs to be resolved once.\r\n    ref.beforeStarted.pipe(take(1)).subscribe(() => {\r\n      // If we managed to resolve a parent through DI, use it.\r\n      if (this._parentDrag) {\r\n        ref.withParent(this._parentDrag._dragRef);\r\n        return;\r\n      }\r\n\r\n      // Otherwise fall back to resolving the parent by looking up the DOM. This can happen if\r\n      // the item was projected into another item by something like `ngTemplateOutlet`.\r\n      let parent = this.element.nativeElement.parentElement;\r\n      while (parent) {\r\n        // `classList` needs to be null checked, because IE doesn't have it on some elements.\r\n        if (parent.classList?.contains(DRAG_HOST_CLASS)) {\r\n          ref.withParent(CdkDrag._dragInstances.find(drag => {\r\n            return drag.element.nativeElement === parent;\r\n          })?._dragRef || null);\r\n          break;\r\n        }\r\n        parent = parent.parentElement;\r\n      }\r\n    });\r\n  }\r\n\r\n  /** Handles the events from the underlying `DragRef`. */\r\n  private _handleEvents(ref: DragRef<CdkDrag<T>>) {\r\n    ref.started.subscribe(() => {\r\n      this.started.emit({source: this});\r\n\r\n      // Since all of these events run outside of change detection,\r\n      // we need to ensure that everything is marked correctly.\r\n      this._changeDetectorRef.markForCheck();\r\n    });\r\n\r\n    ref.released.subscribe(() => {\r\n      this.released.emit({source: this});\r\n    });\r\n\r\n    ref.ended.subscribe(event => {\r\n      this.ended.emit({source: this, distance: event.distance});\r\n\r\n      // Since all of these events run outside of change detection,\r\n      // we need to ensure that everything is marked correctly.\r\n      this._changeDetectorRef.markForCheck();\r\n    });\r\n\r\n    ref.entered.subscribe(event => {\r\n      this.entered.emit({\r\n        container: event.container.data,\r\n        item: this,\r\n        currentIndex: event.currentIndex\r\n      });\r\n    });\r\n\r\n    ref.exited.subscribe(event => {\r\n      this.exited.emit({\r\n        container: event.container.data,\r\n        item: this\r\n      });\r\n    });\r\n\r\n    ref.dropped.subscribe(event => {\r\n      this.dropped.emit({\r\n        previousIndex: event.previousIndex,\r\n        currentIndex: event.currentIndex,\r\n        previousContainer: event.previousContainer.data,\r\n        container: event.container.data,\r\n        isPointerOverContainer: event.isPointerOverContainer,\r\n        item: this,\r\n        distance: event.distance\r\n      });\r\n    });\r\n  }\r\n\r\n  /** Assigns the default input values based on a provided config object. */\r\n  private _assignDefaults(config: DragDropConfig) {\r\n    const {\r\n      lockAxis, dragStartDelay, constrainPosition, previewClass,\r\n      boundaryElement, draggingDisabled, rootElementSelector\r\n    } = config;\r\n\r\n    this.disabled = draggingDisabled == null ? false : draggingDisabled;\r\n    this.dragStartDelay = dragStartDelay || 0;\r\n\r\n    if (lockAxis) {\r\n      this.lockAxis = lockAxis;\r\n    }\r\n\r\n    if (constrainPosition) {\r\n      this.constrainPosition = constrainPosition;\r\n    }\r\n\r\n    if (previewClass) {\r\n      this.previewClass = previewClass;\r\n    }\r\n\r\n    if (boundaryElement) {\r\n      this.boundaryElement = boundaryElement;\r\n    }\r\n\r\n    if (rootElementSelector) {\r\n      this.rootElementSelector = rootElementSelector;\r\n    }\r\n  }\r\n\r\n  static ngAcceptInputType_disabled: BooleanInput;\r\n}\r\n\r\n/** Gets the closest ancestor of an element that matches a selector. */\r\nfunction getClosestMatchingAncestor(element: HTMLElement, selector: string) {\r\n  let currentElement = element.parentElement as HTMLElement | null;\r\n\r\n  while (currentElement) {\r\n    // IE doesn't support `matches` so we have to fall back to `msMatchesSelector`.\r\n    if (currentElement.matches ? currentElement.matches(selector) :\r\n        (currentElement as any).msMatchesSelector(selector)) {\r\n      return currentElement;\r\n    }\r\n\r\n    currentElement = currentElement.parentElement;\r\n  }\r\n\r\n  return null;\r\n}\r\n\r\n","/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n\r\nimport {NgModule} from '@angular/core';\r\nimport {CdkScrollableModule} from '@angular/cdk/scrolling';\r\nimport {CdkDropList} from './directives/drop-list';\r\nimport {CdkDropListGroup} from './directives/drop-list-group';\r\nimport {CdkDrag} from './directives/drag';\r\nimport {CdkDragHandle} from './directives/drag-handle';\r\nimport {CdkDragPreview} from './directives/drag-preview';\r\nimport {CdkDragPlaceholder} from './directives/drag-placeholder';\r\nimport {DragDrop} from './drag-drop';\r\n\r\n@NgModule({\r\n  declarations: [\r\n    CdkDropList,\r\n    CdkDropListGroup,\r\n    CdkDrag,\r\n    CdkDragHandle,\r\n    CdkDragPreview,\r\n    CdkDragPlaceholder,\r\n  ],\r\n  exports: [\r\n    CdkScrollableModule,\r\n    CdkDropList,\r\n    CdkDropListGroup,\r\n    CdkDrag,\r\n    CdkDragHandle,\r\n    CdkDragPreview,\r\n    CdkDragPlaceholder,\r\n  ],\r\n  providers: [\r\n    DragDrop,\r\n  ]\r\n})\r\nexport class DragDropModule {}\r\n","/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n\r\nexport {DragDrop} from './drag-drop';\r\nexport {DragRef, DragRefConfig, Point} from './drag-ref';\r\nexport {DropListRef} from './drop-list-ref';\r\nexport {CDK_DRAG_PARENT} from './drag-parent';\r\n\r\nexport * from './drag-events';\r\nexport * from './drag-utils';\r\nexport * from './drag-drop-module';\r\nexport * from './drag-drop-registry';\r\n\r\nexport {CdkDropList, CDK_DROP_LIST} from './directives/drop-list';\r\nexport * from './directives/config';\r\nexport * from './directives/drop-list-group';\r\nexport * from './directives/drag';\r\nexport * from './directives/drag-handle';\r\nexport * from './directives/drag-preview';\r\nexport * from './directives/drag-placeholder';\r\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './public-api';\n\nexport {CdkDropListInternal as ɵangular_material_src_cdk_drag_drop_drag_drop_a} from './directives/drop-list';"],"names":["clamp"],"mappings":"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"}