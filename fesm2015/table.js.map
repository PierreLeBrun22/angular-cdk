{"version":3,"file":"table.js","sources":["../../../../../../src/cdk/table/can-stick.ts","../../../../../../src/cdk/table/tokens.ts","../../../../../../src/cdk/table/cell.ts","../../../../../../src/cdk/table/coalesced-style-scheduler.ts","../../../../../../src/cdk/table/row.ts","../../../../../../src/cdk/table/sticky-styler.ts","../../../../../../src/cdk/table/table-errors.ts","../../../../../../src/cdk/table/sticky-position-listener.ts","../../../../../../src/cdk/table/table.ts","../../../../../../src/cdk/table/text-column.ts","../../../../../../src/cdk/table/table-module.ts","../../../../../../src/cdk/table/public-api.ts","../../../../../../src/cdk/table/index.ts"],"sourcesContent":["/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n\r\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\r\n\r\n/** @docs-private */\r\nexport type Constructor<T> = new(...args: any[]) => T;\r\n\r\n/**\r\n * Interface for a mixin to provide a directive with a function that checks if the sticky input has\r\n * been changed since the last time the function was called. Essentially adds a dirty-check to the\r\n * sticky value.\r\n * @docs-private\r\n */\r\nexport interface CanStick {\r\n  /** Whether sticky positioning should be applied. */\r\n  sticky: boolean;\r\n\r\n  /** Whether the sticky input has changed since it was last checked. */\r\n  _hasStickyChanged: boolean;\r\n\r\n  /** Whether the sticky value has changed since this was last called. */\r\n  hasStickyChanged(): boolean;\r\n\r\n  /** Resets the dirty check for cases where the sticky state has been used without checking. */\r\n  resetStickyChanged(): void;\r\n}\r\n\r\n/** @docs-private */\r\nexport type CanStickCtor = Constructor<CanStick>;\r\n\r\n/**\r\n * Mixin to provide a directive with a function that checks if the sticky input has been\r\n * changed since the last time the function was called. Essentially adds a dirty-check to the\r\n * sticky value.\r\n * @docs-private\r\n */\r\nexport function mixinHasStickyInput<T extends Constructor<{}>>(base: T): CanStickCtor & T {\r\n  return class extends base {\r\n    /** Whether sticky positioning should be applied. */\r\n    get sticky(): boolean { return this._sticky; }\r\n    set sticky(v: boolean) {\r\n      const prevValue = this._sticky;\r\n      this._sticky = coerceBooleanProperty(v);\r\n      this._hasStickyChanged = prevValue !== this._sticky;\r\n    }\r\n    _sticky: boolean = false;\r\n\r\n    /** Whether the sticky input has changed since it was last checked. */\r\n    _hasStickyChanged: boolean = false;\r\n\r\n    /** Whether the sticky value has changed since this was last called. */\r\n    hasStickyChanged(): boolean {\r\n      const hasStickyChanged = this._hasStickyChanged;\r\n      this._hasStickyChanged = false;\r\n      return hasStickyChanged;\r\n    }\r\n\r\n    /** Resets the dirty check for cases where the sticky state has been used without checking. */\r\n    resetStickyChanged() {\r\n      this._hasStickyChanged = false;\r\n    }\r\n\r\n    constructor(...args: any[]) { super(...args); }\r\n  };\r\n}\r\n","/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n\r\nimport {InjectionToken} from '@angular/core';\r\n\r\n/**\r\n * Used to provide a table to some of the sub-components without causing a circular dependency.\r\n * @docs-private\r\n */\r\nexport const CDK_TABLE = new InjectionToken<any>('CDK_TABLE');\r\n\r\n/** Configurable options for `CdkTextColumn`. */\r\nexport interface TextColumnOptions<T> {\r\n  /**\r\n   * Default function that provides the header text based on the column name if a header\r\n   * text is not provided.\r\n   */\r\n  defaultHeaderTextTransform?: (name: string) => string;\r\n\r\n  /** Default data accessor to use if one is not provided. */\r\n  defaultDataAccessor?: (data: T, name: string) => string;\r\n}\r\n\r\n/** Injection token that can be used to specify the text column options. */\r\nexport const TEXT_COLUMN_OPTIONS =\r\n    new InjectionToken<TextColumnOptions<any>>('text-column-options');\r\n","/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n\r\nimport {BooleanInput, coerceBooleanProperty} from '@angular/cdk/coercion';\r\nimport {\r\n  ContentChild,\r\n  Directive,\r\n  ElementRef,\r\n  Input,\r\n  TemplateRef,\r\n  Inject,\r\n  Optional,\r\n} from '@angular/core';\r\nimport {CanStick, CanStickCtor, mixinHasStickyInput} from './can-stick';\r\nimport {CDK_TABLE} from './tokens';\r\n\r\n\r\n/** Base interface for a cell definition. Captures a column's cell template definition. */\r\nexport interface CellDef {\r\n  template: TemplateRef<any>;\r\n}\r\n\r\n/**\r\n * Cell definition for a CDK table.\r\n * Captures the template of a column's data row cell as well as cell-specific properties.\r\n */\r\n@Directive({selector: '[cdkCellDef]'})\r\nexport class CdkCellDef implements CellDef {\r\n  constructor(/** @docs-private */ public template: TemplateRef<any>) {}\r\n}\r\n\r\n/**\r\n * Header cell definition for a CDK table.\r\n * Captures the template of a column's header cell and as well as cell-specific properties.\r\n */\r\n@Directive({selector: '[cdkHeaderCellDef]'})\r\nexport class CdkHeaderCellDef implements CellDef {\r\n  constructor(/** @docs-private */ public template: TemplateRef<any>) {}\r\n}\r\n\r\n/**\r\n * Footer cell definition for a CDK table.\r\n * Captures the template of a column's footer cell and as well as cell-specific properties.\r\n */\r\n@Directive({selector: '[cdkFooterCellDef]'})\r\nexport class CdkFooterCellDef implements CellDef {\r\n  constructor(/** @docs-private */ public template: TemplateRef<any>) {}\r\n}\r\n\r\n// Boilerplate for applying mixins to CdkColumnDef.\r\n/** @docs-private */\r\nclass CdkColumnDefBase {}\r\nconst _CdkColumnDefBase: CanStickCtor&typeof CdkColumnDefBase =\r\n    mixinHasStickyInput(CdkColumnDefBase);\r\n\r\n/**\r\n * Column definition for the CDK table.\r\n * Defines a set of cells available for a table column.\r\n */\r\n@Directive({\r\n  selector: '[cdkColumnDef]',\r\n  inputs: ['sticky'],\r\n  providers: [{provide: 'MAT_SORT_HEADER_COLUMN_DEF', useExisting: CdkColumnDef}],\r\n})\r\nexport class CdkColumnDef extends _CdkColumnDefBase implements CanStick {\r\n  /** Unique name for this column. */\r\n  @Input('cdkColumnDef')\r\n  get name(): string { return this._name; }\r\n  set name(name: string) { this._setNameInput(name); }\r\n  protected _name: string;\r\n\r\n  /**\r\n   * Whether this column should be sticky positioned on the end of the row. Should make sure\r\n   * that it mimics the `CanStick` mixin such that `_hasStickyChanged` is set to true if the value\r\n   * has been changed.\r\n   */\r\n  @Input('stickyEnd')\r\n  get stickyEnd(): boolean {\r\n    return this._stickyEnd;\r\n  }\r\n  set stickyEnd(v: boolean) {\r\n    const prevValue = this._stickyEnd;\r\n    this._stickyEnd = coerceBooleanProperty(v);\r\n    this._hasStickyChanged = prevValue !== this._stickyEnd;\r\n  }\r\n  _stickyEnd: boolean = false;\r\n\r\n  /** @docs-private */\r\n  @ContentChild(CdkCellDef) cell: CdkCellDef;\r\n\r\n  /** @docs-private */\r\n  @ContentChild(CdkHeaderCellDef) headerCell: CdkHeaderCellDef;\r\n\r\n  /** @docs-private */\r\n  @ContentChild(CdkFooterCellDef) footerCell: CdkFooterCellDef;\r\n\r\n  /**\r\n   * Transformed version of the column name that can be used as part of a CSS classname. Excludes\r\n   * all non-alphanumeric characters and the special characters '-' and '_'. Any characters that\r\n   * do not match are replaced by the '-' character.\r\n   */\r\n  cssClassFriendlyName: string;\r\n\r\n  /**\r\n   * Class name for cells in this column.\r\n   * @docs-private\r\n   */\r\n  _columnCssClassName: string[];\r\n\r\n  constructor(@Inject(CDK_TABLE) @Optional() public _table?: any) {\r\n    super();\r\n  }\r\n\r\n  /**\r\n   * Overridable method that sets the css classes that will be added to every cell in this\r\n   * column.\r\n   * In the future, columnCssClassName will change from type string[] to string and this\r\n   * will set a single string value.\r\n   * @docs-private\r\n   */\r\n  protected _updateColumnCssClassName() {\r\n    this._columnCssClassName = [`cdk-column-${this.cssClassFriendlyName}`];\r\n  }\r\n\r\n  /**\r\n   * This has been extracted to a util because of TS 4 and VE.\r\n   * View Engine doesn't support property rename inheritance.\r\n   * TS 4.0 doesn't allow properties to override accessors or vice-versa.\r\n   * @docs-private\r\n   */\r\n  protected _setNameInput(value: string) {\r\n    // If the directive is set without a name (updated programmatically), then this setter will\r\n    // trigger with an empty string and should not overwrite the programmatically set value.\r\n    if (value) {\r\n      this._name = value;\r\n      this.cssClassFriendlyName = value.replace(/[^a-z0-9_-]/ig, '-');\r\n      this._updateColumnCssClassName();\r\n    }\r\n  }\r\n\r\n  static ngAcceptInputType_sticky: BooleanInput;\r\n  static ngAcceptInputType_stickyEnd: BooleanInput;\r\n}\r\n\r\n/** Base class for the cells. Adds a CSS classname that identifies the column it renders in. */\r\nexport class BaseCdkCell {\r\n  constructor(columnDef: CdkColumnDef, elementRef: ElementRef) {\r\n    // If IE 11 is dropped before we switch to setting a single class name, change to multi param\r\n    // with destructuring.\r\n    const classList = elementRef.nativeElement.classList;\r\n    for (const className of columnDef._columnCssClassName) {\r\n      classList.add(className);\r\n    }\r\n  }\r\n}\r\n\r\n/** Header cell template container that adds the right classes and role. */\r\n@Directive({\r\n  selector: 'cdk-header-cell, th[cdk-header-cell]',\r\n  host: {\r\n    'class': 'cdk-header-cell',\r\n    'role': 'columnheader',\r\n  },\r\n})\r\nexport class CdkHeaderCell extends BaseCdkCell {\r\n  constructor(columnDef: CdkColumnDef, elementRef: ElementRef) {\r\n    super(columnDef, elementRef);\r\n  }\r\n}\r\n\r\n/** Footer cell template container that adds the right classes and role. */\r\n@Directive({\r\n  selector: 'cdk-footer-cell, td[cdk-footer-cell]',\r\n  host: {\r\n    'class': 'cdk-footer-cell',\r\n    'role': 'gridcell',\r\n  },\r\n})\r\nexport class CdkFooterCell extends BaseCdkCell {\r\n  constructor(columnDef: CdkColumnDef, elementRef: ElementRef) {\r\n    super(columnDef, elementRef);\r\n  }\r\n}\r\n\r\n/** Cell template container that adds the right classes and role. */\r\n@Directive({\r\n  selector: 'cdk-cell, td[cdk-cell]',\r\n  host: {\r\n    'class': 'cdk-cell',\r\n    'role': 'gridcell',\r\n  },\r\n})\r\nexport class CdkCell extends BaseCdkCell {\r\n  constructor(columnDef: CdkColumnDef, elementRef: ElementRef) {\r\n    super(columnDef, elementRef);\r\n  }\r\n}\r\n","/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n\r\nimport {Injectable, NgZone, OnDestroy, InjectionToken} from '@angular/core';\r\nimport {from, Subject} from 'rxjs';\r\nimport {take, takeUntil} from 'rxjs/operators';\r\n\r\n/**\r\n * @docs-private\r\n */\r\nexport class _Schedule {\r\n  tasks: (() => unknown)[] = [];\r\n  endTasks: (() => unknown)[] = [];\r\n}\r\n\r\n/** Injection token used to provide a coalesced style scheduler. */\r\nexport const _COALESCED_STYLE_SCHEDULER =\r\n    new InjectionToken<_CoalescedStyleScheduler>('_COALESCED_STYLE_SCHEDULER');\r\n\r\n/**\r\n * Allows grouping up CSSDom mutations after the current execution context.\r\n * This can significantly improve performance when separate consecutive functions are\r\n * reading from the CSSDom and then mutating it.\r\n *\r\n * @docs-private\r\n */\r\n@Injectable()\r\nexport class _CoalescedStyleScheduler implements OnDestroy {\r\n  private _currentSchedule: _Schedule|null = null;\r\n  private readonly _destroyed = new Subject<void>();\r\n\r\n  constructor(private readonly _ngZone: NgZone) {}\r\n\r\n  /**\r\n   * Schedules the specified task to run at the end of the current VM turn.\r\n   */\r\n  schedule(task: () => unknown): void {\r\n    this._createScheduleIfNeeded();\r\n\r\n    this._currentSchedule!.tasks.push(task);\r\n  }\r\n\r\n  /**\r\n   * Schedules the specified task to run after other scheduled tasks at the end of the current\r\n   * VM turn.\r\n   */\r\n  scheduleEnd(task: () => unknown): void {\r\n    this._createScheduleIfNeeded();\r\n\r\n    this._currentSchedule!.endTasks.push(task);\r\n  }\r\n\r\n  /** Prevent any further tasks from running. */\r\n  ngOnDestroy() {\r\n    this._destroyed.next();\r\n    this._destroyed.complete();\r\n  }\r\n\r\n  private _createScheduleIfNeeded() {\r\n    if (this._currentSchedule) { return; }\r\n\r\n    this._currentSchedule = new _Schedule();\r\n\r\n    this._getScheduleObservable().pipe(\r\n        takeUntil(this._destroyed),\r\n    ).subscribe(() => {\r\n      while (this._currentSchedule!.tasks.length || this._currentSchedule!.endTasks.length) {\r\n        const schedule = this._currentSchedule!;\r\n\r\n        // Capture new tasks scheduled by the current set of tasks.\r\n        this._currentSchedule = new _Schedule();\r\n\r\n        for (const task of schedule.tasks) {\r\n          task();\r\n        }\r\n\r\n        for (const task of schedule.endTasks) {\r\n          task();\r\n        }\r\n      }\r\n\r\n      this._currentSchedule = null;\r\n    });\r\n  }\r\n\r\n  private _getScheduleObservable() {\r\n    // Use onStable when in the context of an ongoing change detection cycle so that we\r\n    // do not accidentally trigger additional cycles.\r\n    return this._ngZone.isStable ?\r\n        from(Promise.resolve(undefined)) :\r\n        this._ngZone.onStable.pipe(take(1));\r\n  }\r\n}\r\n","/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n\r\nimport {BooleanInput} from '@angular/cdk/coercion';\r\nimport {\r\n  ChangeDetectionStrategy,\r\n  Component,\r\n  Directive,\r\n  IterableChanges,\r\n  IterableDiffer,\r\n  IterableDiffers,\r\n  OnChanges,\r\n  OnDestroy,\r\n  SimpleChanges,\r\n  TemplateRef,\r\n  ViewContainerRef,\r\n  ViewEncapsulation,\r\n  Inject,\r\n  Optional\r\n} from '@angular/core';\r\nimport {CanStick, CanStickCtor, mixinHasStickyInput} from './can-stick';\r\nimport {CdkCellDef, CdkColumnDef} from './cell';\r\nimport {CDK_TABLE} from './tokens';\r\n\r\n/**\r\n * The row template that can be used by the mat-table. Should not be used outside of the\r\n * material library.\r\n */\r\nexport const CDK_ROW_TEMPLATE = `<ng-container cdkCellOutlet></ng-container>`;\r\n\r\n/**\r\n * Base class for the CdkHeaderRowDef and CdkRowDef that handles checking their columns inputs\r\n * for changes and notifying the table.\r\n */\r\n@Directive()\r\nexport abstract class BaseRowDef implements OnChanges {\r\n  /** The columns to be displayed on this row. */\r\n  columns: Iterable<string>;\r\n\r\n  /** Differ used to check if any changes were made to the columns. */\r\n  protected _columnsDiffer: IterableDiffer<any>;\r\n\r\n  constructor(\r\n      /** @docs-private */ public template: TemplateRef<any>, protected _differs: IterableDiffers) {\r\n  }\r\n\r\n  ngOnChanges(changes: SimpleChanges): void {\r\n    // Create a new columns differ if one does not yet exist. Initialize it based on initial value\r\n    // of the columns property or an empty array if none is provided.\r\n    if (!this._columnsDiffer) {\r\n      const columns = (changes['columns'] && changes['columns'].currentValue) || [];\r\n      this._columnsDiffer = this._differs.find(columns).create();\r\n      this._columnsDiffer.diff(columns);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Returns the difference between the current columns and the columns from the last diff, or null\r\n   * if there is no difference.\r\n   */\r\n  getColumnsDiff(): IterableChanges<any>|null {\r\n    return this._columnsDiffer.diff(this.columns);\r\n  }\r\n\r\n  /** Gets this row def's relevant cell template from the provided column def. */\r\n  extractCellTemplate(column: CdkColumnDef): TemplateRef<any> {\r\n    if (this instanceof CdkHeaderRowDef) {\r\n      return column.headerCell.template;\r\n    }\r\n    if (this instanceof CdkFooterRowDef) {\r\n      return column.footerCell.template;\r\n    } else {\r\n      return column.cell.template;\r\n    }\r\n  }\r\n}\r\n\r\n// Boilerplate for applying mixins to CdkHeaderRowDef.\r\n/** @docs-private */\r\nclass CdkHeaderRowDefBase extends BaseRowDef {}\r\nconst _CdkHeaderRowDefBase: CanStickCtor&typeof CdkHeaderRowDefBase =\r\n    mixinHasStickyInput(CdkHeaderRowDefBase);\r\n\r\n/**\r\n * Header row definition for the CDK table.\r\n * Captures the header row's template and other header properties such as the columns to display.\r\n */\r\n@Directive({\r\n  selector: '[cdkHeaderRowDef]',\r\n  inputs: ['columns: cdkHeaderRowDef', 'sticky: cdkHeaderRowDefSticky'],\r\n})\r\nexport class CdkHeaderRowDef extends _CdkHeaderRowDefBase implements CanStick, OnChanges {\r\n  constructor(\r\n    template: TemplateRef<any>,\r\n    _differs: IterableDiffers,\r\n    @Inject(CDK_TABLE) @Optional() public _table?: any) {\r\n    super(template, _differs);\r\n  }\r\n\r\n  // Prerender fails to recognize that ngOnChanges in a part of this class through inheritance.\r\n  // Explicitly define it so that the method is called as part of the Angular lifecycle.\r\n  ngOnChanges(changes: SimpleChanges): void {\r\n    super.ngOnChanges(changes);\r\n  }\r\n\r\n  static ngAcceptInputType_sticky: BooleanInput;\r\n}\r\n\r\n// Boilerplate for applying mixins to CdkFooterRowDef.\r\n/** @docs-private */\r\nclass CdkFooterRowDefBase extends BaseRowDef {}\r\nconst _CdkFooterRowDefBase: CanStickCtor&typeof CdkFooterRowDefBase =\r\n    mixinHasStickyInput(CdkFooterRowDefBase);\r\n\r\n/**\r\n * Footer row definition for the CDK table.\r\n * Captures the footer row's template and other footer properties such as the columns to display.\r\n */\r\n@Directive({\r\n  selector: '[cdkFooterRowDef]',\r\n  inputs: ['columns: cdkFooterRowDef', 'sticky: cdkFooterRowDefSticky'],\r\n})\r\nexport class CdkFooterRowDef extends _CdkFooterRowDefBase implements CanStick, OnChanges {\r\n  constructor(\r\n    template: TemplateRef<any>,\r\n    _differs: IterableDiffers,\r\n    @Inject(CDK_TABLE) @Optional() public _table?: any) {\r\n    super(template, _differs);\r\n  }\r\n\r\n  // Prerender fails to recognize that ngOnChanges in a part of this class through inheritance.\r\n  // Explicitly define it so that the method is called as part of the Angular lifecycle.\r\n  ngOnChanges(changes: SimpleChanges): void {\r\n    super.ngOnChanges(changes);\r\n  }\r\n\r\n  static ngAcceptInputType_sticky: BooleanInput;\r\n}\r\n\r\n/**\r\n * Data row definition for the CDK table.\r\n * Captures the header row's template and other row properties such as the columns to display and\r\n * a when predicate that describes when this row should be used.\r\n */\r\n@Directive({\r\n  selector: '[cdkRowDef]',\r\n  inputs: ['columns: cdkRowDefColumns', 'when: cdkRowDefWhen'],\r\n})\r\nexport class CdkRowDef<T> extends BaseRowDef {\r\n  /**\r\n   * Function that should return true if this row template should be used for the provided index\r\n   * and row data. If left undefined, this row will be considered the default row template to use\r\n   * when no other when functions return true for the data.\r\n   * For every row, there must be at least one when function that passes or an undefined to default.\r\n   */\r\n  when: (index: number, rowData: T) => boolean;\r\n\r\n  // TODO(andrewseguin): Add an input for providing a switch function to determine\r\n  //   if this template should be used.\r\n  constructor(\r\n    template: TemplateRef<any>,\r\n    _differs: IterableDiffers,\r\n    @Inject(CDK_TABLE) @Optional() public _table?: any) {\r\n    super(template, _differs);\r\n  }\r\n}\r\n\r\n/** Context provided to the row cells when `multiTemplateDataRows` is false */\r\nexport interface CdkCellOutletRowContext<T> {\r\n  /** Data for the row that this cell is located within. */\r\n  $implicit?: T;\r\n\r\n  /** Index of the data object in the provided data array. */\r\n  index?: number;\r\n\r\n  /** Length of the number of total rows. */\r\n  count?: number;\r\n\r\n  /** True if this cell is contained in the first row. */\r\n  first?: boolean;\r\n\r\n  /** True if this cell is contained in the last row. */\r\n  last?: boolean;\r\n\r\n  /** True if this cell is contained in a row with an even-numbered index. */\r\n  even?: boolean;\r\n\r\n  /** True if this cell is contained in a row with an odd-numbered index. */\r\n  odd?: boolean;\r\n}\r\n\r\n/**\r\n * Context provided to the row cells when `multiTemplateDataRows` is true. This context is the same\r\n * as CdkCellOutletRowContext except that the single `index` value is replaced by `dataIndex` and\r\n * `renderIndex`.\r\n */\r\nexport interface CdkCellOutletMultiRowContext<T> {\r\n  /** Data for the row that this cell is located within. */\r\n  $implicit?: T;\r\n\r\n  /** Index of the data object in the provided data array. */\r\n  dataIndex?: number;\r\n\r\n  /** Index location of the rendered row that this cell is located within. */\r\n  renderIndex?: number;\r\n\r\n  /** Length of the number of total rows. */\r\n  count?: number;\r\n\r\n  /** True if this cell is contained in the first row. */\r\n  first?: boolean;\r\n\r\n  /** True if this cell is contained in the last row. */\r\n  last?: boolean;\r\n\r\n  /** True if this cell is contained in a row with an even-numbered index. */\r\n  even?: boolean;\r\n\r\n  /** True if this cell is contained in a row with an odd-numbered index. */\r\n  odd?: boolean;\r\n}\r\n\r\n/**\r\n * Outlet for rendering cells inside of a row or header row.\r\n * @docs-private\r\n */\r\n@Directive({selector: '[cdkCellOutlet]'})\r\nexport class CdkCellOutlet implements OnDestroy {\r\n  /** The ordered list of cells to render within this outlet's view container */\r\n  cells: CdkCellDef[];\r\n\r\n  /** The data context to be provided to each cell */\r\n  context: any;\r\n\r\n  /**\r\n   * Static property containing the latest constructed instance of this class.\r\n   * Used by the CDK table when each CdkHeaderRow and CdkRow component is created using\r\n   * createEmbeddedView. After one of these components are created, this property will provide\r\n   * a handle to provide that component's cells and context. After init, the CdkCellOutlet will\r\n   * construct the cells with the provided context.\r\n   */\r\n  static mostRecentCellOutlet: CdkCellOutlet|null = null;\r\n\r\n  constructor(public _viewContainer: ViewContainerRef) {\r\n    CdkCellOutlet.mostRecentCellOutlet = this;\r\n  }\r\n\r\n  ngOnDestroy() {\r\n    // If this was the last outlet being rendered in the view, remove the reference\r\n    // from the static property after it has been destroyed to avoid leaking memory.\r\n    if (CdkCellOutlet.mostRecentCellOutlet === this) {\r\n      CdkCellOutlet.mostRecentCellOutlet = null;\r\n    }\r\n  }\r\n}\r\n\r\n/** Header template container that contains the cell outlet. Adds the right class and role. */\r\n@Component({\r\n  selector: 'cdk-header-row, tr[cdk-header-row]',\r\n  template: CDK_ROW_TEMPLATE,\r\n  host: {\r\n    'class': 'cdk-header-row',\r\n    'role': 'row',\r\n  },\r\n  // See note on CdkTable for explanation on why this uses the default change detection strategy.\r\n  // tslint:disable-next-line:validate-decorators\r\n  changeDetection: ChangeDetectionStrategy.Default,\r\n  encapsulation: ViewEncapsulation.None,\r\n})\r\nexport class CdkHeaderRow {\r\n}\r\n\r\n\r\n/** Footer template container that contains the cell outlet. Adds the right class and role. */\r\n@Component({\r\n  selector: 'cdk-footer-row, tr[cdk-footer-row]',\r\n  template: CDK_ROW_TEMPLATE,\r\n  host: {\r\n    'class': 'cdk-footer-row',\r\n    'role': 'row',\r\n  },\r\n  // See note on CdkTable for explanation on why this uses the default change detection strategy.\r\n  // tslint:disable-next-line:validate-decorators\r\n  changeDetection: ChangeDetectionStrategy.Default,\r\n  encapsulation: ViewEncapsulation.None,\r\n})\r\nexport class CdkFooterRow {\r\n}\r\n\r\n/** Data row template container that contains the cell outlet. Adds the right class and role. */\r\n@Component({\r\n  selector: 'cdk-row, tr[cdk-row]',\r\n  template: CDK_ROW_TEMPLATE,\r\n  host: {\r\n    'class': 'cdk-row',\r\n    'role': 'row',\r\n  },\r\n  // See note on CdkTable for explanation on why this uses the default change detection strategy.\r\n  // tslint:disable-next-line:validate-decorators\r\n  changeDetection: ChangeDetectionStrategy.Default,\r\n  encapsulation: ViewEncapsulation.None,\r\n})\r\nexport class CdkRow {\r\n}\r\n\r\n/** Row that can be used to display a message when no data is shown in the table. */\r\n@Directive({\r\n  selector: 'ng-template[cdkNoDataRow]'\r\n})\r\nexport class CdkNoDataRow {\r\n  constructor(public templateRef: TemplateRef<any>) {}\r\n}\r\n","/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n\r\n/**\r\n * Directions that can be used when setting sticky positioning.\r\n * @docs-private\r\n */\r\nimport {Direction} from '@angular/cdk/bidi';\r\nimport {_CoalescedStyleScheduler} from './coalesced-style-scheduler';\r\nimport {StickyPositioningListener} from './sticky-position-listener';\r\n\r\nexport type StickyDirection = 'top' | 'bottom' | 'left' | 'right';\r\n\r\n/**\r\n * List of all possible directions that can be used for sticky positioning.\r\n * @docs-private\r\n */\r\nexport const STICKY_DIRECTIONS: StickyDirection[] = ['top', 'bottom', 'left', 'right'];\r\n\r\n\r\n/**\r\n * Applies and removes sticky positioning styles to the `CdkTable` rows and columns cells.\r\n * @docs-private\r\n */\r\nexport class StickyStyler {\r\n  private _cachedCellWidths: number[] = [];\r\n  private readonly _borderCellCss: Readonly<{[d in StickyDirection]: string}>;\r\n\r\n  /**\r\n   * @param _isNativeHtmlTable Whether the sticky logic should be based on a table\r\n   *     that uses the native `<table>` element.\r\n   * @param _stickCellCss The CSS class that will be applied to every row/cell that has\r\n   *     sticky positioning applied.\r\n   * @param direction The directionality context of the table (ltr/rtl); affects column positioning\r\n   *     by reversing left/right positions.\r\n   * @param _isBrowser Whether the table is currently being rendered on the server or the client.\r\n   * @param _needsPositionStickyOnElement Whether we need to specify position: sticky on cells\r\n   *     using inline styles. If false, it is assumed that position: sticky is included in\r\n   *     the component stylesheet for _stickCellCss.\r\n   * @param _positionListener A listener that is notified of changes to sticky rows/columns\r\n   *     and their dimensions.\r\n   */\r\n  constructor(private _isNativeHtmlTable: boolean,\r\n              private _stickCellCss: string,\r\n              public direction: Direction,\r\n              /**\r\n               * @deprecated `_coalescedStyleScheduler` parameter to become required.\r\n               * @breaking-change 11.0.0\r\n               */\r\n              private _coalescedStyleScheduler?: _CoalescedStyleScheduler,\r\n              private _isBrowser = true,\r\n              private readonly _needsPositionStickyOnElement = true,\r\n              private readonly _positionListener?: StickyPositioningListener) {\r\n    this._borderCellCss = {\r\n      'top': `${_stickCellCss}-border-elem-top`,\r\n      'bottom': `${_stickCellCss}-border-elem-bottom`,\r\n      'left': `${_stickCellCss}-border-elem-left`,\r\n      'right': `${_stickCellCss}-border-elem-right`,\r\n    };\r\n  }\r\n\r\n  /**\r\n   * Clears the sticky positioning styles from the row and its cells by resetting the `position`\r\n   * style, setting the zIndex to 0, and unsetting each provided sticky direction.\r\n   * @param rows The list of rows that should be cleared from sticking in the provided directions\r\n   * @param stickyDirections The directions that should no longer be set as sticky on the rows.\r\n   */\r\n  clearStickyPositioning(rows: HTMLElement[], stickyDirections: StickyDirection[]) {\r\n    const elementsToClear: HTMLElement[] = [];\r\n    for (const row of rows) {\r\n      // If the row isn't an element (e.g. if it's an `ng-container`),\r\n      // it won't have inline styles or `children` so we skip it.\r\n      if (row.nodeType !== row.ELEMENT_NODE) {\r\n        continue;\r\n      }\r\n\r\n      elementsToClear.push(row);\r\n      for (let i = 0; i < row.children.length; i++) {\r\n        elementsToClear.push(row.children[i] as HTMLElement);\r\n      }\r\n    }\r\n\r\n    // Coalesce with sticky row/column updates (and potentially other changes like column resize).\r\n    this._scheduleStyleChanges(() => {\r\n      for (const element of elementsToClear) {\r\n        this._removeStickyStyle(element, stickyDirections);\r\n      }\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Applies sticky left and right positions to the cells of each row according to the sticky\r\n   * states of the rendered column definitions.\r\n   * @param rows The rows that should have its set of cells stuck according to the sticky states.\r\n   * @param stickyStartStates A list of boolean states where each state represents whether the cell\r\n   *     in this index position should be stuck to the start of the row.\r\n   * @param stickyEndStates A list of boolean states where each state represents whether the cell\r\n   *     in this index position should be stuck to the end of the row.\r\n   * @param recalculateCellWidths Whether the sticky styler should recalculate the width of each\r\n   *     column cell. If `false` cached widths will be used instead.\r\n   */\r\n  updateStickyColumns(\r\n      rows: HTMLElement[], stickyStartStates: boolean[], stickyEndStates: boolean[],\r\n      recalculateCellWidths = true) {\r\n    if (!rows.length || !this._isBrowser || !(stickyStartStates.some(state => state) ||\r\n        stickyEndStates.some(state => state))) {\r\n      if (this._positionListener) {\r\n        this._positionListener.stickyColumnsUpdated({sizes: []});\r\n        this._positionListener.stickyEndColumnsUpdated({sizes: []});\r\n      }\r\n\r\n      return;\r\n    }\r\n\r\n    const firstRow = rows[0];\r\n    const numCells = firstRow.children.length;\r\n    const cellWidths: number[] = this._getCellWidths(firstRow, recalculateCellWidths);\r\n\r\n    const startPositions = this._getStickyStartColumnPositions(cellWidths, stickyStartStates);\r\n    const endPositions = this._getStickyEndColumnPositions(cellWidths, stickyEndStates);\r\n\r\n    const lastStickyStart = stickyStartStates.lastIndexOf(true);\r\n    const firstStickyEnd = stickyEndStates.indexOf(true);\r\n\r\n    // Coalesce with sticky row updates (and potentially other changes like column resize).\r\n    this._scheduleStyleChanges(() => {\r\n      const isRtl = this.direction === 'rtl';\r\n      const start = isRtl ? 'right' : 'left';\r\n      const end = isRtl ? 'left' : 'right';\r\n\r\n      for (const row of rows) {\r\n        for (let i = 0; i < numCells; i++) {\r\n          const cell = row.children[i] as HTMLElement;\r\n          if (stickyStartStates[i]) {\r\n            this._addStickyStyle(cell, start, startPositions[i], i === lastStickyStart);\r\n          }\r\n\r\n          if (stickyEndStates[i]) {\r\n            this._addStickyStyle(cell, end, endPositions[i], i === firstStickyEnd);\r\n          }\r\n        }\r\n      }\r\n\r\n      if (this._positionListener) {\r\n        this._positionListener.stickyColumnsUpdated({\r\n          sizes: lastStickyStart === -1 ?\r\n            [] :\r\n            cellWidths\r\n                .slice(0, lastStickyStart + 1)\r\n                .map((width, index) => stickyStartStates[index] ? width : null)\r\n        });\r\n        this._positionListener.stickyEndColumnsUpdated({\r\n          sizes: firstStickyEnd === -1 ?\r\n            [] :\r\n            cellWidths\r\n                .slice(firstStickyEnd)\r\n                .map((width, index) => stickyEndStates[index + firstStickyEnd] ? width : null)\r\n                .reverse()\r\n        });\r\n      }\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Applies sticky positioning to the row's cells if using the native table layout, and to the\r\n   * row itself otherwise.\r\n   * @param rowsToStick The list of rows that should be stuck according to their corresponding\r\n   *     sticky state and to the provided top or bottom position.\r\n   * @param stickyStates A list of boolean states where each state represents whether the row\r\n   *     should be stuck in the particular top or bottom position.\r\n   * @param position The position direction in which the row should be stuck if that row should be\r\n   *     sticky.\r\n   *\r\n   */\r\n  stickRows(rowsToStick: HTMLElement[], stickyStates: boolean[], position: 'top' | 'bottom') {\r\n    // Since we can't measure the rows on the server, we can't stick the rows properly.\r\n    if (!this._isBrowser) {\r\n      return;\r\n    }\r\n\r\n    // If positioning the rows to the bottom, reverse their order when evaluating the sticky\r\n    // position such that the last row stuck will be \"bottom: 0px\" and so on. Note that the\r\n    // sticky states need to be reversed as well.\r\n    const rows = position === 'bottom' ? rowsToStick.slice().reverse() : rowsToStick;\r\n    const states = position === 'bottom' ? stickyStates.slice().reverse() : stickyStates;\r\n\r\n    // Measure row heights all at once before adding sticky styles to reduce layout thrashing.\r\n    const stickyOffsets: number[] = [];\r\n    const stickyCellHeights: (number|undefined)[] = [];\r\n    const elementsToStick: HTMLElement[][] = [];\r\n    for (let rowIndex = 0, stickyOffset = 0; rowIndex < rows.length; rowIndex++) {\r\n      stickyOffsets[rowIndex] = stickyOffset;\r\n\r\n      if (!states[rowIndex]) {\r\n        continue;\r\n      }\r\n\r\n      const row = rows[rowIndex];\r\n      elementsToStick[rowIndex] = this._isNativeHtmlTable ?\r\n          Array.from(row.children) as HTMLElement[] : [row];\r\n\r\n      const height = row.getBoundingClientRect().height;\r\n      stickyOffset += height;\r\n      stickyCellHeights[rowIndex] = height;\r\n    }\r\n\r\n    const borderedRowIndex = states.lastIndexOf(true);\r\n\r\n    // Coalesce with other sticky row updates (top/bottom), sticky columns updates\r\n    // (and potentially other changes like column resize).\r\n    this._scheduleStyleChanges(() => {\r\n      for (let rowIndex = 0; rowIndex < rows.length; rowIndex++) {\r\n        if (!states[rowIndex]) {\r\n          continue;\r\n        }\r\n\r\n        const offset = stickyOffsets[rowIndex];\r\n        const isBorderedRowIndex = rowIndex === borderedRowIndex;\r\n        for (const element of elementsToStick[rowIndex]) {\r\n          this._addStickyStyle(element, position, offset, isBorderedRowIndex);\r\n        }\r\n      }\r\n\r\n      if (position === 'top') {\r\n        this._positionListener?.stickyHeaderRowsUpdated(\r\n            {sizes: stickyCellHeights, elements: elementsToStick});\r\n      } else {\r\n        this._positionListener?.stickyFooterRowsUpdated(\r\n            {sizes: stickyCellHeights, elements: elementsToStick});\r\n      }\r\n    });\r\n  }\r\n\r\n  /**\r\n   * When using the native table in Safari, sticky footer cells do not stick. The only way to stick\r\n   * footer rows is to apply sticky styling to the tfoot container. This should only be done if\r\n   * all footer rows are sticky. If not all footer rows are sticky, remove sticky positioning from\r\n   * the tfoot element.\r\n   */\r\n  updateStickyFooterContainer(tableElement: Element, stickyStates: boolean[]) {\r\n    if (!this._isNativeHtmlTable) {\r\n      return;\r\n    }\r\n\r\n    const tfoot = tableElement.querySelector('tfoot')!;\r\n\r\n    // Coalesce with other sticky updates (and potentially other changes like column resize).\r\n    this._scheduleStyleChanges(() => {\r\n      if (stickyStates.some(state => !state)) {\r\n        this._removeStickyStyle(tfoot, ['bottom']);\r\n      } else {\r\n        this._addStickyStyle(tfoot, 'bottom', 0, false);\r\n      }\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Removes the sticky style on the element by removing the sticky cell CSS class, re-evaluating\r\n   * the zIndex, removing each of the provided sticky directions, and removing the\r\n   * sticky position if there are no more directions.\r\n   */\r\n  _removeStickyStyle(element: HTMLElement, stickyDirections: StickyDirection[]) {\r\n    for (const dir of stickyDirections) {\r\n      element.style[dir] = '';\r\n      element.classList.remove(this._borderCellCss[dir]);\r\n    }\r\n\r\n    // If the element no longer has any more sticky directions, remove sticky positioning and\r\n    // the sticky CSS class.\r\n    // Short-circuit checking element.style[dir] for stickyDirections as they\r\n    // were already removed above.\r\n    const hasDirection = STICKY_DIRECTIONS.some(dir =>\r\n        stickyDirections.indexOf(dir) === -1 && element.style[dir]);\r\n    if (hasDirection) {\r\n      element.style.zIndex = this._getCalculatedZIndex(element);\r\n    } else {\r\n      // When not hasDirection, _getCalculatedZIndex will always return ''.\r\n      element.style.zIndex = '';\r\n      if (this._needsPositionStickyOnElement) {\r\n        element.style.position = '';\r\n      }\r\n      element.classList.remove(this._stickCellCss);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Adds the sticky styling to the element by adding the sticky style class, changing position\r\n   * to be sticky (and -webkit-sticky), setting the appropriate zIndex, and adding a sticky\r\n   * direction and value.\r\n   */\r\n  _addStickyStyle(element: HTMLElement, dir: StickyDirection, dirValue: number,\r\n      isBorderElement: boolean) {\r\n    element.classList.add(this._stickCellCss);\r\n    if (isBorderElement) {\r\n      element.classList.add(this._borderCellCss[dir]);\r\n    }\r\n    element.style[dir] = `${dirValue}px`;\r\n    element.style.zIndex = this._getCalculatedZIndex(element);\r\n    if (this._needsPositionStickyOnElement) {\r\n      element.style.cssText += 'position: -webkit-sticky; position: sticky; ';\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Calculate what the z-index should be for the element, depending on what directions (top,\r\n   * bottom, left, right) have been set. It should be true that elements with a top direction\r\n   * should have the highest index since these are elements like a table header. If any of those\r\n   * elements are also sticky in another direction, then they should appear above other elements\r\n   * that are only sticky top (e.g. a sticky column on a sticky header). Bottom-sticky elements\r\n   * (e.g. footer rows) should then be next in the ordering such that they are below the header\r\n   * but above any non-sticky elements. Finally, left/right sticky elements (e.g. sticky columns)\r\n   * should minimally increment so that they are above non-sticky elements but below top and bottom\r\n   * elements.\r\n   */\r\n  _getCalculatedZIndex(element: HTMLElement): string {\r\n    const zIndexIncrements = {\r\n      top: 100,\r\n      bottom: 10,\r\n      left: 1,\r\n      right: 1,\r\n    };\r\n\r\n    let zIndex = 0;\r\n    // Use `Iterable` instead of `Array` because TypeScript, as of 3.6.3,\r\n    // loses the array generic type in the `for of`. But we *also* have to use `Array` because\r\n    // typescript won't iterate over an `Iterable` unless you compile with `--downlevelIteration`\r\n    for (const dir of STICKY_DIRECTIONS as Iterable<StickyDirection> & StickyDirection[]) {\r\n      if (element.style[dir]) {\r\n        zIndex += zIndexIncrements[dir];\r\n      }\r\n    }\r\n\r\n    return zIndex ? `${zIndex}` : '';\r\n  }\r\n\r\n  /** Gets the widths for each cell in the provided row. */\r\n  _getCellWidths(row: HTMLElement, recalculateCellWidths = true): number[] {\r\n    if (!recalculateCellWidths && this._cachedCellWidths.length) {\r\n      return this._cachedCellWidths;\r\n    }\r\n\r\n    const cellWidths: number[] = [];\r\n    const firstRowCells = row.children;\r\n    for (let i = 0; i < firstRowCells.length; i++) {\r\n      let cell: HTMLElement = firstRowCells[i] as HTMLElement;\r\n      cellWidths.push(cell.getBoundingClientRect().width);\r\n    }\r\n\r\n    this._cachedCellWidths = cellWidths;\r\n    return cellWidths;\r\n  }\r\n\r\n  /**\r\n   * Determines the left and right positions of each sticky column cell, which will be the\r\n   * accumulation of all sticky column cell widths to the left and right, respectively.\r\n   * Non-sticky cells do not need to have a value set since their positions will not be applied.\r\n   */\r\n  _getStickyStartColumnPositions(widths: number[], stickyStates: boolean[]): number[] {\r\n    const positions: number[] = [];\r\n    let nextPosition = 0;\r\n\r\n    for (let i = 0; i < widths.length; i++) {\r\n      if (stickyStates[i]) {\r\n        positions[i] = nextPosition;\r\n        nextPosition += widths[i];\r\n      }\r\n    }\r\n\r\n    return positions;\r\n  }\r\n\r\n  /**\r\n   * Determines the left and right positions of each sticky column cell, which will be the\r\n   * accumulation of all sticky column cell widths to the left and right, respectively.\r\n   * Non-sticky cells do not need to have a value set since their positions will not be applied.\r\n   */\r\n  _getStickyEndColumnPositions(widths: number[], stickyStates: boolean[]): number[] {\r\n    const positions: number[] = [];\r\n    let nextPosition = 0;\r\n\r\n    for (let i = widths.length; i > 0; i--) {\r\n      if (stickyStates[i]) {\r\n        positions[i] = nextPosition;\r\n        nextPosition += widths[i];\r\n      }\r\n    }\r\n\r\n    return positions;\r\n  }\r\n\r\n  /**\r\n   * Schedules styles to be applied when the style scheduler deems appropriate.\r\n   * @breaking-change 11.0.0 This method can be removed in favor of calling\r\n   * `CoalescedStyleScheduler.schedule` directly once the scheduler is a required parameter.\r\n   */\r\n  private _scheduleStyleChanges(changes: () => void) {\r\n    if (this._coalescedStyleScheduler) {\r\n      this._coalescedStyleScheduler.schedule(changes);\r\n    } else {\r\n      changes();\r\n    }\r\n  }\r\n}\r\n","/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n\r\n/**\r\n * Returns an error to be thrown when attempting to find an unexisting column.\r\n * @param id Id whose lookup failed.\r\n * @docs-private\r\n */\r\nexport function getTableUnknownColumnError(id: string) {\r\n  return Error(`Could not find column with id \"${id}\".`);\r\n}\r\n\r\n/**\r\n * Returns an error to be thrown when two column definitions have the same name.\r\n * @docs-private\r\n */\r\nexport function getTableDuplicateColumnNameError(name: string) {\r\n  return Error(`Duplicate column definition name provided: \"${name}\".`);\r\n}\r\n\r\n/**\r\n * Returns an error to be thrown when there are multiple rows that are missing a when function.\r\n * @docs-private\r\n */\r\nexport function getTableMultipleDefaultRowDefsError() {\r\n  return Error(`There can only be one default row without a when predicate function.`);\r\n}\r\n\r\n/**\r\n * Returns an error to be thrown when there are no matching row defs for a particular set of data.\r\n * @docs-private\r\n */\r\nexport function getTableMissingMatchingRowDefError(data: any) {\r\n  return Error(`Could not find a matching row definition for the` +\r\n      `provided row data: ${JSON.stringify(data)}`);\r\n}\r\n\r\n/**\r\n * Returns an error to be thrown when there is no row definitions present in the content.\r\n * @docs-private\r\n */\r\nexport function getTableMissingRowDefsError() {\r\n  return Error('Missing definitions for header, footer, and row; ' +\r\n      'cannot determine which columns should be rendered.');\r\n}\r\n\r\n/**\r\n * Returns an error to be thrown when the data source does not match the compatible types.\r\n * @docs-private\r\n */\r\nexport function getTableUnknownDataSourceError() {\r\n  return Error(`Provided data source did not match an array, Observable, or DataSource`);\r\n}\r\n\r\n/**\r\n * Returns an error to be thrown when the text column cannot find a parent table to inject.\r\n * @docs-private\r\n */\r\nexport function getTableTextColumnMissingParentTableError() {\r\n  return Error(`Text column could not find a parent table for registration.`);\r\n}\r\n\r\n/**\r\n * Returns an error to be thrown when a table text column doesn't have a name.\r\n * @docs-private\r\n */\r\nexport function getTableTextColumnMissingNameError() {\r\n  return Error(`Table text column must have a name.`);\r\n}\r\n","/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n\r\nimport {InjectionToken} from '@angular/core';\r\n\r\n/** The injection token used to specify the StickyPositioningListener. */\r\nexport const STICKY_POSITIONING_LISTENER =\r\n    new InjectionToken<StickyPositioningListener>('CDK_SPL');\r\n\r\nexport type StickySize = number|null|undefined;\r\n\r\nexport interface StickyUpdate {\r\n  elements?: ReadonlyArray<HTMLElement[]|undefined>;\r\n  sizes: StickySize[];\r\n}\r\n\r\n/**\r\n * If provided, CdkTable will call the methods below when it updates the size/\r\n * postion/etc of its sticky rows and columns.\r\n */\r\nexport interface StickyPositioningListener {\r\n  /** Called when CdkTable updates its sticky start columns. */\r\n  stickyColumnsUpdated(update: StickyUpdate): void;\r\n\r\n  /** Called when CdkTable updates its sticky end columns. */\r\n  stickyEndColumnsUpdated(update: StickyUpdate): void;\r\n\r\n  /** Called when CdkTable updates its sticky header rows. */\r\n  stickyHeaderRowsUpdated(update: StickyUpdate): void;\r\n\r\n  /** Called when CdkTable updates its sticky footer rows. */\r\n  stickyFooterRowsUpdated(update: StickyUpdate): void;\r\n}\r\n","/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n\r\nimport {Direction, Directionality} from '@angular/cdk/bidi';\r\nimport {BooleanInput, coerceBooleanProperty} from '@angular/cdk/coercion';\r\nimport {\r\n  CollectionViewer,\r\n  DataSource,\r\n  _DisposeViewRepeaterStrategy,\r\n  isDataSource,\r\n  _VIEW_REPEATER_STRATEGY,\r\n  _ViewRepeater,\r\n  _ViewRepeaterItemChange,\r\n  _ViewRepeaterItemInsertArgs,\r\n  _ViewRepeaterOperation,\r\n} from '@angular/cdk/collections';\r\nimport {Platform} from '@angular/cdk/platform';\r\nimport {ViewportRuler} from '@angular/cdk/scrolling';\r\nimport {DOCUMENT} from '@angular/common';\r\nimport {\r\n  AfterContentChecked,\r\n  Attribute,\r\n  ChangeDetectionStrategy,\r\n  ChangeDetectorRef,\r\n  Component,\r\n  ContentChild,\r\n  ContentChildren,\r\n  Directive,\r\n  ElementRef,\r\n  EmbeddedViewRef,\r\n  Inject,\r\n  Input,\r\n  IterableChangeRecord,\r\n  IterableDiffer,\r\n  IterableDiffers,\r\n  OnDestroy,\r\n  OnInit,\r\n  Optional,\r\n  QueryList,\r\n  SkipSelf,\r\n  TemplateRef,\r\n  TrackByFunction,\r\n  ViewChild,\r\n  ViewContainerRef,\r\n  ViewEncapsulation,\r\n} from '@angular/core';\r\nimport {\r\n  BehaviorSubject,\r\n  isObservable,\r\n  Observable,\r\n  of as observableOf,\r\n  Subject,\r\n  Subscription,\r\n} from 'rxjs';\r\nimport {takeUntil} from 'rxjs/operators';\r\nimport {CdkColumnDef} from './cell';\r\nimport {_CoalescedStyleScheduler, _COALESCED_STYLE_SCHEDULER} from './coalesced-style-scheduler';\r\nimport {\r\n  BaseRowDef,\r\n  CdkCellOutlet,\r\n  CdkCellOutletMultiRowContext,\r\n  CdkCellOutletRowContext,\r\n  CdkFooterRowDef,\r\n  CdkHeaderRowDef,\r\n  CdkNoDataRow,\r\n  CdkRowDef\r\n} from './row';\r\nimport {StickyStyler} from './sticky-styler';\r\nimport {\r\n  getTableDuplicateColumnNameError,\r\n  getTableMissingMatchingRowDefError,\r\n  getTableMissingRowDefsError,\r\n  getTableMultipleDefaultRowDefsError,\r\n  getTableUnknownColumnError,\r\n  getTableUnknownDataSourceError\r\n} from './table-errors';\r\nimport {STICKY_POSITIONING_LISTENER, StickyPositioningListener} from './sticky-position-listener';\r\nimport {CDK_TABLE} from './tokens';\r\n\r\n/** Interface used to provide an outlet for rows to be inserted into. */\r\nexport interface RowOutlet {\r\n  viewContainer: ViewContainerRef;\r\n}\r\n\r\n/**\r\n * Union of the types that can be set as the data source for a `CdkTable`.\r\n * @docs-private\r\n */\r\ntype CdkTableDataSourceInput<T> =\r\n    DataSource<T>|Observable<ReadonlyArray<T>|T[]>|ReadonlyArray<T>|T[];\r\n\r\n/**\r\n * Provides a handle for the table to grab the view container's ng-container to insert data rows.\r\n * @docs-private\r\n */\r\n@Directive({selector: '[rowOutlet]'})\r\nexport class DataRowOutlet implements RowOutlet {\r\n  constructor(public viewContainer: ViewContainerRef, public elementRef: ElementRef) {}\r\n}\r\n\r\n/**\r\n * Provides a handle for the table to grab the view container's ng-container to insert the header.\r\n * @docs-private\r\n */\r\n@Directive({selector: '[headerRowOutlet]'})\r\nexport class HeaderRowOutlet implements RowOutlet {\r\n  constructor(public viewContainer: ViewContainerRef, public elementRef: ElementRef) {}\r\n}\r\n\r\n/**\r\n * Provides a handle for the table to grab the view container's ng-container to insert the footer.\r\n * @docs-private\r\n */\r\n@Directive({selector: '[footerRowOutlet]'})\r\nexport class FooterRowOutlet implements RowOutlet {\r\n  constructor(public viewContainer: ViewContainerRef, public elementRef: ElementRef) {}\r\n}\r\n\r\n/**\r\n * Provides a handle for the table to grab the view\r\n * container's ng-container to insert the no data row.\r\n * @docs-private\r\n */\r\n@Directive({selector: '[noDataRowOutlet]'})\r\nexport class NoDataRowOutlet implements RowOutlet {\r\n  constructor(public viewContainer: ViewContainerRef, public elementRef: ElementRef) {}\r\n}\r\n\r\n/**\r\n * The table template that can be used by the mat-table. Should not be used outside of the\r\n * material library.\r\n * @docs-private\r\n */\r\nexport const CDK_TABLE_TEMPLATE =\r\n    // Note that according to MDN, the `caption` element has to be projected as the **first**\r\n    // element in the table. See https://developer.mozilla.org/en-US/docs/Web/HTML/Element/caption\r\n    `\r\n  <ng-content select=\"caption\"></ng-content>\r\n  <ng-content select=\"colgroup, col\"></ng-content>\r\n  <ng-container headerRowOutlet></ng-container>\r\n  <ng-container rowOutlet></ng-container>\r\n  <ng-container noDataRowOutlet></ng-container>\r\n  <ng-container footerRowOutlet></ng-container>\r\n`;\r\n\r\n/**\r\n * Interface used to conveniently type the possible context interfaces for the render row.\r\n * @docs-private\r\n */\r\nexport interface RowContext<T> extends CdkCellOutletMultiRowContext<T>,\r\n                                       CdkCellOutletRowContext<T> {}\r\n\r\n/**\r\n * Class used to conveniently type the embedded view ref for rows with a context.\r\n * @docs-private\r\n */\r\nabstract class RowViewRef<T> extends EmbeddedViewRef<RowContext<T>> {}\r\n\r\n/**\r\n * Set of properties that represents the identity of a single rendered row.\r\n *\r\n * When the table needs to determine the list of rows to render, it will do so by iterating through\r\n * each data object and evaluating its list of row templates to display (when multiTemplateDataRows\r\n * is false, there is only one template per data object). For each pair of data object and row\r\n * template, a `RenderRow` is added to the list of rows to render. If the data object and row\r\n * template pair has already been rendered, the previously used `RenderRow` is added; else a new\r\n * `RenderRow` is * created. Once the list is complete and all data objects have been itereated\r\n * through, a diff is performed to determine the changes that need to be made to the rendered rows.\r\n *\r\n * @docs-private\r\n */\r\nexport interface RenderRow<T> {\r\n  data: T;\r\n  dataIndex: number;\r\n  rowDef: CdkRowDef<T>;\r\n}\r\n\r\n/**\r\n * A data table that can render a header row, data rows, and a footer row.\r\n * Uses the dataSource input to determine the data to be rendered. The data can be provided either\r\n * as a data array, an Observable stream that emits the data array to render, or a DataSource with a\r\n * connect function that will return an Observable stream that emits the data array to render.\r\n */\r\n@Component({\r\n  selector: 'cdk-table, table[cdk-table]',\r\n  exportAs: 'cdkTable',\r\n  template: CDK_TABLE_TEMPLATE,\r\n  styleUrls: ['table.css'],\r\n  host: {\r\n    'class': 'cdk-table',\r\n    '[class.cdk-table-fixed-layout]': 'fixedLayout',\r\n  },\r\n  encapsulation: ViewEncapsulation.None,\r\n  // The \"OnPush\" status for the `MatTable` component is effectively a noop, so we are removing it.\r\n  // The view for `MatTable` consists entirely of templates declared in other views. As they are\r\n  // declared elsewhere, they are checked when their declaration points are checked.\r\n  // tslint:disable-next-line:validate-decorators\r\n  changeDetection: ChangeDetectionStrategy.Default,\r\n  providers: [\r\n    {provide: CDK_TABLE, useExisting: CdkTable},\r\n    {provide: _VIEW_REPEATER_STRATEGY, useClass: _DisposeViewRepeaterStrategy},\r\n    {provide: _COALESCED_STYLE_SCHEDULER, useClass: _CoalescedStyleScheduler},\r\n    // Prevent nested tables from seeing this table's StickyPositioningListener.\r\n    {provide: STICKY_POSITIONING_LISTENER, useValue: null},\r\n  ]\r\n})\r\nexport class CdkTable<T> implements AfterContentChecked, CollectionViewer, OnDestroy, OnInit {\r\n  private _document: Document;\r\n\r\n  /** Latest data provided by the data source. */\r\n  protected _data: T[]|ReadonlyArray<T>;\r\n\r\n  /** Subject that emits when the component has been destroyed. */\r\n  private _onDestroy = new Subject<void>();\r\n\r\n  /** List of the rendered rows as identified by their `RenderRow` object. */\r\n  private _renderRows: RenderRow<T>[];\r\n\r\n  /** Subscription that listens for the data provided by the data source. */\r\n  private _renderChangeSubscription: Subscription|null;\r\n\r\n  /**\r\n   * Map of all the user's defined columns (header, data, and footer cell template) identified by\r\n   * name. Collection populated by the column definitions gathered by `ContentChildren` as well as\r\n   * any custom column definitions added to `_customColumnDefs`.\r\n   */\r\n  private _columnDefsByName = new Map<string, CdkColumnDef>();\r\n\r\n  /**\r\n   * Set of all row definitions that can be used by this table. Populated by the rows gathered by\r\n   * using `ContentChildren` as well as any custom row definitions added to `_customRowDefs`.\r\n   */\r\n  private _rowDefs: CdkRowDef<T>[];\r\n\r\n  /**\r\n   * Set of all header row definitions that can be used by this table. Populated by the rows\r\n   * gathered by using `ContentChildren` as well as any custom row definitions added to\r\n   * `_customHeaderRowDefs`.\r\n   */\r\n  private _headerRowDefs: CdkHeaderRowDef[];\r\n\r\n  /**\r\n   * Set of all row definitions that can be used by this table. Populated by the rows gathered by\r\n   * using `ContentChildren` as well as any custom row definitions added to\r\n   * `_customFooterRowDefs`.\r\n   */\r\n  private _footerRowDefs: CdkFooterRowDef[];\r\n\r\n  /** Differ used to find the changes in the data provided by the data source. */\r\n  private _dataDiffer: IterableDiffer<RenderRow<T>>;\r\n\r\n  /** Stores the row definition that does not have a when predicate. */\r\n  private _defaultRowDef: CdkRowDef<T>|null;\r\n\r\n  /**\r\n   * Column definitions that were defined outside of the direct content children of the table.\r\n   * These will be defined when, e.g., creating a wrapper around the cdkTable that has\r\n   * column definitions as *its* content child.\r\n   */\r\n  private _customColumnDefs = new Set<CdkColumnDef>();\r\n\r\n  /**\r\n   * Data row definitions that were defined outside of the direct content children of the table.\r\n   * These will be defined when, e.g., creating a wrapper around the cdkTable that has\r\n   * built-in data rows as *its* content child.\r\n   */\r\n  private _customRowDefs = new Set<CdkRowDef<T>>();\r\n\r\n  /**\r\n   * Header row definitions that were defined outside of the direct content children of the table.\r\n   * These will be defined when, e.g., creating a wrapper around the cdkTable that has\r\n   * built-in header rows as *its* content child.\r\n   */\r\n  private _customHeaderRowDefs = new Set<CdkHeaderRowDef>();\r\n\r\n  /**\r\n   * Footer row definitions that were defined outside of the direct content children of the table.\r\n   * These will be defined when, e.g., creating a wrapper around the cdkTable that has a\r\n   * built-in footer row as *its* content child.\r\n   */\r\n  private _customFooterRowDefs = new Set<CdkFooterRowDef>();\r\n\r\n  /** No data row that was defined outside of the direct content children of the table. */\r\n  private _customNoDataRow: CdkNoDataRow | null;\r\n\r\n  /**\r\n   * Whether the header row definition has been changed. Triggers an update to the header row after\r\n   * content is checked. Initialized as true so that the table renders the initial set of rows.\r\n   */\r\n  private _headerRowDefChanged = true;\r\n\r\n  /**\r\n   * Whether the footer row definition has been changed. Triggers an update to the footer row after\r\n   * content is checked. Initialized as true so that the table renders the initial set of rows.\r\n   */\r\n  private _footerRowDefChanged = true;\r\n\r\n  /**\r\n   * Whether the sticky column styles need to be updated. Set to `true` when the visible columns\r\n   * change.\r\n   */\r\n  private _stickyColumnStylesNeedReset = true;\r\n\r\n  /**\r\n   * Whether the sticky styler should recalculate cell widths when applying sticky styles. If\r\n   * `false`, cached values will be used instead. This is only applicable to tables with\r\n   * {@link fixedLayout} enabled. For other tables, cell widths will always be recalculated.\r\n   */\r\n  private _forceRecalculateCellWidths = true;\r\n\r\n  /**\r\n   * Cache of the latest rendered `RenderRow` objects as a map for easy retrieval when constructing\r\n   * a new list of `RenderRow` objects for rendering rows. Since the new list is constructed with\r\n   * the cached `RenderRow` objects when possible, the row identity is preserved when the data\r\n   * and row template matches, which allows the `IterableDiffer` to check rows by reference\r\n   * and understand which rows are added/moved/removed.\r\n   *\r\n   * Implemented as a map of maps where the first key is the `data: T` object and the second is the\r\n   * `CdkRowDef<T>` object. With the two keys, the cache points to a `RenderRow<T>` object that\r\n   * contains an array of created pairs. The array is necessary to handle cases where the data\r\n   * array contains multiple duplicate data objects and each instantiated `RenderRow` must be\r\n   * stored.\r\n   */\r\n  private _cachedRenderRowsMap = new Map<T, WeakMap<CdkRowDef<T>, RenderRow<T>[]>>();\r\n\r\n  /** Whether the table is applied to a native `<table>`. */\r\n  protected _isNativeHtmlTable: boolean;\r\n\r\n  /**\r\n   * Utility class that is responsible for applying the appropriate sticky positioning styles to\r\n   * the table's rows and cells.\r\n   */\r\n  private _stickyStyler: StickyStyler;\r\n\r\n  /**\r\n   * CSS class added to any row or cell that has sticky positioning applied. May be overriden by\r\n   * table subclasses.\r\n   */\r\n  protected stickyCssClass: string = 'cdk-table-sticky';\r\n\r\n  /**\r\n   * Whether to manually add positon: sticky to all sticky cell elements. Not needed if\r\n   * the position is set in a selector associated with the value of stickyCssClass. May be\r\n   * overridden by table subclasses\r\n   */\r\n  protected needsPositionStickyOnElement = true;\r\n\r\n  /** Whether the no data row is currently showing anything. */\r\n  private _isShowingNoDataRow = false;\r\n\r\n  /**\r\n   * Tracking function that will be used to check the differences in data changes. Used similarly\r\n   * to `ngFor` `trackBy` function. Optimize row operations by identifying a row based on its data\r\n   * relative to the function to know if a row should be added/removed/moved.\r\n   * Accepts a function that takes two parameters, `index` and `item`.\r\n   */\r\n  @Input()\r\n  get trackBy(): TrackByFunction<T> {\r\n    return this._trackByFn;\r\n  }\r\n  set trackBy(fn: TrackByFunction<T>) {\r\n    if ((typeof ngDevMode === 'undefined' || ngDevMode) && fn != null && typeof fn !== 'function') {\r\n      console.warn(`trackBy must be a function, but received ${JSON.stringify(fn)}.`);\r\n    }\r\n    this._trackByFn = fn;\r\n  }\r\n  private _trackByFn: TrackByFunction<T>;\r\n\r\n  /**\r\n   * The table's source of data, which can be provided in three ways (in order of complexity):\r\n   *   - Simple data array (each object represents one table row)\r\n   *   - Stream that emits a data array each time the array changes\r\n   *   - `DataSource` object that implements the connect/disconnect interface.\r\n   *\r\n   * If a data array is provided, the table must be notified when the array's objects are\r\n   * added, removed, or moved. This can be done by calling the `renderRows()` function which will\r\n   * render the diff since the last table render. If the data array reference is changed, the table\r\n   * will automatically trigger an update to the rows.\r\n   *\r\n   * When providing an Observable stream, the table will trigger an update automatically when the\r\n   * stream emits a new array of data.\r\n   *\r\n   * Finally, when providing a `DataSource` object, the table will use the Observable stream\r\n   * provided by the connect function and trigger updates when that stream emits new data array\r\n   * values. During the table's ngOnDestroy or when the data source is removed from the table, the\r\n   * table will call the DataSource's `disconnect` function (may be useful for cleaning up any\r\n   * subscriptions registered during the connect process).\r\n   */\r\n  @Input()\r\n  get dataSource(): CdkTableDataSourceInput<T> {\r\n    return this._dataSource;\r\n  }\r\n  set dataSource(dataSource: CdkTableDataSourceInput<T>) {\r\n    if (this._dataSource !== dataSource) {\r\n      this._switchDataSource(dataSource);\r\n    }\r\n  }\r\n  private _dataSource: CdkTableDataSourceInput<T>;\r\n\r\n  /**\r\n   * Whether to allow multiple rows per data object by evaluating which rows evaluate their 'when'\r\n   * predicate to true. If `multiTemplateDataRows` is false, which is the default value, then each\r\n   * dataobject will render the first row that evaluates its when predicate to true, in the order\r\n   * defined in the table, or otherwise the default row which does not have a when predicate.\r\n   */\r\n  @Input()\r\n  get multiTemplateDataRows(): boolean {\r\n    return this._multiTemplateDataRows;\r\n  }\r\n  set multiTemplateDataRows(v: boolean) {\r\n    this._multiTemplateDataRows = coerceBooleanProperty(v);\r\n\r\n    // In Ivy if this value is set via a static attribute (e.g. <table multiTemplateDataRows>),\r\n    // this setter will be invoked before the row outlet has been defined hence the null check.\r\n    if (this._rowOutlet && this._rowOutlet.viewContainer.length) {\r\n      this._forceRenderDataRows();\r\n      this.updateStickyColumnStyles();\r\n    }\r\n  }\r\n  _multiTemplateDataRows: boolean = false;\r\n\r\n  /**\r\n   * Whether to use a fixed table layout. Enabling this option will enforce consistent column widths\r\n   * and optimize rendering sticky styles for native tables. No-op for flex tables.\r\n   */\r\n  @Input()\r\n  get fixedLayout(): boolean {\r\n    return this._fixedLayout;\r\n  }\r\n  set fixedLayout(v: boolean) {\r\n    this._fixedLayout = coerceBooleanProperty(v);\r\n\r\n    // Toggling `fixedLayout` may change column widths. Sticky column styles should be recalculated.\r\n    this._forceRecalculateCellWidths = true;\r\n    this._stickyColumnStylesNeedReset = true;\r\n  }\r\n  private _fixedLayout: boolean = false;\r\n\r\n  // TODO(andrewseguin): Remove max value as the end index\r\n  //   and instead calculate the view on init and scroll.\r\n  /**\r\n   * Stream containing the latest information on what rows are being displayed on screen.\r\n   * Can be used by the data source to as a heuristic of what data should be provided.\r\n   *\r\n   * @docs-private\r\n   */\r\n  viewChange: BehaviorSubject<{start: number, end: number}> =\r\n      new BehaviorSubject<{start: number, end: number}>({start: 0, end: Number.MAX_VALUE});\r\n\r\n  // Outlets in the table's template where the header, data rows, and footer will be inserted.\r\n  @ViewChild(DataRowOutlet, {static: true}) _rowOutlet: DataRowOutlet;\r\n  @ViewChild(HeaderRowOutlet, {static: true}) _headerRowOutlet: HeaderRowOutlet;\r\n  @ViewChild(FooterRowOutlet, {static: true}) _footerRowOutlet: FooterRowOutlet;\r\n  @ViewChild(NoDataRowOutlet, {static: true}) _noDataRowOutlet: NoDataRowOutlet;\r\n\r\n  /**\r\n   * The column definitions provided by the user that contain what the header, data, and footer\r\n   * cells should render for each column.\r\n   */\r\n  @ContentChildren(CdkColumnDef, {descendants: true}) _contentColumnDefs: QueryList<CdkColumnDef>;\r\n\r\n  /** Set of data row definitions that were provided to the table as content children. */\r\n  @ContentChildren(CdkRowDef, {descendants: true}) _contentRowDefs: QueryList<CdkRowDef<T>>;\r\n\r\n  /** Set of header row definitions that were provided to the table as content children. */\r\n  @ContentChildren(CdkHeaderRowDef, {\r\n    descendants: true\r\n  }) _contentHeaderRowDefs: QueryList<CdkHeaderRowDef>;\r\n\r\n  /** Set of footer row definitions that were provided to the table as content children. */\r\n  @ContentChildren(CdkFooterRowDef, {\r\n    descendants: true\r\n  }) _contentFooterRowDefs: QueryList<CdkFooterRowDef>;\r\n\r\n  /** Row definition that will only be rendered if there's no data in the table. */\r\n  @ContentChild(CdkNoDataRow) _noDataRow: CdkNoDataRow;\r\n\r\n  constructor(\r\n      protected readonly _differs: IterableDiffers,\r\n      protected readonly _changeDetectorRef: ChangeDetectorRef,\r\n      protected readonly _elementRef: ElementRef, @Attribute('role') role: string,\r\n      @Optional() protected readonly _dir: Directionality, @Inject(DOCUMENT) _document: any,\r\n      private _platform: Platform,\r\n\r\n      /**\r\n       * @deprecated `_coalescedStyleScheduler`, `_viewRepeater` and `_viewportRuler`\r\n       *    parameters to become required.\r\n       * @breaking-change 11.0.0\r\n       */\r\n      @Optional() @Inject(_VIEW_REPEATER_STRATEGY)\r\n        protected readonly _viewRepeater?: _ViewRepeater<T, RenderRow<T>, RowContext<T>>,\r\n      @Optional() @Inject(_COALESCED_STYLE_SCHEDULER)\r\n        protected readonly _coalescedStyleScheduler?: _CoalescedStyleScheduler,\r\n      @Optional() @SkipSelf() @Inject(STICKY_POSITIONING_LISTENER)\r\n      protected readonly _stickyPositioningListener?: StickyPositioningListener,\r\n      // Optional for backwards compatibility. The viewport ruler is provided in root. Therefore,\r\n      // this property will never be null.\r\n      // tslint:disable-next-line: lightweight-tokens\r\n      @Optional() private readonly _viewportRuler?: ViewportRuler) {\r\n    if (!role) {\r\n      this._elementRef.nativeElement.setAttribute('role', 'grid');\r\n    }\r\n\r\n    this._document = _document;\r\n    this._isNativeHtmlTable = this._elementRef.nativeElement.nodeName === 'TABLE';\r\n  }\r\n\r\n  ngOnInit() {\r\n    this._setupStickyStyler();\r\n\r\n    if (this._isNativeHtmlTable) {\r\n      this._applyNativeTableSections();\r\n    }\r\n\r\n    // Set up the trackBy function so that it uses the `RenderRow` as its identity by default. If\r\n    // the user has provided a custom trackBy, return the result of that function as evaluated\r\n    // with the values of the `RenderRow`'s data and index.\r\n    this._dataDiffer = this._differs.find([]).create((_i: number, dataRow: RenderRow<T>) => {\r\n      return this.trackBy ? this.trackBy(dataRow.dataIndex, dataRow.data) : dataRow;\r\n    });\r\n\r\n    // Table cell dimensions may change after resizing the window. Signal the sticky styler to\r\n    // refresh its cache of cell widths the next time sticky styles are updated.\r\n    // @breaking-change 11.0.0 Remove null check for _viewportRuler once it's a required parameter.\r\n    if (this._viewportRuler) {\r\n      this._viewportRuler.change().pipe(takeUntil(this._onDestroy)).subscribe(() => {\r\n        this._forceRecalculateCellWidths = true;\r\n      });\r\n    }\r\n  }\r\n\r\n  ngAfterContentChecked() {\r\n    // Cache the row and column definitions gathered by ContentChildren and programmatic injection.\r\n    this._cacheRowDefs();\r\n    this._cacheColumnDefs();\r\n\r\n    // Make sure that the user has at least added header, footer, or data row def.\r\n    if (!this._headerRowDefs.length && !this._footerRowDefs.length && !this._rowDefs.length &&\r\n        (typeof ngDevMode === 'undefined' || ngDevMode)) {\r\n      throw getTableMissingRowDefsError();\r\n    }\r\n\r\n    // Render updates if the list of columns have been changed for the header, row, or footer defs.\r\n    const columnsChanged = this._renderUpdatedColumns();\r\n    const rowDefsChanged = columnsChanged || this._headerRowDefChanged || this._footerRowDefChanged;\r\n    // Ensure sticky column styles are reset if set to `true` elsewhere.\r\n    this._stickyColumnStylesNeedReset = this._stickyColumnStylesNeedReset || rowDefsChanged;\r\n    this._forceRecalculateCellWidths = rowDefsChanged;\r\n\r\n    // If the header row definition has been changed, trigger a render to the header row.\r\n    if (this._headerRowDefChanged) {\r\n      this._forceRenderHeaderRows();\r\n      this._headerRowDefChanged = false;\r\n    }\r\n\r\n    // If the footer row definition has been changed, trigger a render to the footer row.\r\n    if (this._footerRowDefChanged) {\r\n      this._forceRenderFooterRows();\r\n      this._footerRowDefChanged = false;\r\n    }\r\n\r\n    // If there is a data source and row definitions, connect to the data source unless a\r\n    // connection has already been made.\r\n    if (this.dataSource && this._rowDefs.length > 0 && !this._renderChangeSubscription) {\r\n      this._observeRenderChanges();\r\n    } else if (this._stickyColumnStylesNeedReset) {\r\n      // In the above case, _observeRenderChanges will result in updateStickyColumnStyles being\r\n      // called when it row data arrives. Otherwise, we need to call it proactively.\r\n      this.updateStickyColumnStyles();\r\n    }\r\n\r\n    this._checkStickyStates();\r\n  }\r\n\r\n  ngOnDestroy() {\r\n    this._rowOutlet.viewContainer.clear();\r\n    this._noDataRowOutlet.viewContainer.clear();\r\n    this._headerRowOutlet.viewContainer.clear();\r\n    this._footerRowOutlet.viewContainer.clear();\r\n\r\n    this._cachedRenderRowsMap.clear();\r\n\r\n    this._onDestroy.next();\r\n    this._onDestroy.complete();\r\n\r\n    if (isDataSource(this.dataSource)) {\r\n      this.dataSource.disconnect(this);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Renders rows based on the table's latest set of data, which was either provided directly as an\r\n   * input or retrieved through an Observable stream (directly or from a DataSource).\r\n   * Checks for differences in the data since the last diff to perform only the necessary\r\n   * changes (add/remove/move rows).\r\n   *\r\n   * If the table's data source is a DataSource or Observable, this will be invoked automatically\r\n   * each time the provided Observable stream emits a new data array. Otherwise if your data is\r\n   * an array, this function will need to be called to render any changes.\r\n   */\r\n  renderRows() {\r\n    this._renderRows = this._getAllRenderRows();\r\n    const changes = this._dataDiffer.diff(this._renderRows);\r\n    if (!changes) {\r\n      this._updateNoDataRow();\r\n      return;\r\n    }\r\n    const viewContainer = this._rowOutlet.viewContainer;\r\n\r\n    // @breaking-change 11.0.0 Remove null check for `_viewRepeater` and the\r\n    // `else` clause once `_viewRepeater` is turned into a required parameter.\r\n    if (this._viewRepeater) {\r\n      this._viewRepeater.applyChanges(\r\n          changes,\r\n          viewContainer,\r\n          (record: IterableChangeRecord<RenderRow<T>>,\r\n           _adjustedPreviousIndex: number|null,\r\n           currentIndex: number|null) => this._getEmbeddedViewArgs(record.item, currentIndex!),\r\n          (record) => record.item.data,\r\n          (change: _ViewRepeaterItemChange<RenderRow<T>, RowContext<T>>) => {\r\n            if (change.operation === _ViewRepeaterOperation.INSERTED && change.context) {\r\n              this._renderCellTemplateForItem(change.record.item.rowDef, change.context);\r\n            }\r\n          });\r\n    } else {\r\n      changes.forEachOperation(\r\n        (record: IterableChangeRecord<RenderRow<T>>, prevIndex: number|null,\r\n         currentIndex: number|null) => {\r\n          if (record.previousIndex == null) {\r\n            const renderRow = record.item;\r\n            const rowDef = renderRow.rowDef;\r\n            const context: RowContext<T> = {$implicit: renderRow.data};\r\n            this._renderRow(this._rowOutlet, rowDef, currentIndex!, context);\r\n          } else if (currentIndex == null) {\r\n            viewContainer.remove(prevIndex!);\r\n          } else {\r\n            const view = <RowViewRef<T>>viewContainer.get(prevIndex!);\r\n            viewContainer.move(view!, currentIndex);\r\n          }\r\n        });\r\n    }\r\n\r\n    // Update the meta context of a row's context data (index, count, first, last, ...)\r\n    this._updateRowIndexContext();\r\n\r\n    // Update rows that did not get added/removed/moved but may have had their identity changed,\r\n    // e.g. if trackBy matched data on some property but the actual data reference changed.\r\n    changes.forEachIdentityChange((record: IterableChangeRecord<RenderRow<T>>) => {\r\n      const rowView = <RowViewRef<T>>viewContainer.get(record.currentIndex!);\r\n      rowView.context.$implicit = record.item.data;\r\n    });\r\n\r\n    this._updateNoDataRow();\r\n    this.updateStickyColumnStyles();\r\n  }\r\n\r\n  /** Adds a column definition that was not included as part of the content children. */\r\n  addColumnDef(columnDef: CdkColumnDef) {\r\n    this._customColumnDefs.add(columnDef);\r\n  }\r\n\r\n  /** Removes a column definition that was not included as part of the content children. */\r\n  removeColumnDef(columnDef: CdkColumnDef) {\r\n    this._customColumnDefs.delete(columnDef);\r\n  }\r\n\r\n  /** Adds a row definition that was not included as part of the content children. */\r\n  addRowDef(rowDef: CdkRowDef<T>) {\r\n    this._customRowDefs.add(rowDef);\r\n  }\r\n\r\n  /** Removes a row definition that was not included as part of the content children. */\r\n  removeRowDef(rowDef: CdkRowDef<T>) {\r\n    this._customRowDefs.delete(rowDef);\r\n  }\r\n\r\n  /** Adds a header row definition that was not included as part of the content children. */\r\n  addHeaderRowDef(headerRowDef: CdkHeaderRowDef) {\r\n    this._customHeaderRowDefs.add(headerRowDef);\r\n    this._headerRowDefChanged = true;\r\n  }\r\n\r\n  /** Removes a header row definition that was not included as part of the content children. */\r\n  removeHeaderRowDef(headerRowDef: CdkHeaderRowDef) {\r\n    this._customHeaderRowDefs.delete(headerRowDef);\r\n    this._headerRowDefChanged = true;\r\n  }\r\n\r\n  /** Adds a footer row definition that was not included as part of the content children. */\r\n  addFooterRowDef(footerRowDef: CdkFooterRowDef) {\r\n    this._customFooterRowDefs.add(footerRowDef);\r\n    this._footerRowDefChanged = true;\r\n  }\r\n\r\n  /** Removes a footer row definition that was not included as part of the content children. */\r\n  removeFooterRowDef(footerRowDef: CdkFooterRowDef) {\r\n    this._customFooterRowDefs.delete(footerRowDef);\r\n    this._footerRowDefChanged = true;\r\n  }\r\n\r\n  /** Sets a no data row definition that was not included as a part of the content children. */\r\n  setNoDataRow(noDataRow: CdkNoDataRow | null) {\r\n    this._customNoDataRow = noDataRow;\r\n  }\r\n\r\n  /**\r\n   * Updates the header sticky styles. First resets all applied styles with respect to the cells\r\n   * sticking to the top. Then, evaluating which cells need to be stuck to the top. This is\r\n   * automatically called when the header row changes its displayed set of columns, or if its\r\n   * sticky input changes. May be called manually for cases where the cell content changes outside\r\n   * of these events.\r\n   */\r\n  updateStickyHeaderRowStyles(): void {\r\n    const headerRows = this._getRenderedRows(this._headerRowOutlet);\r\n    const tableElement = this._elementRef.nativeElement as HTMLElement;\r\n\r\n    // Hide the thead element if there are no header rows. This is necessary to satisfy\r\n    // overzealous a11y checkers that fail because the `rowgroup` element does not contain\r\n    // required child `row`.\r\n    const thead = tableElement.querySelector('thead');\r\n    if (thead) {\r\n      thead.style.display = headerRows.length ? '' : 'none';\r\n    }\r\n\r\n    const stickyStates = this._headerRowDefs.map(def => def.sticky);\r\n    this._stickyStyler.clearStickyPositioning(headerRows, ['top']);\r\n    this._stickyStyler.stickRows(headerRows, stickyStates, 'top');\r\n\r\n    // Reset the dirty state of the sticky input change since it has been used.\r\n    this._headerRowDefs.forEach(def => def.resetStickyChanged());\r\n  }\r\n\r\n  /**\r\n   * Updates the footer sticky styles. First resets all applied styles with respect to the cells\r\n   * sticking to the bottom. Then, evaluating which cells need to be stuck to the bottom. This is\r\n   * automatically called when the footer row changes its displayed set of columns, or if its\r\n   * sticky input changes. May be called manually for cases where the cell content changes outside\r\n   * of these events.\r\n   */\r\n  updateStickyFooterRowStyles(): void {\r\n    const footerRows = this._getRenderedRows(this._footerRowOutlet);\r\n    const tableElement = this._elementRef.nativeElement as HTMLElement;\r\n\r\n    // Hide the tfoot element if there are no footer rows. This is necessary to satisfy\r\n    // overzealous a11y checkers that fail because the `rowgroup` element does not contain\r\n    // required child `row`.\r\n    const tfoot = tableElement.querySelector('tfoot');\r\n    if (tfoot) {\r\n      tfoot.style.display = footerRows.length ? '' : 'none';\r\n    }\r\n\r\n    const stickyStates = this._footerRowDefs.map(def => def.sticky);\r\n    this._stickyStyler.clearStickyPositioning(footerRows, ['bottom']);\r\n    this._stickyStyler.stickRows(footerRows, stickyStates, 'bottom');\r\n    this._stickyStyler.updateStickyFooterContainer(this._elementRef.nativeElement, stickyStates);\r\n\r\n    // Reset the dirty state of the sticky input change since it has been used.\r\n    this._footerRowDefs.forEach(def => def.resetStickyChanged());\r\n  }\r\n\r\n  /**\r\n   * Updates the column sticky styles. First resets all applied styles with respect to the cells\r\n   * sticking to the left and right. Then sticky styles are added for the left and right according\r\n   * to the column definitions for each cell in each row. This is automatically called when\r\n   * the data source provides a new set of data or when a column definition changes its sticky\r\n   * input. May be called manually for cases where the cell content changes outside of these events.\r\n   */\r\n  updateStickyColumnStyles() {\r\n    const headerRows = this._getRenderedRows(this._headerRowOutlet);\r\n    const dataRows = this._getRenderedRows(this._rowOutlet);\r\n    const footerRows = this._getRenderedRows(this._footerRowOutlet);\r\n\r\n    // For tables not using a fixed layout, the column widths may change when new rows are rendered.\r\n    // In a table using a fixed layout, row content won't affect column width, so sticky styles\r\n    // don't need to be cleared unless either the sticky column config changes or one of the row\r\n    // defs change.\r\n    if ((this._isNativeHtmlTable && !this._fixedLayout)\r\n        || this._stickyColumnStylesNeedReset) {\r\n      // Clear the left and right positioning from all columns in the table across all rows since\r\n      // sticky columns span across all table sections (header, data, footer)\r\n      this._stickyStyler.clearStickyPositioning(\r\n          [...headerRows, ...dataRows, ...footerRows], ['left', 'right']);\r\n      this._stickyColumnStylesNeedReset = false;\r\n    }\r\n\r\n    // Update the sticky styles for each header row depending on the def's sticky state\r\n    headerRows.forEach((headerRow, i) => {\r\n      this._addStickyColumnStyles([headerRow], this._headerRowDefs[i]);\r\n    });\r\n\r\n    // Update the sticky styles for each data row depending on its def's sticky state\r\n    this._rowDefs.forEach(rowDef => {\r\n      // Collect all the rows rendered with this row definition.\r\n      const rows: HTMLElement[] = [];\r\n      for (let i = 0; i < dataRows.length; i++) {\r\n        if (this._renderRows[i].rowDef === rowDef) {\r\n          rows.push(dataRows[i]);\r\n        }\r\n      }\r\n\r\n      this._addStickyColumnStyles(rows, rowDef);\r\n    });\r\n\r\n    // Update the sticky styles for each footer row depending on the def's sticky state\r\n    footerRows.forEach((footerRow, i) => {\r\n      this._addStickyColumnStyles([footerRow], this._footerRowDefs[i]);\r\n    });\r\n\r\n    // Reset the dirty state of the sticky input change since it has been used.\r\n    Array.from(this._columnDefsByName.values()).forEach(def => def.resetStickyChanged());\r\n  }\r\n\r\n  /**\r\n   * Get the list of RenderRow objects to render according to the current list of data and defined\r\n   * row definitions. If the previous list already contained a particular pair, it should be reused\r\n   * so that the differ equates their references.\r\n   */\r\n  private _getAllRenderRows(): RenderRow<T>[] {\r\n    const renderRows: RenderRow<T>[] = [];\r\n\r\n    // Store the cache and create a new one. Any re-used RenderRow objects will be moved into the\r\n    // new cache while unused ones can be picked up by garbage collection.\r\n    const prevCachedRenderRows = this._cachedRenderRowsMap;\r\n    this._cachedRenderRowsMap = new Map();\r\n\r\n    // For each data object, get the list of rows that should be rendered, represented by the\r\n    // respective `RenderRow` object which is the pair of `data` and `CdkRowDef`.\r\n    for (let i = 0; i < this._data.length; i++) {\r\n      let data = this._data[i];\r\n      const renderRowsForData = this._getRenderRowsForData(data, i, prevCachedRenderRows.get(data));\r\n\r\n      if (!this._cachedRenderRowsMap.has(data)) {\r\n        this._cachedRenderRowsMap.set(data, new WeakMap());\r\n      }\r\n\r\n      for (let j = 0; j < renderRowsForData.length; j++) {\r\n        let renderRow = renderRowsForData[j];\r\n\r\n        const cache = this._cachedRenderRowsMap.get(renderRow.data)!;\r\n        if (cache.has(renderRow.rowDef)) {\r\n          cache.get(renderRow.rowDef)!.push(renderRow);\r\n        } else {\r\n          cache.set(renderRow.rowDef, [renderRow]);\r\n        }\r\n        renderRows.push(renderRow);\r\n      }\r\n    }\r\n\r\n    return renderRows;\r\n  }\r\n\r\n  /**\r\n   * Gets a list of `RenderRow<T>` for the provided data object and any `CdkRowDef` objects that\r\n   * should be rendered for this data. Reuses the cached RenderRow objects if they match the same\r\n   * `(T, CdkRowDef)` pair.\r\n   */\r\n  private _getRenderRowsForData(\r\n      data: T, dataIndex: number, cache?: WeakMap<CdkRowDef<T>, RenderRow<T>[]>): RenderRow<T>[] {\r\n    const rowDefs = this._getRowDefs(data, dataIndex);\r\n\r\n    return rowDefs.map(rowDef => {\r\n      const cachedRenderRows = (cache && cache.has(rowDef)) ? cache.get(rowDef)! : [];\r\n      if (cachedRenderRows.length) {\r\n        const dataRow = cachedRenderRows.shift()!;\r\n        dataRow.dataIndex = dataIndex;\r\n        return dataRow;\r\n      } else {\r\n        return {data, rowDef, dataIndex};\r\n      }\r\n    });\r\n  }\r\n\r\n  /** Update the map containing the content's column definitions. */\r\n  private _cacheColumnDefs() {\r\n    this._columnDefsByName.clear();\r\n\r\n    const columnDefs = mergeArrayAndSet(\r\n        this._getOwnDefs(this._contentColumnDefs), this._customColumnDefs);\r\n    columnDefs.forEach(columnDef => {\r\n      if (this._columnDefsByName.has(columnDef.name) &&\r\n        (typeof ngDevMode === 'undefined' || ngDevMode)) {\r\n        throw getTableDuplicateColumnNameError(columnDef.name);\r\n      }\r\n      this._columnDefsByName.set(columnDef.name, columnDef);\r\n    });\r\n  }\r\n\r\n  /** Update the list of all available row definitions that can be used. */\r\n  private _cacheRowDefs() {\r\n    this._headerRowDefs = mergeArrayAndSet(\r\n        this._getOwnDefs(this._contentHeaderRowDefs), this._customHeaderRowDefs);\r\n    this._footerRowDefs = mergeArrayAndSet(\r\n        this._getOwnDefs(this._contentFooterRowDefs), this._customFooterRowDefs);\r\n    this._rowDefs = mergeArrayAndSet(\r\n        this._getOwnDefs(this._contentRowDefs), this._customRowDefs);\r\n\r\n    // After all row definitions are determined, find the row definition to be considered default.\r\n    const defaultRowDefs = this._rowDefs.filter(def => !def.when);\r\n    if (!this.multiTemplateDataRows && defaultRowDefs.length > 1 &&\r\n        (typeof ngDevMode === 'undefined' || ngDevMode)) {\r\n      throw getTableMultipleDefaultRowDefsError();\r\n    }\r\n    this._defaultRowDef = defaultRowDefs[0];\r\n  }\r\n\r\n  /**\r\n   * Check if the header, data, or footer rows have changed what columns they want to display or\r\n   * whether the sticky states have changed for the header or footer. If there is a diff, then\r\n   * re-render that section.\r\n   */\r\n  private _renderUpdatedColumns(): boolean {\r\n    const columnsDiffReducer = (acc: boolean, def: BaseRowDef) => acc || !!def.getColumnsDiff();\r\n\r\n    // Force re-render data rows if the list of column definitions have changed.\r\n    const dataColumnsChanged = this._rowDefs.reduce(columnsDiffReducer, false);\r\n    if (dataColumnsChanged) {\r\n      this._forceRenderDataRows();\r\n    }\r\n\r\n    // Force re-render header/footer rows if the list of column definitions have changed.\r\n    const headerColumnsChanged = this._headerRowDefs.reduce(columnsDiffReducer, false);\r\n    if (headerColumnsChanged) {\r\n      this._forceRenderHeaderRows();\r\n    }\r\n\r\n    const footerColumnsChanged = this._footerRowDefs.reduce(columnsDiffReducer, false);\r\n    if (footerColumnsChanged) {\r\n      this._forceRenderFooterRows();\r\n    }\r\n\r\n    return dataColumnsChanged || headerColumnsChanged || footerColumnsChanged;\r\n  }\r\n\r\n  /**\r\n   * Switch to the provided data source by resetting the data and unsubscribing from the current\r\n   * render change subscription if one exists. If the data source is null, interpret this by\r\n   * clearing the row outlet. Otherwise start listening for new data.\r\n   */\r\n  private _switchDataSource(dataSource: CdkTableDataSourceInput<T>) {\r\n    this._data = [];\r\n\r\n    if (isDataSource(this.dataSource)) {\r\n      this.dataSource.disconnect(this);\r\n    }\r\n\r\n    // Stop listening for data from the previous data source.\r\n    if (this._renderChangeSubscription) {\r\n      this._renderChangeSubscription.unsubscribe();\r\n      this._renderChangeSubscription = null;\r\n    }\r\n\r\n    if (!dataSource) {\r\n      if (this._dataDiffer) {\r\n        this._dataDiffer.diff([]);\r\n      }\r\n      this._rowOutlet.viewContainer.clear();\r\n    }\r\n\r\n    this._dataSource = dataSource;\r\n  }\r\n\r\n  /** Set up a subscription for the data provided by the data source. */\r\n  private _observeRenderChanges() {\r\n    // If no data source has been set, there is nothing to observe for changes.\r\n    if (!this.dataSource) {\r\n      return;\r\n    }\r\n\r\n    let dataStream: Observable<T[]|ReadonlyArray<T>>|undefined;\r\n\r\n    if (isDataSource(this.dataSource)) {\r\n      dataStream = this.dataSource.connect(this);\r\n    } else if (isObservable(this.dataSource)) {\r\n      dataStream = this.dataSource;\r\n    } else if (Array.isArray(this.dataSource)) {\r\n      dataStream = observableOf(this.dataSource);\r\n    }\r\n\r\n    if (dataStream === undefined && (typeof ngDevMode === 'undefined' || ngDevMode)) {\r\n      throw getTableUnknownDataSourceError();\r\n    }\r\n\r\n    this._renderChangeSubscription = dataStream!.pipe(takeUntil(this._onDestroy))\r\n      .subscribe(data => {\r\n        this._data = data || [];\r\n        this.renderRows();\r\n      });\r\n  }\r\n\r\n  /**\r\n   * Clears any existing content in the header row outlet and creates a new embedded view\r\n   * in the outlet using the header row definition.\r\n   */\r\n  private _forceRenderHeaderRows() {\r\n    // Clear the header row outlet if any content exists.\r\n    if (this._headerRowOutlet.viewContainer.length > 0) {\r\n      this._headerRowOutlet.viewContainer.clear();\r\n    }\r\n\r\n    this._headerRowDefs.forEach((def, i) => this._renderRow(this._headerRowOutlet, def, i));\r\n    this.updateStickyHeaderRowStyles();\r\n  }\r\n\r\n  /**\r\n   * Clears any existing content in the footer row outlet and creates a new embedded view\r\n   * in the outlet using the footer row definition.\r\n   */\r\n  private _forceRenderFooterRows() {\r\n    // Clear the footer row outlet if any content exists.\r\n    if (this._footerRowOutlet.viewContainer.length > 0) {\r\n      this._footerRowOutlet.viewContainer.clear();\r\n    }\r\n\r\n    this._footerRowDefs.forEach((def, i) => this._renderRow(this._footerRowOutlet, def, i));\r\n    this.updateStickyFooterRowStyles();\r\n  }\r\n\r\n  /** Adds the sticky column styles for the rows according to the columns' stick states. */\r\n  private _addStickyColumnStyles(rows: HTMLElement[], rowDef: BaseRowDef) {\r\n    const columnDefs = Array.from(rowDef.columns || []).map(columnName => {\r\n      const columnDef = this._columnDefsByName.get(columnName);\r\n      if (!columnDef && (typeof ngDevMode === 'undefined' || ngDevMode)) {\r\n        throw getTableUnknownColumnError(columnName);\r\n      }\r\n      return columnDef!;\r\n    });\r\n    const stickyStartStates = columnDefs.map(columnDef => columnDef.sticky);\r\n    const stickyEndStates = columnDefs.map(columnDef => columnDef.stickyEnd);\r\n    this._stickyStyler.updateStickyColumns(\r\n        rows, stickyStartStates, stickyEndStates,\r\n        !this._fixedLayout || this._forceRecalculateCellWidths);\r\n  }\r\n\r\n  /** Gets the list of rows that have been rendered in the row outlet. */\r\n  _getRenderedRows(rowOutlet: RowOutlet): HTMLElement[] {\r\n    const renderedRows: HTMLElement[] = [];\r\n\r\n    for (let i = 0; i < rowOutlet.viewContainer.length; i++) {\r\n      const viewRef = (rowOutlet.viewContainer.get(i)! as EmbeddedViewRef<any>);\r\n      renderedRows.push(viewRef.rootNodes[0]);\r\n    }\r\n\r\n    return renderedRows;\r\n  }\r\n\r\n  /**\r\n   * Get the matching row definitions that should be used for this row data. If there is only\r\n   * one row definition, it is returned. Otherwise, find the row definitions that has a when\r\n   * predicate that returns true with the data. If none return true, return the default row\r\n   * definition.\r\n   */\r\n  _getRowDefs(data: T, dataIndex: number): CdkRowDef<T>[] {\r\n    if (this._rowDefs.length == 1) {\r\n      return [this._rowDefs[0]];\r\n    }\r\n\r\n    let rowDefs: CdkRowDef<T>[] = [];\r\n    if (this.multiTemplateDataRows) {\r\n      rowDefs = this._rowDefs.filter(def => !def.when || def.when(dataIndex, data));\r\n    } else {\r\n      let rowDef =\r\n          this._rowDefs.find(def => def.when && def.when(dataIndex, data)) || this._defaultRowDef;\r\n      if (rowDef) {\r\n        rowDefs.push(rowDef);\r\n      }\r\n    }\r\n\r\n    if (!rowDefs.length && (typeof ngDevMode === 'undefined' || ngDevMode)) {\r\n      throw getTableMissingMatchingRowDefError(data);\r\n    }\r\n\r\n    return rowDefs;\r\n  }\r\n\r\n\r\n  private _getEmbeddedViewArgs(renderRow: RenderRow<T>,\r\n                               index: number): _ViewRepeaterItemInsertArgs<RowContext<T>> {\r\n    const rowDef = renderRow.rowDef;\r\n    const context: RowContext<T> = {$implicit: renderRow.data};\r\n    return {\r\n      templateRef: rowDef.template,\r\n      context,\r\n      index,\r\n    };\r\n  }\r\n\r\n  /**\r\n   * Creates a new row template in the outlet and fills it with the set of cell templates.\r\n   * Optionally takes a context to provide to the row and cells, as well as an optional index\r\n   * of where to place the new row template in the outlet.\r\n   */\r\n  private _renderRow(\r\n      outlet: RowOutlet, rowDef: BaseRowDef, index: number,\r\n      context: RowContext<T> = {}): EmbeddedViewRef<RowContext<T>> {\r\n    // TODO(andrewseguin): enforce that one outlet was instantiated from createEmbeddedView\r\n    const view = outlet.viewContainer.createEmbeddedView(rowDef.template, context, index);\r\n    this._renderCellTemplateForItem(rowDef, context);\r\n    return view;\r\n  }\r\n\r\n  private _renderCellTemplateForItem(rowDef: BaseRowDef, context: RowContext<T>) {\r\n    for (let cellTemplate of this._getCellTemplates(rowDef)) {\r\n      if (CdkCellOutlet.mostRecentCellOutlet) {\r\n        CdkCellOutlet.mostRecentCellOutlet._viewContainer.createEmbeddedView(cellTemplate, context);\r\n      }\r\n    }\r\n\r\n    this._changeDetectorRef.markForCheck();\r\n  }\r\n\r\n  /**\r\n   * Updates the index-related context for each row to reflect any changes in the index of the rows,\r\n   * e.g. first/last/even/odd.\r\n   */\r\n  private _updateRowIndexContext() {\r\n    const viewContainer = this._rowOutlet.viewContainer;\r\n    for (let renderIndex = 0, count = viewContainer.length; renderIndex < count; renderIndex++) {\r\n      const viewRef = viewContainer.get(renderIndex) as RowViewRef<T>;\r\n      const context = viewRef.context as RowContext<T>;\r\n      context.count = count;\r\n      context.first = renderIndex === 0;\r\n      context.last = renderIndex === count - 1;\r\n      context.even = renderIndex % 2 === 0;\r\n      context.odd = !context.even;\r\n\r\n      if (this.multiTemplateDataRows) {\r\n        context.dataIndex = this._renderRows[renderIndex].dataIndex;\r\n        context.renderIndex = renderIndex;\r\n      } else {\r\n        context.index = this._renderRows[renderIndex].dataIndex;\r\n      }\r\n    }\r\n  }\r\n\r\n  /** Gets the column definitions for the provided row def. */\r\n  private _getCellTemplates(rowDef: BaseRowDef): TemplateRef<any>[] {\r\n    if (!rowDef || !rowDef.columns) {\r\n      return [];\r\n    }\r\n    return Array.from(rowDef.columns, columnId => {\r\n      const column = this._columnDefsByName.get(columnId);\r\n\r\n      if (!column && (typeof ngDevMode === 'undefined' || ngDevMode)) {\r\n        throw getTableUnknownColumnError(columnId);\r\n      }\r\n\r\n      return rowDef.extractCellTemplate(column!);\r\n    });\r\n  }\r\n\r\n  /** Adds native table sections (e.g. tbody) and moves the row outlets into them. */\r\n  private _applyNativeTableSections() {\r\n    const documentFragment = this._document.createDocumentFragment();\r\n    const sections = [\r\n      {tag: 'thead', outlets: [this._headerRowOutlet]},\r\n      {tag: 'tbody', outlets: [this._rowOutlet, this._noDataRowOutlet]},\r\n      {tag: 'tfoot', outlets: [this._footerRowOutlet]},\r\n    ];\r\n\r\n    for (const section of sections) {\r\n      const element = this._document.createElement(section.tag);\r\n      element.setAttribute('role', 'rowgroup');\r\n\r\n      for (const outlet of section.outlets) {\r\n        element.appendChild(outlet.elementRef.nativeElement);\r\n      }\r\n\r\n      documentFragment.appendChild(element);\r\n    }\r\n\r\n    // Use a DocumentFragment so we don't hit the DOM on each iteration.\r\n    this._elementRef.nativeElement.appendChild(documentFragment);\r\n  }\r\n\r\n  /**\r\n   * Forces a re-render of the data rows. Should be called in cases where there has been an input\r\n   * change that affects the evaluation of which rows should be rendered, e.g. toggling\r\n   * `multiTemplateDataRows` or adding/removing row definitions.\r\n   */\r\n  private _forceRenderDataRows() {\r\n    this._dataDiffer.diff([]);\r\n    this._rowOutlet.viewContainer.clear();\r\n    this.renderRows();\r\n  }\r\n\r\n  /**\r\n   * Checks if there has been a change in sticky states since last check and applies the correct\r\n   * sticky styles. Since checking resets the \"dirty\" state, this should only be performed once\r\n   * during a change detection and after the inputs are settled (after content check).\r\n   */\r\n  private _checkStickyStates() {\r\n    const stickyCheckReducer = (acc: boolean,\r\n                                d: CdkHeaderRowDef|CdkFooterRowDef|CdkColumnDef) => {\r\n      return acc || d.hasStickyChanged();\r\n    };\r\n\r\n    // Note that the check needs to occur for every definition since it notifies the definition\r\n    // that it can reset its dirty state. Using another operator like `some` may short-circuit\r\n    // remaining definitions and leave them in an unchecked state.\r\n\r\n    if (this._headerRowDefs.reduce(stickyCheckReducer, false)) {\r\n      this.updateStickyHeaderRowStyles();\r\n    }\r\n\r\n    if (this._footerRowDefs.reduce(stickyCheckReducer, false)) {\r\n      this.updateStickyFooterRowStyles();\r\n    }\r\n\r\n    if (Array.from(this._columnDefsByName.values()).reduce(stickyCheckReducer, false)) {\r\n      this._stickyColumnStylesNeedReset = true;\r\n      this.updateStickyColumnStyles();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Creates the sticky styler that will be used for sticky rows and columns. Listens\r\n   * for directionality changes and provides the latest direction to the styler. Re-applies column\r\n   * stickiness when directionality changes.\r\n   */\r\n  private _setupStickyStyler() {\r\n    const direction: Direction = this._dir ? this._dir.value : 'ltr';\r\n    this._stickyStyler = new StickyStyler(\r\n        this._isNativeHtmlTable, this.stickyCssClass, direction, this._coalescedStyleScheduler,\r\n        this._platform.isBrowser, this.needsPositionStickyOnElement,\r\n        this._stickyPositioningListener);\r\n    (this._dir ? this._dir.change : observableOf<Direction>())\r\n    .pipe(takeUntil(this._onDestroy))\r\n    .subscribe(value => {\r\n      this._stickyStyler.direction = value;\r\n      this.updateStickyColumnStyles();\r\n    });\r\n  }\r\n\r\n  /** Filters definitions that belong to this table from a QueryList. */\r\n  private _getOwnDefs<I extends {_table?: any}>(items: QueryList<I>): I[] {\r\n    return items.filter(item => !item._table || item._table === this);\r\n  }\r\n\r\n  /** Creates or removes the no data row, depending on whether any data is being shown. */\r\n  private _updateNoDataRow() {\r\n    const noDataRow = this._customNoDataRow || this._noDataRow;\r\n\r\n    if (noDataRow) {\r\n      const shouldShow = this._rowOutlet.viewContainer.length === 0;\r\n\r\n      if (shouldShow !== this._isShowingNoDataRow) {\r\n        const container = this._noDataRowOutlet.viewContainer;\r\n        shouldShow ? container.createEmbeddedView(noDataRow.templateRef) : container.clear();\r\n        this._isShowingNoDataRow = shouldShow;\r\n      }\r\n    }\r\n  }\r\n\r\n  static ngAcceptInputType_multiTemplateDataRows: BooleanInput;\r\n  static ngAcceptInputType_fixedLayout: BooleanInput;\r\n}\r\n\r\n/** Utility function that gets a merged list of the entries in an array and values of a Set. */\r\nfunction mergeArrayAndSet<T>(array: T[], set: Set<T>): T[] {\r\n  return array.concat(Array.from(set));\r\n}\r\n","/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n\r\nimport {\r\n  ChangeDetectionStrategy,\r\n  Component,\r\n  Inject,\r\n  Input,\r\n  OnDestroy,\r\n  OnInit,\r\n  Optional,\r\n  ViewChild,\r\n  ViewEncapsulation,\r\n} from '@angular/core';\r\nimport {CdkCellDef, CdkColumnDef, CdkHeaderCellDef} from './cell';\r\nimport {CdkTable} from './table';\r\nimport {\r\n  getTableTextColumnMissingParentTableError,\r\n  getTableTextColumnMissingNameError,\r\n} from './table-errors';\r\nimport {TEXT_COLUMN_OPTIONS, TextColumnOptions} from './tokens';\r\n\r\n\r\n/**\r\n * Column that simply shows text content for the header and row cells. Assumes that the table\r\n * is using the native table implementation (`<table>`).\r\n *\r\n * By default, the name of this column will be the header text and data property accessor.\r\n * The header text can be overridden with the `headerText` input. Cell values can be overridden with\r\n * the `dataAccessor` input. Change the text justification to the start or end using the `justify`\r\n * input.\r\n */\r\n@Component({\r\n  selector: 'cdk-text-column',\r\n  template: `\r\n    <ng-container cdkColumnDef>\r\n      <th cdk-header-cell *cdkHeaderCellDef [style.text-align]=\"justify\">\r\n        {{headerText}}\r\n      </th>\r\n      <td cdk-cell *cdkCellDef=\"let data\" [style.text-align]=\"justify\">\r\n        {{dataAccessor(data, name)}}\r\n      </td>\r\n    </ng-container>\r\n  `,\r\n  encapsulation: ViewEncapsulation.None,\r\n  // Change detection is intentionally not set to OnPush. This component's template will be provided\r\n  // to the table to be inserted into its view. This is problematic when change detection runs since\r\n  // the bindings in this template will be evaluated _after_ the table's view is evaluated, which\r\n  // mean's the template in the table's view will not have the updated value (and in fact will cause\r\n  // an ExpressionChangedAfterItHasBeenCheckedError).\r\n  // tslint:disable-next-line:validate-decorators\r\n  changeDetection: ChangeDetectionStrategy.Default,\r\n})\r\nexport class CdkTextColumn<T> implements OnDestroy, OnInit {\r\n  /** Column name that should be used to reference this column. */\r\n  @Input()\r\n  get name(): string {\r\n    return this._name;\r\n  }\r\n  set name(name: string) {\r\n    this._name = name;\r\n\r\n    // With Ivy, inputs can be initialized before static query results are\r\n    // available. In that case, we defer the synchronization until \"ngOnInit\" fires.\r\n    this._syncColumnDefName();\r\n  }\r\n  _name: string;\r\n\r\n  /**\r\n   * Text label that should be used for the column header. If this property is not\r\n   * set, the header text will default to the column name with its first letter capitalized.\r\n   */\r\n  @Input() headerText: string;\r\n\r\n  /**\r\n   * Accessor function to retrieve the data rendered for each cell. If this\r\n   * property is not set, the data cells will render the value found in the data's property matching\r\n   * the column's name. For example, if the column is named `id`, then the rendered value will be\r\n   * value defined by the data's `id` property.\r\n   */\r\n  @Input() dataAccessor: (data: T, name: string) => string;\r\n\r\n  /** Alignment of the cell values. */\r\n  @Input() justify: 'start'|'end' = 'start';\r\n\r\n  /** @docs-private */\r\n  @ViewChild(CdkColumnDef, {static: true}) columnDef: CdkColumnDef;\r\n\r\n  /**\r\n   * The column cell is provided to the column during `ngOnInit` with a static query.\r\n   * Normally, this will be retrieved by the column using `ContentChild`, but that assumes the\r\n   * column definition was provided in the same view as the table, which is not the case with this\r\n   * component.\r\n   * @docs-private\r\n   */\r\n  @ViewChild(CdkCellDef, {static: true}) cell: CdkCellDef;\r\n\r\n  /**\r\n   * The column headerCell is provided to the column during `ngOnInit` with a static query.\r\n   * Normally, this will be retrieved by the column using `ContentChild`, but that assumes the\r\n   * column definition was provided in the same view as the table, which is not the case with this\r\n   * component.\r\n   * @docs-private\r\n   */\r\n  @ViewChild(CdkHeaderCellDef, {static: true}) headerCell: CdkHeaderCellDef;\r\n\r\n  constructor(\r\n      // `CdkTextColumn` is always requiring a table, but we just assert it manually\r\n      // for better error reporting.\r\n      // tslint:disable-next-line: lightweight-tokens\r\n      @Optional() private _table: CdkTable<T>,\r\n      @Optional() @Inject(TEXT_COLUMN_OPTIONS) private _options: TextColumnOptions<T>) {\r\n    this._options = _options || {};\r\n  }\r\n\r\n  ngOnInit() {\r\n    this._syncColumnDefName();\r\n\r\n    if (this.headerText === undefined) {\r\n      this.headerText = this._createDefaultHeaderText();\r\n    }\r\n\r\n    if (!this.dataAccessor) {\r\n      this.dataAccessor =\r\n          this._options.defaultDataAccessor || ((data: T, name: string) => (data as any)[name]);\r\n    }\r\n\r\n    if (this._table) {\r\n      // Provide the cell and headerCell directly to the table with the static `ViewChild` query,\r\n      // since the columnDef will not pick up its content by the time the table finishes checking\r\n      // its content and initializing the rows.\r\n      this.columnDef.cell = this.cell;\r\n      this.columnDef.headerCell = this.headerCell;\r\n      this._table.addColumnDef(this.columnDef);\r\n    } else if (typeof ngDevMode === 'undefined' || ngDevMode) {\r\n      throw getTableTextColumnMissingParentTableError();\r\n    }\r\n  }\r\n\r\n  ngOnDestroy() {\r\n    if (this._table) {\r\n      this._table.removeColumnDef(this.columnDef);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Creates a default header text. Use the options' header text transformation function if one\r\n   * has been provided. Otherwise simply capitalize the column name.\r\n   */\r\n  _createDefaultHeaderText() {\r\n    const name = this.name;\r\n\r\n    if (!name && (typeof ngDevMode === 'undefined' || ngDevMode)) {\r\n      throw getTableTextColumnMissingNameError();\r\n    }\r\n\r\n    if (this._options && this._options.defaultHeaderTextTransform) {\r\n      return this._options.defaultHeaderTextTransform(name);\r\n    }\r\n\r\n    return name[0].toUpperCase() + name.slice(1);\r\n  }\r\n\r\n  /** Synchronizes the column definition name with the text column name. */\r\n  private _syncColumnDefName() {\r\n    if (this.columnDef) {\r\n      this.columnDef.name = this.name;\r\n    }\r\n  }\r\n}\r\n","/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n\r\nimport {NgModule} from '@angular/core';\r\nimport {HeaderRowOutlet, DataRowOutlet, CdkTable, FooterRowOutlet, NoDataRowOutlet} from './table';\r\nimport {\r\n  CdkCellOutlet, CdkFooterRow, CdkFooterRowDef, CdkHeaderRow, CdkHeaderRowDef, CdkRow,\r\n  CdkRowDef,\r\n  CdkNoDataRow\r\n} from './row';\r\nimport {\r\n  CdkColumnDef, CdkHeaderCellDef, CdkHeaderCell, CdkCell, CdkCellDef,\r\n  CdkFooterCellDef, CdkFooterCell\r\n} from './cell';\r\nimport {CdkTextColumn} from './text-column';\r\nimport {ScrollingModule} from '@angular/cdk/scrolling';\r\n\r\nconst EXPORTED_DECLARATIONS = [\r\n  CdkTable,\r\n  CdkRowDef,\r\n  CdkCellDef,\r\n  CdkCellOutlet,\r\n  CdkHeaderCellDef,\r\n  CdkFooterCellDef,\r\n  CdkColumnDef,\r\n  CdkCell,\r\n  CdkRow,\r\n  CdkHeaderCell,\r\n  CdkFooterCell,\r\n  CdkHeaderRow,\r\n  CdkHeaderRowDef,\r\n  CdkFooterRow,\r\n  CdkFooterRowDef,\r\n  DataRowOutlet,\r\n  HeaderRowOutlet,\r\n  FooterRowOutlet,\r\n  CdkTextColumn,\r\n  CdkNoDataRow,\r\n  NoDataRowOutlet,\r\n];\r\n\r\n@NgModule({\r\n  exports: EXPORTED_DECLARATIONS,\r\n  declarations: EXPORTED_DECLARATIONS,\r\n  imports: [ScrollingModule]\r\n})\r\nexport class CdkTableModule { }\r\n","/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n\r\nexport * from './table';\r\nexport * from './cell';\r\nexport * from './coalesced-style-scheduler';\r\nexport * from './row';\r\nexport * from './table-module';\r\nexport * from './sticky-styler';\r\nexport * from './sticky-position-listener';\r\nexport * from './can-stick';\r\nexport * from './text-column';\r\nexport * from './tokens';\r\n\r\n/** Re-export DataSource for a more intuitive experience for users of just the table. */\r\nexport {DataSource} from '@angular/cdk/collections';\r\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './public-api';\n"],"names":["observableOf"],"mappings":"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"}