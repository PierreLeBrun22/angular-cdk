{"version":3,"file":"layout.js","sources":["../../../../../../src/cdk/layout/layout-module.ts","../../../../../../src/cdk/layout/media-matcher.ts","../../../../../../src/cdk/layout/breakpoints-observer.ts","../../../../../../src/cdk/layout/breakpoints.ts","../../../../../../src/cdk/layout/public-api.ts","../../../../../../src/cdk/layout/index.ts"],"sourcesContent":["/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\nimport {NgModule} from '@angular/core';\r\n\r\n\r\n@NgModule({})\r\nexport class LayoutModule {}\r\n","/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\nimport {Injectable} from '@angular/core';\r\nimport {Platform} from '@angular/cdk/platform';\r\n\r\n/** Global registry for all dynamically-created, injected media queries. */\r\nconst mediaQueriesForWebkitCompatibility: Set<string> = new Set<string>();\r\n\r\n/** Style tag that holds all of the dynamically-created media queries. */\r\nlet mediaQueryStyleNode: HTMLStyleElement | undefined;\r\n\r\n/** A utility for calling matchMedia queries. */\r\n@Injectable({providedIn: 'root'})\r\nexport class MediaMatcher {\r\n  /** The internal matchMedia method to return back a MediaQueryList like object. */\r\n  private _matchMedia: (query: string) => MediaQueryList;\r\n\r\n  constructor(private _platform: Platform) {\r\n    this._matchMedia = this._platform.isBrowser && window.matchMedia ?\r\n      // matchMedia is bound to the window scope intentionally as it is an illegal invocation to\r\n      // call it from a different scope.\r\n      window.matchMedia.bind(window) :\r\n      noopMatchMedia;\r\n  }\r\n\r\n  /**\r\n   * Evaluates the given media query and returns the native MediaQueryList from which results\r\n   * can be retrieved.\r\n   * Confirms the layout engine will trigger for the selector query provided and returns the\r\n   * MediaQueryList for the query provided.\r\n   */\r\n  matchMedia(query: string): MediaQueryList {\r\n    if (this._platform.WEBKIT) {\r\n      createEmptyStyleRule(query);\r\n    }\r\n    return this._matchMedia(query);\r\n  }\r\n}\r\n\r\n/**\r\n * For Webkit engines that only trigger the MediaQueryListListener when\r\n * there is at least one CSS selector for the respective media query.\r\n */\r\nfunction createEmptyStyleRule(query: string) {\r\n  if (mediaQueriesForWebkitCompatibility.has(query)) {\r\n    return;\r\n  }\r\n\r\n  try {\r\n    if (!mediaQueryStyleNode) {\r\n      mediaQueryStyleNode = document.createElement('style');\r\n      mediaQueryStyleNode.setAttribute('type', 'text/css');\r\n      document.head!.appendChild(mediaQueryStyleNode);\r\n    }\r\n\r\n    if (mediaQueryStyleNode.sheet) {\r\n      (mediaQueryStyleNode.sheet as CSSStyleSheet)\r\n          .insertRule(`@media ${query} {.fx-query-test{ }}`, 0);\r\n      mediaQueriesForWebkitCompatibility.add(query);\r\n    }\r\n  } catch (e) {\r\n    console.error(e);\r\n  }\r\n}\r\n\r\n/** No-op matchMedia replacement for non-browser platforms. */\r\nfunction noopMatchMedia(query: string): MediaQueryList {\r\n  // Use `as any` here to avoid adding additional necessary properties for\r\n  // the noop matcher.\r\n  return {\r\n    matches: query === 'all' || query === '',\r\n    media: query,\r\n    addListener: () => {},\r\n    removeListener: () => {}\r\n  } as any;\r\n}\r\n","/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n\r\nimport {coerceArray} from '@angular/cdk/coercion';\r\nimport {Injectable, NgZone, OnDestroy} from '@angular/core';\r\nimport {combineLatest, concat, Observable, Observer, Subject} from 'rxjs';\r\nimport {debounceTime, map, skip, startWith, take, takeUntil} from 'rxjs/operators';\r\nimport {MediaMatcher} from './media-matcher';\r\n\r\n\r\n/** The current state of a layout breakpoint. */\r\nexport interface BreakpointState {\r\n  /** Whether the breakpoint is currently matching. */\r\n  matches: boolean;\r\n  /**\r\n   * A key boolean pair for each query provided to the observe method,\r\n   * with its current matched state.\r\n   */\r\n  breakpoints: {\r\n    [key: string]: boolean;\r\n  };\r\n}\r\n\r\n/** The current state of a layout breakpoint. */\r\ninterface InternalBreakpointState {\r\n  /** Whether the breakpoint is currently matching. */\r\n  matches: boolean;\r\n  /** The media query being to be matched */\r\n  query: string;\r\n}\r\n\r\ninterface Query {\r\n  observable: Observable<InternalBreakpointState>;\r\n  mql: MediaQueryList;\r\n}\r\n\r\n/** Utility for checking the matching state of @media queries. */\r\n@Injectable({providedIn: 'root'})\r\nexport class BreakpointObserver implements OnDestroy {\r\n  /**  A map of all media queries currently being listened for. */\r\n  private _queries = new Map<string, Query>();\r\n  /** A subject for all other observables to takeUntil based on. */\r\n  private _destroySubject = new Subject<void>();\r\n\r\n  constructor(private _mediaMatcher: MediaMatcher, private _zone: NgZone) {}\r\n\r\n  /** Completes the active subject, signalling to all other observables to complete. */\r\n  ngOnDestroy() {\r\n    this._destroySubject.next();\r\n    this._destroySubject.complete();\r\n  }\r\n\r\n  /**\r\n   * Whether one or more media queries match the current viewport size.\r\n   * @param value One or more media queries to check.\r\n   * @returns Whether any of the media queries match.\r\n   */\r\n  isMatched(value: string | readonly string[]): boolean {\r\n    const queries = splitQueries(coerceArray(value));\r\n    return queries.some(mediaQuery => this._registerQuery(mediaQuery).mql.matches);\r\n  }\r\n\r\n  /**\r\n   * Gets an observable of results for the given queries that will emit new results for any changes\r\n   * in matching of the given queries.\r\n   * @param value One or more media queries to check.\r\n   * @returns A stream of matches for the given queries.\r\n   */\r\n  observe(value: string | readonly string[]): Observable<BreakpointState> {\r\n    const queries = splitQueries(coerceArray(value));\r\n    const observables = queries.map(query => this._registerQuery(query).observable);\r\n\r\n    let stateObservable = combineLatest(observables);\r\n    // Emit the first state immediately, and then debounce the subsequent emissions.\r\n    stateObservable = concat(\r\n      stateObservable.pipe(take(1)),\r\n      stateObservable.pipe(skip(1), debounceTime(0)));\r\n    return stateObservable.pipe(map(breakpointStates => {\r\n      const response: BreakpointState = {\r\n        matches: false,\r\n        breakpoints: {},\r\n      };\r\n      breakpointStates.forEach(({matches, query}) => {\r\n        response.matches = response.matches || matches;\r\n        response.breakpoints[query] = matches;\r\n      });\r\n      return response;\r\n    }));\r\n  }\r\n\r\n  /** Registers a specific query to be listened for. */\r\n  private _registerQuery(query: string): Query {\r\n    // Only set up a new MediaQueryList if it is not already being listened for.\r\n    if (this._queries.has(query)) {\r\n      return this._queries.get(query)!;\r\n    }\r\n\r\n    const mql = this._mediaMatcher.matchMedia(query);\r\n\r\n    // Create callback for match changes and add it is as a listener.\r\n    const queryObservable = new Observable((observer: Observer<MediaQueryList>) => {\r\n      // Listener callback methods are wrapped to be placed back in ngZone. Callbacks must be placed\r\n      // back into the zone because matchMedia is only included in Zone.js by loading the\r\n      // webapis-media-query.js file alongside the zone.js file.  Additionally, some browsers do not\r\n      // have MediaQueryList inherit from EventTarget, which causes inconsistencies in how Zone.js\r\n      // patches it.\r\n      const handler = (e: any) => this._zone.run(() => observer.next(e));\r\n      mql.addListener(handler);\r\n\r\n      return () => {\r\n        mql.removeListener(handler);\r\n      };\r\n    }).pipe(\r\n      startWith(mql),\r\n      map(({matches}) => ({query, matches})),\r\n      takeUntil(this._destroySubject)\r\n    );\r\n\r\n    // Add the MediaQueryList to the set of queries.\r\n    const output = {observable: queryObservable, mql};\r\n    this._queries.set(query, output);\r\n    return output;\r\n  }\r\n}\r\n\r\n/**\r\n * Split each query string into separate query strings if two queries are provided as comma\r\n * separated.\r\n */\r\nfunction splitQueries(queries: readonly string[]): readonly string[] {\r\n  return queries.map(query => query.split(','))\r\n                .reduce((a1, a2) => a1.concat(a2))\r\n                .map(query => query.trim());\r\n}\r\n","/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n// PascalCase is being used as Breakpoints is used like an enum.\r\n// tslint:disable-next-line:variable-name\r\nexport const Breakpoints = {\r\n  XSmall: '(max-width: 599.98px)',\r\n  Small: '(min-width: 600px) and (max-width: 959.98px)',\r\n  Medium: '(min-width: 960px) and (max-width: 1279.98px)',\r\n  Large: '(min-width: 1280px) and (max-width: 1919.98px)',\r\n  XLarge: '(min-width: 1920px)',\r\n\r\n  Handset: '(max-width: 599.98px) and (orientation: portrait), ' +\r\n           '(max-width: 959.98px) and (orientation: landscape)',\r\n  Tablet: '(min-width: 600px) and (max-width: 839.98px) and (orientation: portrait), ' +\r\n          '(min-width: 960px) and (max-width: 1279.98px) and (orientation: landscape)',\r\n  Web: '(min-width: 840px) and (orientation: portrait), ' +\r\n       '(min-width: 1280px) and (orientation: landscape)',\r\n\r\n  HandsetPortrait: '(max-width: 599.98px) and (orientation: portrait)',\r\n  TabletPortrait: '(min-width: 600px) and (max-width: 839.98px) and (orientation: portrait)',\r\n  WebPortrait: '(min-width: 840px) and (orientation: portrait)',\r\n\r\n  HandsetLandscape: '(max-width: 959.98px) and (orientation: landscape)',\r\n  TabletLandscape: '(min-width: 960px) and (max-width: 1279.98px) and (orientation: landscape)',\r\n  WebLandscape: '(min-width: 1280px) and (orientation: landscape)',\r\n};\r\n","/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n\r\nexport {LayoutModule} from './layout-module';\r\nexport {BreakpointObserver, BreakpointState} from './breakpoints-observer';\r\nexport {Breakpoints} from './breakpoints';\r\nexport {MediaMatcher} from './media-matcher';\r\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './public-api';\n"],"names":[],"mappings":"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"}