{"version":3,"file":"portal.js","sources":["../../../../../../src/cdk/portal/portal-errors.ts","../../../../../../src/cdk/portal/portal.ts","../../../../../../src/cdk/portal/dom-portal-outlet.ts","../../../../../../src/cdk/portal/portal-directives.ts","../../../../../../src/cdk/portal/portal-injector.ts","../../../../../../src/cdk/portal/public-api.ts","../../../../../../src/cdk/portal/index.ts"],"sourcesContent":["/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n\r\n/**\r\n * Throws an exception when attempting to attach a null portal to a host.\r\n * @docs-private\r\n */\r\nexport function throwNullPortalError() {\r\n  throw Error('Must provide a portal to attach');\r\n}\r\n\r\n/**\r\n * Throws an exception when attempting to attach a portal to a host that is already attached.\r\n * @docs-private\r\n */\r\nexport function throwPortalAlreadyAttachedError() {\r\n  throw Error('Host already has a portal attached');\r\n}\r\n\r\n/**\r\n * Throws an exception when attempting to attach a portal to an already-disposed host.\r\n * @docs-private\r\n */\r\nexport function throwPortalOutletAlreadyDisposedError() {\r\n  throw Error('This PortalOutlet has already been disposed');\r\n}\r\n\r\n/**\r\n * Throws an exception when attempting to attach an unknown portal type.\r\n * @docs-private\r\n */\r\nexport function throwUnknownPortalTypeError() {\r\n  throw Error('Attempting to attach an unknown Portal type. BasePortalOutlet accepts either ' +\r\n              'a ComponentPortal or a TemplatePortal.');\r\n}\r\n\r\n/**\r\n * Throws an exception when attempting to attach a portal to a null host.\r\n * @docs-private\r\n */\r\nexport function throwNullPortalOutletError() {\r\n  throw Error('Attempting to attach a portal to a null PortalOutlet');\r\n}\r\n\r\n/**\r\n * Throws an exception when attempting to detach a portal that is not attached.\r\n * @docs-private\r\n */\r\nexport function throwNoPortalAttachedError() {\r\n  throw Error('Attempting to detach a portal that is not attached to a host');\r\n}\r\n","/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n\r\nimport {\r\n    TemplateRef,\r\n    ViewContainerRef,\r\n    ElementRef,\r\n    ComponentRef,\r\n    EmbeddedViewRef,\r\n    Injector,\r\n    ComponentFactoryResolver,\r\n} from '@angular/core';\r\nimport {\r\n    throwNullPortalOutletError,\r\n    throwPortalAlreadyAttachedError,\r\n    throwNoPortalAttachedError,\r\n    throwNullPortalError,\r\n    throwPortalOutletAlreadyDisposedError,\r\n    throwUnknownPortalTypeError\r\n} from './portal-errors';\r\n\r\n/** Interface that can be used to generically type a class. */\r\nexport interface ComponentType<T> {\r\n  new (...args: any[]): T;\r\n}\r\n\r\n/**\r\n * A `Portal` is something that you want to render somewhere else.\r\n * It can be attach to / detached from a `PortalOutlet`.\r\n */\r\nexport abstract class Portal<T> {\r\n  private _attachedHost: PortalOutlet | null;\r\n\r\n  /** Attach this portal to a host. */\r\n  attach(host: PortalOutlet): T {\r\n    if (typeof ngDevMode === 'undefined' || ngDevMode) {\r\n      if (host == null) {\r\n        throwNullPortalOutletError();\r\n      }\r\n\r\n      if (host.hasAttached()) {\r\n        throwPortalAlreadyAttachedError();\r\n      }\r\n    }\r\n\r\n    this._attachedHost = host;\r\n    return <T> host.attach(this);\r\n  }\r\n\r\n  /** Detach this portal from its host */\r\n  detach(): void {\r\n    let host = this._attachedHost;\r\n\r\n    if (host != null) {\r\n      this._attachedHost = null;\r\n      host.detach();\r\n    } else if (typeof ngDevMode === 'undefined' || ngDevMode) {\r\n      throwNoPortalAttachedError();\r\n    }\r\n  }\r\n\r\n  /** Whether this portal is attached to a host. */\r\n  get isAttached(): boolean {\r\n    return this._attachedHost != null;\r\n  }\r\n\r\n  /**\r\n   * Sets the PortalOutlet reference without performing `attach()`. This is used directly by\r\n   * the PortalOutlet when it is performing an `attach()` or `detach()`.\r\n   */\r\n  setAttachedHost(host: PortalOutlet | null) {\r\n    this._attachedHost = host;\r\n  }\r\n}\r\n\r\n\r\n/**\r\n * A `ComponentPortal` is a portal that instantiates some Component upon attachment.\r\n */\r\nexport class ComponentPortal<T> extends Portal<ComponentRef<T>> {\r\n  /** The type of the component that will be instantiated for attachment. */\r\n  component: ComponentType<T>;\r\n\r\n  /**\r\n   * [Optional] Where the attached component should live in Angular's *logical* component tree.\r\n   * This is different from where the component *renders*, which is determined by the PortalOutlet.\r\n   * The origin is necessary when the host is outside of the Angular application context.\r\n   */\r\n  viewContainerRef?: ViewContainerRef | null;\r\n\r\n  /** [Optional] Injector used for the instantiation of the component. */\r\n  injector?: Injector | null;\r\n\r\n  /**\r\n   * Alternate `ComponentFactoryResolver` to use when resolving the associated component.\r\n   * Defaults to using the resolver from the outlet that the portal is attached to.\r\n   */\r\n  componentFactoryResolver?: ComponentFactoryResolver | null;\r\n\r\n  constructor(\r\n      component: ComponentType<T>,\r\n      viewContainerRef?: ViewContainerRef | null,\r\n      injector?: Injector | null,\r\n      componentFactoryResolver?: ComponentFactoryResolver | null) {\r\n    super();\r\n    this.component = component;\r\n    this.viewContainerRef = viewContainerRef;\r\n    this.injector = injector;\r\n    this.componentFactoryResolver = componentFactoryResolver;\r\n  }\r\n}\r\n\r\n/**\r\n * A `TemplatePortal` is a portal that represents some embedded template (TemplateRef).\r\n */\r\nexport class TemplatePortal<C = any> extends Portal<EmbeddedViewRef<C>> {\r\n  /** The embedded template that will be used to instantiate an embedded View in the host. */\r\n  templateRef: TemplateRef<C>;\r\n\r\n  /** Reference to the ViewContainer into which the template will be stamped out. */\r\n  viewContainerRef: ViewContainerRef;\r\n\r\n  /** Contextual data to be passed in to the embedded view. */\r\n  context: C | undefined;\r\n\r\n  constructor(template: TemplateRef<C>, viewContainerRef: ViewContainerRef, context?: C) {\r\n    super();\r\n    this.templateRef = template;\r\n    this.viewContainerRef = viewContainerRef;\r\n    this.context = context;\r\n  }\r\n\r\n  get origin(): ElementRef {\r\n    return this.templateRef.elementRef;\r\n  }\r\n\r\n  /**\r\n   * Attach the portal to the provided `PortalOutlet`.\r\n   * When a context is provided it will override the `context` property of the `TemplatePortal`\r\n   * instance.\r\n   */\r\n  attach(host: PortalOutlet, context: C | undefined = this.context): EmbeddedViewRef<C> {\r\n    this.context = context;\r\n    return super.attach(host);\r\n  }\r\n\r\n  detach(): void {\r\n    this.context = undefined;\r\n    return super.detach();\r\n  }\r\n}\r\n\r\n/**\r\n * A `DomPortal` is a portal whose DOM element will be taken from its current position\r\n * in the DOM and moved into a portal outlet, when it is attached. On detach, the content\r\n * will be restored to its original position.\r\n */\r\nexport class DomPortal<T = HTMLElement> extends Portal<T> {\r\n  /** DOM node hosting the portal's content. */\r\n  readonly element: T;\r\n\r\n  constructor(element: T | ElementRef<T>) {\r\n    super();\r\n    this.element = element instanceof ElementRef ? element.nativeElement : element;\r\n  }\r\n}\r\n\r\n\r\n/** A `PortalOutlet` is an space that can contain a single `Portal`. */\r\nexport interface PortalOutlet {\r\n  /** Attaches a portal to this outlet. */\r\n  attach(portal: Portal<any>): any;\r\n\r\n  /** Detaches the currently attached portal from this outlet. */\r\n  detach(): any;\r\n\r\n  /** Performs cleanup before the outlet is destroyed. */\r\n  dispose(): void;\r\n\r\n  /** Whether there is currently a portal attached to this outlet. */\r\n  hasAttached(): boolean;\r\n}\r\n\r\n/**\r\n * @deprecated Use `PortalOutlet` instead.\r\n * @breaking-change 9.0.0\r\n */\r\nexport type PortalHost = PortalOutlet;\r\n\r\n/**\r\n * Partial implementation of PortalOutlet that handles attaching\r\n * ComponentPortal and TemplatePortal.\r\n */\r\nexport abstract class BasePortalOutlet implements PortalOutlet {\r\n  /** The portal currently attached to the host. */\r\n  protected _attachedPortal: Portal<any> | null;\r\n\r\n  /** A function that will permanently dispose this host. */\r\n  private _disposeFn: (() => void) | null;\r\n\r\n  /** Whether this host has already been permanently disposed. */\r\n  private _isDisposed: boolean = false;\r\n\r\n  /** Whether this host has an attached portal. */\r\n  hasAttached(): boolean {\r\n    return !!this._attachedPortal;\r\n  }\r\n\r\n  attach<T>(portal: ComponentPortal<T>): ComponentRef<T>;\r\n  attach<T>(portal: TemplatePortal<T>): EmbeddedViewRef<T>;\r\n  attach(portal: any): any;\r\n\r\n  /** Attaches a portal. */\r\n  attach(portal: Portal<any>): any {\r\n    if (typeof ngDevMode === 'undefined' || ngDevMode) {\r\n      if (!portal) {\r\n        throwNullPortalError();\r\n      }\r\n\r\n      if (this.hasAttached()) {\r\n        throwPortalAlreadyAttachedError();\r\n      }\r\n\r\n      if (this._isDisposed) {\r\n        throwPortalOutletAlreadyDisposedError();\r\n      }\r\n    }\r\n\r\n    if (portal instanceof ComponentPortal) {\r\n      this._attachedPortal = portal;\r\n      return this.attachComponentPortal(portal);\r\n    } else if (portal instanceof TemplatePortal) {\r\n      this._attachedPortal = portal;\r\n      return this.attachTemplatePortal(portal);\r\n      // @breaking-change 10.0.0 remove null check for `this.attachDomPortal`.\r\n    } else if (this.attachDomPortal && portal instanceof DomPortal) {\r\n      this._attachedPortal = portal;\r\n      return this.attachDomPortal(portal);\r\n    }\r\n\r\n    if (typeof ngDevMode === 'undefined' || ngDevMode) {\r\n      throwUnknownPortalTypeError();\r\n    }\r\n  }\r\n\r\n  abstract attachComponentPortal<T>(portal: ComponentPortal<T>): ComponentRef<T>;\r\n\r\n  abstract attachTemplatePortal<C>(portal: TemplatePortal<C>): EmbeddedViewRef<C>;\r\n\r\n  // @breaking-change 10.0.0 `attachDomPortal` to become a required abstract method.\r\n  readonly attachDomPortal: null | ((portal: DomPortal) => any) = null;\r\n\r\n  /** Detaches a previously attached portal. */\r\n  detach(): void {\r\n    if (this._attachedPortal) {\r\n      this._attachedPortal.setAttachedHost(null);\r\n      this._attachedPortal = null;\r\n    }\r\n\r\n    this._invokeDisposeFn();\r\n  }\r\n\r\n  /** Permanently dispose of this portal host. */\r\n  dispose(): void {\r\n    if (this.hasAttached()) {\r\n      this.detach();\r\n    }\r\n\r\n    this._invokeDisposeFn();\r\n    this._isDisposed = true;\r\n  }\r\n\r\n  /** @docs-private */\r\n  setDisposeFn(fn: () => void) {\r\n    this._disposeFn = fn;\r\n  }\r\n\r\n  private _invokeDisposeFn() {\r\n    if (this._disposeFn) {\r\n      this._disposeFn();\r\n      this._disposeFn = null;\r\n    }\r\n  }\r\n}\r\n\r\n/**\r\n * @deprecated Use `BasePortalOutlet` instead.\r\n * @breaking-change 9.0.0\r\n */\r\nexport abstract class BasePortalHost extends BasePortalOutlet {}\r\n","/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n\r\nimport {\r\n  ComponentFactoryResolver,\r\n  ComponentRef,\r\n  EmbeddedViewRef,\r\n  ApplicationRef,\r\n  Injector,\r\n} from '@angular/core';\r\nimport {BasePortalOutlet, ComponentPortal, TemplatePortal, DomPortal} from './portal';\r\n\r\n\r\n/**\r\n * A PortalOutlet for attaching portals to an arbitrary DOM element outside of the Angular\r\n * application context.\r\n */\r\nexport class DomPortalOutlet extends BasePortalOutlet {\r\n  private _document: Document;\r\n\r\n  constructor(\r\n      /** Element into which the content is projected. */\r\n      public outletElement: Element,\r\n      private _componentFactoryResolver: ComponentFactoryResolver,\r\n      private _appRef: ApplicationRef,\r\n      private _defaultInjector: Injector,\r\n\r\n      /**\r\n       * @deprecated `_document` Parameter to be made required.\r\n       * @breaking-change 10.0.0\r\n       */\r\n      _document?: any) {\r\n    super();\r\n    this._document = _document;\r\n  }\r\n\r\n  /**\r\n   * Attach the given ComponentPortal to DOM element using the ComponentFactoryResolver.\r\n   * @param portal Portal to be attached\r\n   * @returns Reference to the created component.\r\n   */\r\n  attachComponentPortal<T>(portal: ComponentPortal<T>): ComponentRef<T> {\r\n    const resolver = portal.componentFactoryResolver || this._componentFactoryResolver;\r\n    const componentFactory = resolver.resolveComponentFactory(portal.component);\r\n    let componentRef: ComponentRef<T>;\r\n\r\n    // If the portal specifies a ViewContainerRef, we will use that as the attachment point\r\n    // for the component (in terms of Angular's component tree, not rendering).\r\n    // When the ViewContainerRef is missing, we use the factory to create the component directly\r\n    // and then manually attach the view to the application.\r\n    if (portal.viewContainerRef) {\r\n      componentRef = portal.viewContainerRef.createComponent(\r\n          componentFactory,\r\n          portal.viewContainerRef.length,\r\n          portal.injector || portal.viewContainerRef.injector);\r\n\r\n      this.setDisposeFn(() => componentRef.destroy());\r\n    } else {\r\n      componentRef = componentFactory.create(portal.injector || this._defaultInjector);\r\n      this._appRef.attachView(componentRef.hostView);\r\n      this.setDisposeFn(() => {\r\n        this._appRef.detachView(componentRef.hostView);\r\n        componentRef.destroy();\r\n      });\r\n    }\r\n    // At this point the component has been instantiated, so we move it to the location in the DOM\r\n    // where we want it to be rendered.\r\n    this.outletElement.appendChild(this._getComponentRootNode(componentRef));\r\n    this._attachedPortal = portal;\r\n\r\n    return componentRef;\r\n  }\r\n\r\n  /**\r\n   * Attaches a template portal to the DOM as an embedded view.\r\n   * @param portal Portal to be attached.\r\n   * @returns Reference to the created embedded view.\r\n   */\r\n  attachTemplatePortal<C>(portal: TemplatePortal<C>): EmbeddedViewRef<C> {\r\n    let viewContainer = portal.viewContainerRef;\r\n    let viewRef = viewContainer.createEmbeddedView(portal.templateRef, portal.context);\r\n\r\n    // The method `createEmbeddedView` will add the view as a child of the viewContainer.\r\n    // But for the DomPortalOutlet the view can be added everywhere in the DOM\r\n    // (e.g Overlay Container) To move the view to the specified host element. We just\r\n    // re-append the existing root nodes.\r\n    viewRef.rootNodes.forEach(rootNode => this.outletElement.appendChild(rootNode));\r\n\r\n    // Note that we want to detect changes after the nodes have been moved so that\r\n    // any directives inside the portal that are looking at the DOM inside a lifecycle\r\n    // hook won't be invoked too early.\r\n    viewRef.detectChanges();\r\n\r\n    this.setDisposeFn((() => {\r\n      let index = viewContainer.indexOf(viewRef);\r\n      if (index !== -1) {\r\n        viewContainer.remove(index);\r\n      }\r\n    }));\r\n\r\n    this._attachedPortal = portal;\r\n\r\n    // TODO(jelbourn): Return locals from view.\r\n    return viewRef;\r\n  }\r\n\r\n  /**\r\n   * Attaches a DOM portal by transferring its content into the outlet.\r\n   * @param portal Portal to be attached.\r\n   * @deprecated To be turned into a method.\r\n   * @breaking-change 10.0.0\r\n   */\r\n  attachDomPortal = (portal: DomPortal) => {\r\n    // @breaking-change 10.0.0 Remove check and error once the\r\n    // `_document` constructor parameter is required.\r\n    if (!this._document && (typeof ngDevMode === 'undefined' || ngDevMode)) {\r\n      throw Error('Cannot attach DOM portal without _document constructor parameter');\r\n    }\r\n\r\n    const element = portal.element;\r\n    if (!element.parentNode && (typeof ngDevMode === 'undefined' || ngDevMode)) {\r\n      throw Error('DOM portal content must be attached to a parent node.');\r\n    }\r\n\r\n    // Anchor used to save the element's previous position so\r\n    // that we can restore it when the portal is detached.\r\n    const anchorNode = this._document.createComment('dom-portal');\r\n\r\n    element.parentNode!.insertBefore(anchorNode, element);\r\n    this.outletElement.appendChild(element);\r\n    this._attachedPortal = portal;\r\n\r\n    super.setDisposeFn(() => {\r\n      // We can't use `replaceWith` here because IE doesn't support it.\r\n      if (anchorNode.parentNode) {\r\n        anchorNode.parentNode.replaceChild(element, anchorNode);\r\n      }\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Clears out a portal from the DOM.\r\n   */\r\n  dispose(): void {\r\n    super.dispose();\r\n    if (this.outletElement.parentNode != null) {\r\n      this.outletElement.parentNode.removeChild(this.outletElement);\r\n    }\r\n  }\r\n\r\n  /** Gets the root HTMLElement for an instantiated component. */\r\n  private _getComponentRootNode(componentRef: ComponentRef<any>): HTMLElement {\r\n    return (componentRef.hostView as EmbeddedViewRef<any>).rootNodes[0] as HTMLElement;\r\n  }\r\n}\r\n\r\n/**\r\n * @deprecated Use `DomPortalOutlet` instead.\r\n * @breaking-change 9.0.0\r\n */\r\nexport class DomPortalHost extends DomPortalOutlet {}\r\n","/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n\r\nimport {\r\n  ComponentFactoryResolver,\r\n  ComponentRef,\r\n  Directive,\r\n  EmbeddedViewRef,\r\n  EventEmitter,\r\n  NgModule,\r\n  OnDestroy,\r\n  OnInit,\r\n  Output,\r\n  TemplateRef,\r\n  ViewContainerRef,\r\n  Inject,\r\n} from '@angular/core';\r\nimport {DOCUMENT} from '@angular/common';\r\nimport {BasePortalOutlet, ComponentPortal, Portal, TemplatePortal, DomPortal} from './portal';\r\n\r\n\r\n/**\r\n * Directive version of a `TemplatePortal`. Because the directive *is* a TemplatePortal,\r\n * the directive instance itself can be attached to a host, enabling declarative use of portals.\r\n */\r\n@Directive({\r\n  selector: '[cdkPortal]',\r\n  exportAs: 'cdkPortal',\r\n})\r\nexport class CdkPortal extends TemplatePortal {\r\n  constructor(templateRef: TemplateRef<any>, viewContainerRef: ViewContainerRef) {\r\n    super(templateRef, viewContainerRef);\r\n  }\r\n}\r\n\r\n/**\r\n * @deprecated Use `CdkPortal` instead.\r\n * @breaking-change 9.0.0\r\n */\r\n@Directive({\r\n  selector: '[cdk-portal], [portal]',\r\n  exportAs: 'cdkPortal',\r\n  providers: [{\r\n    provide: CdkPortal,\r\n    useExisting: TemplatePortalDirective\r\n  }]\r\n})\r\nexport class TemplatePortalDirective extends CdkPortal {}\r\n\r\n/**\r\n * Possible attached references to the CdkPortalOutlet.\r\n */\r\nexport type CdkPortalOutletAttachedRef = ComponentRef<any> | EmbeddedViewRef<any> | null;\r\n\r\n\r\n/**\r\n * Directive version of a PortalOutlet. Because the directive *is* a PortalOutlet, portals can be\r\n * directly attached to it, enabling declarative use.\r\n *\r\n * Usage:\r\n * `<ng-template [cdkPortalOutlet]=\"greeting\"></ng-template>`\r\n */\r\n@Directive({\r\n  selector: '[cdkPortalOutlet]',\r\n  exportAs: 'cdkPortalOutlet',\r\n  inputs: ['portal: cdkPortalOutlet']\r\n})\r\nexport class CdkPortalOutlet extends BasePortalOutlet implements OnInit, OnDestroy {\r\n  private _document: Document;\r\n\r\n  /** Whether the portal component is initialized. */\r\n  private _isInitialized = false;\r\n\r\n  /** Reference to the currently-attached component/view ref. */\r\n  private _attachedRef: CdkPortalOutletAttachedRef;\r\n\r\n  constructor(\r\n      private _componentFactoryResolver: ComponentFactoryResolver,\r\n      private _viewContainerRef: ViewContainerRef,\r\n\r\n      /**\r\n       * @deprecated `_document` parameter to be made required.\r\n       * @breaking-change 9.0.0\r\n       */\r\n      @Inject(DOCUMENT) _document?: any) {\r\n    super();\r\n    this._document = _document;\r\n  }\r\n\r\n  /** Portal associated with the Portal outlet. */\r\n  get portal(): Portal<any> | null {\r\n    return this._attachedPortal;\r\n  }\r\n\r\n  set portal(portal: Portal<any> | null) {\r\n    // Ignore the cases where the `portal` is set to a falsy value before the lifecycle hooks have\r\n    // run. This handles the cases where the user might do something like `<div cdkPortalOutlet>`\r\n    // and attach a portal programmatically in the parent component. When Angular does the first CD\r\n    // round, it will fire the setter with empty string, causing the user's content to be cleared.\r\n    if (this.hasAttached() && !portal && !this._isInitialized) {\r\n      return;\r\n    }\r\n\r\n    if (this.hasAttached()) {\r\n      super.detach();\r\n    }\r\n\r\n    if (portal) {\r\n      super.attach(portal);\r\n    }\r\n\r\n    this._attachedPortal = portal;\r\n  }\r\n\r\n  /** Emits when a portal is attached to the outlet. */\r\n  @Output() attached: EventEmitter<CdkPortalOutletAttachedRef> =\r\n      new EventEmitter<CdkPortalOutletAttachedRef>();\r\n\r\n  /** Component or view reference that is attached to the portal. */\r\n  get attachedRef(): CdkPortalOutletAttachedRef {\r\n    return this._attachedRef;\r\n  }\r\n\r\n  ngOnInit() {\r\n    this._isInitialized = true;\r\n  }\r\n\r\n  ngOnDestroy() {\r\n    super.dispose();\r\n    this._attachedPortal = null;\r\n    this._attachedRef = null;\r\n  }\r\n\r\n  /**\r\n   * Attach the given ComponentPortal to this PortalOutlet using the ComponentFactoryResolver.\r\n   *\r\n   * @param portal Portal to be attached to the portal outlet.\r\n   * @returns Reference to the created component.\r\n   */\r\n  attachComponentPortal<T>(portal: ComponentPortal<T>): ComponentRef<T> {\r\n    portal.setAttachedHost(this);\r\n\r\n    // If the portal specifies an origin, use that as the logical location of the component\r\n    // in the application tree. Otherwise use the location of this PortalOutlet.\r\n    const viewContainerRef = portal.viewContainerRef != null ?\r\n        portal.viewContainerRef :\r\n        this._viewContainerRef;\r\n\r\n    const resolver = portal.componentFactoryResolver || this._componentFactoryResolver;\r\n    const componentFactory = resolver.resolveComponentFactory(portal.component);\r\n    const ref = viewContainerRef.createComponent(\r\n        componentFactory, viewContainerRef.length,\r\n        portal.injector || viewContainerRef.injector);\r\n\r\n    // If we're using a view container that's different from the injected one (e.g. when the portal\r\n    // specifies its own) we need to move the component into the outlet, otherwise it'll be rendered\r\n    // inside of the alternate view container.\r\n    if (viewContainerRef !== this._viewContainerRef) {\r\n      this._getRootNode().appendChild((ref.hostView as EmbeddedViewRef<any>).rootNodes[0]);\r\n    }\r\n\r\n    super.setDisposeFn(() => ref.destroy());\r\n    this._attachedPortal = portal;\r\n    this._attachedRef = ref;\r\n    this.attached.emit(ref);\r\n\r\n    return ref;\r\n  }\r\n\r\n  /**\r\n   * Attach the given TemplatePortal to this PortalHost as an embedded View.\r\n   * @param portal Portal to be attached.\r\n   * @returns Reference to the created embedded view.\r\n   */\r\n  attachTemplatePortal<C>(portal: TemplatePortal<C>): EmbeddedViewRef<C> {\r\n    portal.setAttachedHost(this);\r\n    const viewRef = this._viewContainerRef.createEmbeddedView(portal.templateRef, portal.context);\r\n    super.setDisposeFn(() => this._viewContainerRef.clear());\r\n\r\n    this._attachedPortal = portal;\r\n    this._attachedRef = viewRef;\r\n    this.attached.emit(viewRef);\r\n\r\n    return viewRef;\r\n  }\r\n\r\n  /**\r\n   * Attaches the given DomPortal to this PortalHost by moving all of the portal content into it.\r\n   * @param portal Portal to be attached.\r\n   * @deprecated To be turned into a method.\r\n   * @breaking-change 10.0.0\r\n   */\r\n  attachDomPortal = (portal: DomPortal) => {\r\n    // @breaking-change 9.0.0 Remove check and error once the\r\n    // `_document` constructor parameter is required.\r\n    if (!this._document && (typeof ngDevMode === 'undefined' || ngDevMode)) {\r\n      throw Error('Cannot attach DOM portal without _document constructor parameter');\r\n    }\r\n\r\n    const element = portal.element;\r\n    if (!element.parentNode && (typeof ngDevMode === 'undefined' || ngDevMode)) {\r\n      throw Error('DOM portal content must be attached to a parent node.');\r\n    }\r\n\r\n    // Anchor used to save the element's previous position so\r\n    // that we can restore it when the portal is detached.\r\n    const anchorNode = this._document.createComment('dom-portal');\r\n\r\n    portal.setAttachedHost(this);\r\n    element.parentNode!.insertBefore(anchorNode, element);\r\n    this._getRootNode().appendChild(element);\r\n    this._attachedPortal = portal;\r\n\r\n    super.setDisposeFn(() => {\r\n      if (anchorNode.parentNode) {\r\n        anchorNode.parentNode!.replaceChild(element, anchorNode);\r\n      }\r\n    });\r\n  }\r\n\r\n  /** Gets the root node of the portal outlet. */\r\n  private _getRootNode(): HTMLElement {\r\n    const nativeElement: Node = this._viewContainerRef.element.nativeElement;\r\n\r\n    // The directive could be set on a template which will result in a comment\r\n    // node being the root. Use the comment's parent node if that is the case.\r\n    return (nativeElement.nodeType === nativeElement.ELEMENT_NODE ?\r\n           nativeElement : nativeElement.parentNode!) as HTMLElement;\r\n  }\r\n\r\n  static ngAcceptInputType_portal: Portal<any> | null | undefined | '';\r\n}\r\n\r\n/**\r\n * @deprecated Use `CdkPortalOutlet` instead.\r\n * @breaking-change 9.0.0\r\n */\r\n@Directive({\r\n  selector: '[cdkPortalHost], [portalHost]',\r\n  exportAs: 'cdkPortalHost',\r\n  inputs: ['portal: cdkPortalHost'],\r\n  providers: [{\r\n    provide: CdkPortalOutlet,\r\n    useExisting: PortalHostDirective\r\n  }]\r\n})\r\nexport class PortalHostDirective extends CdkPortalOutlet {}\r\n\r\n\r\n@NgModule({\r\n  exports: [CdkPortal, CdkPortalOutlet, TemplatePortalDirective, PortalHostDirective],\r\n  declarations: [CdkPortal, CdkPortalOutlet, TemplatePortalDirective, PortalHostDirective],\r\n})\r\nexport class PortalModule {}\r\n","/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n\r\nimport {Injector} from '@angular/core';\r\n\r\n/**\r\n * Custom injector to be used when providing custom\r\n * injection tokens to components inside a portal.\r\n * @docs-private\r\n * @deprecated Use `Injector.create` instead.\r\n * @breaking-change 11.0.0\r\n */\r\nexport class PortalInjector implements Injector {\r\n  constructor(\r\n    private _parentInjector: Injector,\r\n    private _customTokens: WeakMap<any, any>) { }\r\n\r\n  get(token: any, notFoundValue?: any): any {\r\n    const value = this._customTokens.get(token);\r\n\r\n    if (typeof value !== 'undefined') {\r\n      return value;\r\n    }\r\n\r\n    return this._parentInjector.get<any>(token, notFoundValue);\r\n  }\r\n}\r\n","/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n\r\nexport * from './portal';\r\nexport * from './dom-portal-outlet';\r\nexport * from './portal-directives';\r\nexport * from './portal-injector';\r\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './public-api';\n"],"names":[],"mappings":"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"}