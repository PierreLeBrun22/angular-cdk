{"version":3,"file":"text-field.js","sources":["../../../../../../src/cdk/text-field/autofill.ts","../../../../../../src/cdk/text-field/autosize.ts","../../../../../../src/cdk/text-field/text-field-module.ts","../../../../../../src/cdk/text-field/public-api.ts","../../../../../../src/cdk/text-field/index.ts"],"sourcesContent":["/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n\r\nimport {Platform, normalizePassiveListenerOptions} from '@angular/cdk/platform';\r\nimport {\r\n  Directive,\r\n  ElementRef,\r\n  EventEmitter,\r\n  Injectable,\r\n  NgZone,\r\n  OnDestroy,\r\n  OnInit,\r\n  Output,\r\n} from '@angular/core';\r\nimport {coerceElement} from '@angular/cdk/coercion';\r\nimport {EMPTY, Observable, Subject} from 'rxjs';\r\n\r\n\r\n/** An event that is emitted when the autofill state of an input changes. */\r\nexport type AutofillEvent = {\r\n  /** The element whose autofill state changes. */\r\n  target: Element;\r\n  /** Whether the element is currently autofilled. */\r\n  isAutofilled: boolean;\r\n};\r\n\r\n\r\n/** Used to track info about currently monitored elements. */\r\ntype MonitoredElementInfo = {\r\n  subject: Subject<AutofillEvent>;\r\n  unlisten: () => void;\r\n};\r\n\r\n\r\n/** Options to pass to the animationstart listener. */\r\nconst listenerOptions = normalizePassiveListenerOptions({passive: true});\r\n\r\n\r\n/**\r\n * An injectable service that can be used to monitor the autofill state of an input.\r\n * Based on the following blog post:\r\n * https://medium.com/@brunn/detecting-autofilled-fields-in-javascript-aed598d25da7\r\n */\r\n@Injectable({providedIn: 'root'})\r\nexport class AutofillMonitor implements OnDestroy {\r\n  private _monitoredElements = new Map<Element, MonitoredElementInfo>();\r\n\r\n  constructor(private _platform: Platform, private _ngZone: NgZone) {}\r\n\r\n  /**\r\n   * Monitor for changes in the autofill state of the given input element.\r\n   * @param element The element to monitor.\r\n   * @return A stream of autofill state changes.\r\n   */\r\n  monitor(element: Element): Observable<AutofillEvent>;\r\n\r\n  /**\r\n   * Monitor for changes in the autofill state of the given input element.\r\n   * @param element The element to monitor.\r\n   * @return A stream of autofill state changes.\r\n   */\r\n  monitor(element: ElementRef<Element>): Observable<AutofillEvent>;\r\n\r\n  monitor(elementOrRef: Element | ElementRef<Element>): Observable<AutofillEvent> {\r\n    if (!this._platform.isBrowser) {\r\n      return EMPTY;\r\n    }\r\n\r\n    const element = coerceElement(elementOrRef);\r\n    const info = this._monitoredElements.get(element);\r\n\r\n    if (info) {\r\n      return info.subject;\r\n    }\r\n\r\n    const result = new Subject<AutofillEvent>();\r\n    const cssClass = 'cdk-text-field-autofilled';\r\n    const listener = ((event: AnimationEvent) => {\r\n      // Animation events fire on initial element render, we check for the presence of the autofill\r\n      // CSS class to make sure this is a real change in state, not just the initial render before\r\n      // we fire off events.\r\n      if (event.animationName === 'cdk-text-field-autofill-start' &&\r\n          !element.classList.contains(cssClass)) {\r\n        element.classList.add(cssClass);\r\n        this._ngZone.run(() => result.next({target: event.target as Element, isAutofilled: true}));\r\n      } else if (event.animationName === 'cdk-text-field-autofill-end' &&\r\n          element.classList.contains(cssClass)) {\r\n        element.classList.remove(cssClass);\r\n        this._ngZone.run(() => result.next({target: event.target as Element, isAutofilled: false}));\r\n      }\r\n    }) as EventListenerOrEventListenerObject;\r\n\r\n    this._ngZone.runOutsideAngular(() => {\r\n      element.addEventListener('animationstart', listener, listenerOptions);\r\n      element.classList.add('cdk-text-field-autofill-monitored');\r\n    });\r\n\r\n    this._monitoredElements.set(element, {\r\n      subject: result,\r\n      unlisten: () => {\r\n        element.removeEventListener('animationstart', listener, listenerOptions);\r\n      }\r\n    });\r\n\r\n    return result;\r\n  }\r\n\r\n  /**\r\n   * Stop monitoring the autofill state of the given input element.\r\n   * @param element The element to stop monitoring.\r\n   */\r\n  stopMonitoring(element: Element): void;\r\n\r\n  /**\r\n   * Stop monitoring the autofill state of the given input element.\r\n   * @param element The element to stop monitoring.\r\n   */\r\n  stopMonitoring(element: ElementRef<Element>): void;\r\n\r\n  stopMonitoring(elementOrRef: Element | ElementRef<Element>): void {\r\n    const element = coerceElement(elementOrRef);\r\n    const info = this._monitoredElements.get(element);\r\n\r\n    if (info) {\r\n      info.unlisten();\r\n      info.subject.complete();\r\n      element.classList.remove('cdk-text-field-autofill-monitored');\r\n      element.classList.remove('cdk-text-field-autofilled');\r\n      this._monitoredElements.delete(element);\r\n    }\r\n  }\r\n\r\n  ngOnDestroy() {\r\n    this._monitoredElements.forEach((_info, element) => this.stopMonitoring(element));\r\n  }\r\n}\r\n\r\n\r\n/** A directive that can be used to monitor the autofill state of an input. */\r\n@Directive({\r\n  selector: '[cdkAutofill]',\r\n})\r\nexport class CdkAutofill implements OnDestroy, OnInit {\r\n  /** Emits when the autofill state of the element changes. */\r\n  @Output() cdkAutofill: EventEmitter<AutofillEvent> = new EventEmitter<AutofillEvent>();\r\n\r\n  constructor(private _elementRef: ElementRef<HTMLElement>,\r\n              private _autofillMonitor: AutofillMonitor) {}\r\n\r\n  ngOnInit() {\r\n    this._autofillMonitor\r\n      .monitor(this._elementRef)\r\n      .subscribe(event => this.cdkAutofill.emit(event));\r\n  }\r\n\r\n  ngOnDestroy() {\r\n    this._autofillMonitor.stopMonitoring(this._elementRef);\r\n  }\r\n}\r\n","/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n\r\nimport {\r\n  BooleanInput,\r\n  coerceBooleanProperty,\r\n  coerceNumberProperty,\r\n  NumberInput\r\n} from '@angular/cdk/coercion';\r\nimport {\r\n  Directive,\r\n  ElementRef,\r\n  Input,\r\n  AfterViewInit,\r\n  DoCheck,\r\n  OnDestroy,\r\n  NgZone,\r\n  HostListener,\r\n  Optional,\r\n  Inject,\r\n} from '@angular/core';\r\nimport {Platform} from '@angular/cdk/platform';\r\nimport {auditTime, takeUntil} from 'rxjs/operators';\r\nimport {fromEvent, Subject} from 'rxjs';\r\nimport {DOCUMENT} from '@angular/common';\r\n\r\n/** Directive to automatically resize a textarea to fit its content. */\r\n@Directive({\r\n  selector: 'textarea[cdkTextareaAutosize]',\r\n  exportAs: 'cdkTextareaAutosize',\r\n  host: {\r\n    'class': 'cdk-textarea-autosize',\r\n    // Textarea elements that have the directive applied should have a single row by default.\r\n    // Browsers normally show two rows by default and therefore this limits the minRows binding.\r\n    'rows': '1',\r\n  },\r\n})\r\nexport class CdkTextareaAutosize implements AfterViewInit, DoCheck, OnDestroy {\r\n  /** Keep track of the previous textarea value to avoid resizing when the value hasn't changed. */\r\n  private _previousValue?: string;\r\n  private _initialHeight: string | undefined;\r\n  private readonly _destroyed = new Subject<void>();\r\n\r\n  private _minRows: number;\r\n  private _maxRows: number;\r\n  private _enabled: boolean = true;\r\n\r\n  /**\r\n   * Value of minRows as of last resize. If the minRows has decreased, the\r\n   * height of the textarea needs to be recomputed to reflect the new minimum. The maxHeight\r\n   * does not have the same problem because it does not affect the textarea's scrollHeight.\r\n   */\r\n  private _previousMinRows: number = -1;\r\n\r\n  private _textareaElement: HTMLTextAreaElement;\r\n\r\n  /** Minimum amount of rows in the textarea. */\r\n  @Input('cdkAutosizeMinRows')\r\n  get minRows(): number { return this._minRows; }\r\n  set minRows(value: number) {\r\n    this._minRows = coerceNumberProperty(value);\r\n    this._setMinHeight();\r\n  }\r\n\r\n  /** Maximum amount of rows in the textarea. */\r\n  @Input('cdkAutosizeMaxRows')\r\n  get maxRows(): number { return this._maxRows; }\r\n  set maxRows(value: number) {\r\n    this._maxRows = coerceNumberProperty(value);\r\n    this._setMaxHeight();\r\n  }\r\n\r\n  /** Whether autosizing is enabled or not */\r\n  @Input('cdkTextareaAutosize')\r\n  get enabled(): boolean { return this._enabled; }\r\n  set enabled(value: boolean) {\r\n    value = coerceBooleanProperty(value);\r\n\r\n    // Only act if the actual value changed. This specifically helps to not run\r\n    // resizeToFitContent too early (i.e. before ngAfterViewInit)\r\n    if (this._enabled !== value) {\r\n      (this._enabled = value) ? this.resizeToFitContent(true) : this.reset();\r\n    }\r\n  }\r\n\r\n  /** Cached height of a textarea with a single row. */\r\n  private _cachedLineHeight: number;\r\n\r\n  /** Used to reference correct document/window */\r\n  protected _document?: Document;\r\n\r\n  /** Class that should be applied to the textarea while it's being measured. */\r\n  private _measuringClass: string;\r\n\r\n  constructor(private _elementRef: ElementRef<HTMLElement>,\r\n              private _platform: Platform,\r\n              private _ngZone: NgZone,\r\n              /** @breaking-change 11.0.0 make document required */\r\n              @Optional() @Inject(DOCUMENT) document?: any) {\r\n    this._document = document;\r\n\r\n    this._textareaElement = this._elementRef.nativeElement as HTMLTextAreaElement;\r\n    this._measuringClass = _platform.FIREFOX ?\r\n      'cdk-textarea-autosize-measuring-firefox' :\r\n      'cdk-textarea-autosize-measuring';\r\n  }\r\n\r\n  /** Sets the minimum height of the textarea as determined by minRows. */\r\n  _setMinHeight(): void {\r\n    const minHeight = this.minRows && this._cachedLineHeight ?\r\n        `${this.minRows * this._cachedLineHeight}px` : null;\r\n\r\n    if (minHeight)  {\r\n      this._textareaElement.style.minHeight = minHeight;\r\n    }\r\n  }\r\n\r\n  /** Sets the maximum height of the textarea as determined by maxRows. */\r\n  _setMaxHeight(): void {\r\n    const maxHeight = this.maxRows && this._cachedLineHeight ?\r\n        `${this.maxRows * this._cachedLineHeight}px` : null;\r\n\r\n    if (maxHeight) {\r\n      this._textareaElement.style.maxHeight = maxHeight;\r\n    }\r\n  }\r\n\r\n  ngAfterViewInit() {\r\n    if (this._platform.isBrowser) {\r\n      // Remember the height which we started with in case autosizing is disabled\r\n      this._initialHeight = this._textareaElement.style.height;\r\n\r\n      this.resizeToFitContent();\r\n\r\n      this._ngZone.runOutsideAngular(() => {\r\n        const window = this._getWindow();\r\n\r\n        fromEvent(window, 'resize')\r\n          .pipe(auditTime(16), takeUntil(this._destroyed))\r\n          .subscribe(() => this.resizeToFitContent(true));\r\n      });\r\n    }\r\n  }\r\n\r\n  ngOnDestroy() {\r\n    this._destroyed.next();\r\n    this._destroyed.complete();\r\n  }\r\n\r\n  /**\r\n   * Cache the height of a single-row textarea if it has not already been cached.\r\n   *\r\n   * We need to know how large a single \"row\" of a textarea is in order to apply minRows and\r\n   * maxRows. For the initial version, we will assume that the height of a single line in the\r\n   * textarea does not ever change.\r\n   */\r\n  private _cacheTextareaLineHeight(): void {\r\n    if (this._cachedLineHeight) {\r\n      return;\r\n    }\r\n\r\n    // Use a clone element because we have to override some styles.\r\n    let textareaClone = this._textareaElement.cloneNode(false) as HTMLTextAreaElement;\r\n    textareaClone.rows = 1;\r\n\r\n    // Use `position: absolute` so that this doesn't cause a browser layout and use\r\n    // `visibility: hidden` so that nothing is rendered. Clear any other styles that\r\n    // would affect the height.\r\n    textareaClone.style.position = 'absolute';\r\n    textareaClone.style.visibility = 'hidden';\r\n    textareaClone.style.border = 'none';\r\n    textareaClone.style.padding = '0';\r\n    textareaClone.style.height = '';\r\n    textareaClone.style.minHeight = '';\r\n    textareaClone.style.maxHeight = '';\r\n\r\n    // In Firefox it happens that textarea elements are always bigger than the specified amount\r\n    // of rows. This is because Firefox tries to add extra space for the horizontal scrollbar.\r\n    // As a workaround that removes the extra space for the scrollbar, we can just set overflow\r\n    // to hidden. This ensures that there is no invalid calculation of the line height.\r\n    // See Firefox bug report: https://bugzilla.mozilla.org/show_bug.cgi?id=33654\r\n    textareaClone.style.overflow = 'hidden';\r\n\r\n    this._textareaElement.parentNode!.appendChild(textareaClone);\r\n    this._cachedLineHeight = textareaClone.clientHeight;\r\n    this._textareaElement.parentNode!.removeChild(textareaClone);\r\n\r\n    // Min and max heights have to be re-calculated if the cached line height changes\r\n    this._setMinHeight();\r\n    this._setMaxHeight();\r\n  }\r\n\r\n  ngDoCheck() {\r\n    if (this._platform.isBrowser) {\r\n      this.resizeToFitContent();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Resize the textarea to fit its content.\r\n   * @param force Whether to force a height recalculation. By default the height will be\r\n   *    recalculated only if the value changed since the last call.\r\n   */\r\n  resizeToFitContent(force: boolean = false) {\r\n    // If autosizing is disabled, just skip everything else\r\n    if (!this._enabled) {\r\n      return;\r\n    }\r\n\r\n    this._cacheTextareaLineHeight();\r\n\r\n    // If we haven't determined the line-height yet, we know we're still hidden and there's no point\r\n    // in checking the height of the textarea.\r\n    if (!this._cachedLineHeight) {\r\n      return;\r\n    }\r\n\r\n    const textarea = this._elementRef.nativeElement as HTMLTextAreaElement;\r\n    const value = textarea.value;\r\n\r\n    // Only resize if the value or minRows have changed since these calculations can be expensive.\r\n    if (!force && this._minRows === this._previousMinRows && value === this._previousValue) {\r\n      return;\r\n    }\r\n\r\n    const placeholderText = textarea.placeholder;\r\n\r\n    // Reset the textarea height to auto in order to shrink back to its default size.\r\n    // Also temporarily force overflow:hidden, so scroll bars do not interfere with calculations.\r\n    // Long placeholders that are wider than the textarea width may lead to a bigger scrollHeight\r\n    // value. To ensure that the scrollHeight is not bigger than the content, the placeholders\r\n    // need to be removed temporarily.\r\n    textarea.classList.add(this._measuringClass);\r\n    textarea.placeholder = '';\r\n\r\n    // The measuring class includes a 2px padding to workaround an issue with Chrome,\r\n    // so we account for that extra space here by subtracting 4 (2px top + 2px bottom).\r\n    const height = textarea.scrollHeight - 4;\r\n\r\n    // Use the scrollHeight to know how large the textarea *would* be if fit its entire value.\r\n    textarea.style.height = `${height}px`;\r\n    textarea.classList.remove(this._measuringClass);\r\n    textarea.placeholder = placeholderText;\r\n\r\n    this._ngZone.runOutsideAngular(() => {\r\n      if (typeof requestAnimationFrame !== 'undefined') {\r\n        requestAnimationFrame(() => this._scrollToCaretPosition(textarea));\r\n      } else {\r\n        setTimeout(() => this._scrollToCaretPosition(textarea));\r\n      }\r\n    });\r\n\r\n    this._previousValue = value;\r\n    this._previousMinRows = this._minRows;\r\n  }\r\n\r\n  /**\r\n   * Resets the textarea to its original size\r\n   */\r\n  reset() {\r\n    // Do not try to change the textarea, if the initialHeight has not been determined yet\r\n    // This might potentially remove styles when reset() is called before ngAfterViewInit\r\n    if (this._initialHeight !== undefined) {\r\n      this._textareaElement.style.height = this._initialHeight;\r\n    }\r\n  }\r\n\r\n  // In Ivy the `host` metadata will be merged, whereas in ViewEngine it is overridden. In order\r\n  // to avoid double event listeners, we need to use `HostListener`. Once Ivy is the default, we\r\n  // can move this back into `host`.\r\n  // tslint:disable:no-host-decorator-in-concrete\r\n  @HostListener('input')\r\n  _noopInputHandler() {\r\n    // no-op handler that ensures we're running change detection on input events.\r\n  }\r\n\r\n  /** Access injected document if available or fallback to global document reference */\r\n  private _getDocument(): Document {\r\n    return this._document || document;\r\n  }\r\n\r\n  /** Use defaultView of injected document if available or fallback to global window reference */\r\n  private _getWindow(): Window {\r\n    const doc = this._getDocument();\r\n    return doc.defaultView || window;\r\n  }\r\n\r\n  /**\r\n   * Scrolls a textarea to the caret position. On Firefox resizing the textarea will\r\n   * prevent it from scrolling to the caret position. We need to re-set the selection\r\n   * in order for it to scroll to the proper position.\r\n   */\r\n  private _scrollToCaretPosition(textarea: HTMLTextAreaElement) {\r\n    const {selectionStart, selectionEnd} = textarea;\r\n    const document = this._getDocument();\r\n\r\n    // IE will throw an \"Unspecified error\" if we try to set the selection range after the\r\n    // element has been removed from the DOM. Assert that the directive hasn't been destroyed\r\n    // between the time we requested the animation frame and when it was executed.\r\n    // Also note that we have to assert that the textarea is focused before we set the\r\n    // selection range. Setting the selection range on a non-focused textarea will cause\r\n    // it to receive focus on IE and Edge.\r\n    if (!this._destroyed.isStopped && document.activeElement === textarea) {\r\n      textarea.setSelectionRange(selectionStart, selectionEnd);\r\n    }\r\n  }\r\n\r\n  static ngAcceptInputType_minRows: NumberInput;\r\n  static ngAcceptInputType_maxRows: NumberInput;\r\n  static ngAcceptInputType_enabled: BooleanInput;\r\n}\r\n","/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n\r\nimport {PlatformModule} from '@angular/cdk/platform';\r\nimport {NgModule} from '@angular/core';\r\nimport {CdkAutofill} from './autofill';\r\nimport {CdkTextareaAutosize} from './autosize';\r\n\r\n\r\n@NgModule({\r\n  declarations: [CdkAutofill, CdkTextareaAutosize],\r\n  imports: [PlatformModule],\r\n  exports: [CdkAutofill, CdkTextareaAutosize],\r\n})\r\nexport class TextFieldModule {}\r\n","/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n\r\nexport * from './autofill';\r\nexport * from './autosize';\r\nexport * from './text-field-module';\r\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './public-api';\n"],"names":[],"mappings":"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"}