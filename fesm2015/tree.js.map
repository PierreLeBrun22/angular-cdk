{"version":3,"file":"tree.js","sources":["../../../../../../src/cdk/tree/control/base-tree-control.ts","../../../../../../src/cdk/tree/control/flat-tree-control.ts","../../../../../../src/cdk/tree/control/nested-tree-control.ts","../../../../../../src/cdk/tree/outlet.ts","../../../../../../src/cdk/tree/node.ts","../../../../../../src/cdk/tree/tree-errors.ts","../../../../../../src/cdk/tree/tree.ts","../../../../../../src/cdk/tree/nested-node.ts","../../../../../../src/cdk/tree/padding.ts","../../../../../../src/cdk/tree/toggle.ts","../../../../../../src/cdk/tree/tree-module.ts","../../../../../../src/cdk/tree/public-api.ts","../../../../../../src/cdk/tree/index.ts"],"sourcesContent":["/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\nimport {SelectionModel} from '@angular/cdk/collections';\r\nimport {Observable} from 'rxjs';\r\nimport {TreeControl} from './tree-control';\r\n\r\n/** Base tree control. It has basic toggle/expand/collapse operations on a single data node. */\r\nexport abstract class BaseTreeControl<T, K = T> implements TreeControl<T, K> {\r\n\r\n  /** Gets a list of descendent data nodes of a subtree rooted at given data node recursively. */\r\n  abstract getDescendants(dataNode: T): T[];\r\n\r\n  /** Expands all data nodes in the tree. */\r\n  abstract expandAll(): void;\r\n\r\n  /** Saved data node for `expandAll` action. */\r\n  dataNodes: T[];\r\n\r\n  /** A selection model with multi-selection to track expansion status. */\r\n  expansionModel: SelectionModel<K> = new SelectionModel<K>(true);\r\n\r\n  /**\r\n   * Returns the identifier by which a dataNode should be tracked, should its\r\n   * reference change.\r\n   *\r\n   * Similar to trackBy for *ngFor\r\n   */\r\n  trackBy?: (dataNode: T) => K;\r\n\r\n  /** Get depth of a given data node, return the level number. This is for flat tree node. */\r\n  getLevel: (dataNode: T) => number;\r\n\r\n  /**\r\n   * Whether the data node is expandable. Returns true if expandable.\r\n   * This is for flat tree node.\r\n   */\r\n  isExpandable: (dataNode: T) => boolean;\r\n\r\n  /** Gets a stream that emits whenever the given data node's children change. */\r\n  getChildren: (dataNode: T) => (Observable<T[]> | T[] | undefined | null);\r\n\r\n  /** Toggles one single data node's expanded/collapsed state. */\r\n  toggle(dataNode: T): void {\r\n    this.expansionModel.toggle(this._trackByValue(dataNode));\r\n  }\r\n\r\n  /** Expands one single data node. */\r\n  expand(dataNode: T): void {\r\n    this.expansionModel.select(this._trackByValue(dataNode));\r\n  }\r\n\r\n  /** Collapses one single data node. */\r\n  collapse(dataNode: T): void {\r\n    this.expansionModel.deselect(this._trackByValue(dataNode));\r\n  }\r\n\r\n  /** Whether a given data node is expanded or not. Returns true if the data node is expanded. */\r\n  isExpanded(dataNode: T): boolean {\r\n    return this.expansionModel.isSelected(this._trackByValue(dataNode));\r\n  }\r\n\r\n  /** Toggles a subtree rooted at `node` recursively. */\r\n  toggleDescendants(dataNode: T): void {\r\n    this.expansionModel.isSelected(this._trackByValue(dataNode)) ?\r\n        this.collapseDescendants(dataNode) :\r\n        this.expandDescendants(dataNode);\r\n  }\r\n\r\n  /** Collapse all dataNodes in the tree. */\r\n  collapseAll(): void {\r\n    this.expansionModel.clear();\r\n  }\r\n\r\n  /** Expands a subtree rooted at given data node recursively. */\r\n  expandDescendants(dataNode: T): void {\r\n    let toBeProcessed = [dataNode];\r\n    toBeProcessed.push(...this.getDescendants(dataNode));\r\n    this.expansionModel.select(...toBeProcessed.map(value => this._trackByValue(value)));\r\n  }\r\n\r\n  /** Collapses a subtree rooted at given data node recursively. */\r\n  collapseDescendants(dataNode: T): void {\r\n    let toBeProcessed = [dataNode];\r\n    toBeProcessed.push(...this.getDescendants(dataNode));\r\n    this.expansionModel.deselect(...toBeProcessed.map(value => this._trackByValue(value)));\r\n  }\r\n\r\n  protected _trackByValue(value: T|K): K {\r\n    return this.trackBy ? this.trackBy(value as T) : value as K;\r\n  }\r\n}\r\n","/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n\r\nimport {BaseTreeControl} from './base-tree-control';\r\n\r\n/** Optional set of configuration that can be provided to the FlatTreeControl. */\r\nexport interface FlatTreeControlOptions<T, K> {\r\n  trackBy?: (dataNode: T) => K;\r\n}\r\n\r\n/** Flat tree control. Able to expand/collapse a subtree recursively for flattened tree. */\r\nexport class FlatTreeControl<T, K = T> extends BaseTreeControl<T, K> {\r\n\r\n  /** Construct with flat tree data node functions getLevel and isExpandable. */\r\n  constructor(\r\n      public getLevel: (dataNode: T) => number, public isExpandable: (dataNode: T) => boolean,\r\n      public options?: FlatTreeControlOptions<T, K>) {\r\n    super();\r\n\r\n    if (this.options) {\r\n      this.trackBy = this.options.trackBy;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Gets a list of the data node's subtree of descendent data nodes.\r\n   *\r\n   * To make this working, the `dataNodes` of the TreeControl must be flattened tree nodes\r\n   * with correct levels.\r\n   */\r\n  getDescendants(dataNode: T): T[] {\r\n    const startIndex = this.dataNodes.indexOf(dataNode);\r\n    const results: T[] = [];\r\n\r\n    // Goes through flattened tree nodes in the `dataNodes` array, and get all descendants.\r\n    // The level of descendants of a tree node must be greater than the level of the given\r\n    // tree node.\r\n    // If we reach a node whose level is equal to the level of the tree node, we hit a sibling.\r\n    // If we reach a node whose level is greater than the level of the tree node, we hit a\r\n    // sibling of an ancestor.\r\n    for (let i = startIndex + 1;\r\n        i < this.dataNodes.length && this.getLevel(dataNode) < this.getLevel(this.dataNodes[i]);\r\n        i++) {\r\n      results.push(this.dataNodes[i]);\r\n    }\r\n    return results;\r\n  }\r\n\r\n  /**\r\n   * Expands all data nodes in the tree.\r\n   *\r\n   * To make this working, the `dataNodes` variable of the TreeControl must be set to all flattened\r\n   * data nodes of the tree.\r\n   */\r\n  expandAll(): void {\r\n    this.expansionModel.select(...this.dataNodes.map(node => this._trackByValue(node)));\r\n  }\r\n}\r\n","/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\nimport {Observable, isObservable} from 'rxjs';\r\nimport {take, filter} from 'rxjs/operators';\r\nimport {BaseTreeControl} from './base-tree-control';\r\n\r\n/** Optional set of configuration that can be provided to the NestedTreeControl. */\r\nexport interface NestedTreeControlOptions<T, K> {\r\n  trackBy?: (dataNode: T) => K;\r\n}\r\n\r\n/** Nested tree control. Able to expand/collapse a subtree recursively for NestedNode type. */\r\nexport class NestedTreeControl<T, K = T> extends BaseTreeControl<T, K> {\r\n  /** Construct with nested tree function getChildren. */\r\n  constructor(\r\n      public getChildren: (dataNode: T) => (Observable<T[]>| T[] | undefined | null),\r\n      public options?: NestedTreeControlOptions<T, K>) {\r\n    super();\r\n\r\n    if (this.options) {\r\n      this.trackBy = this.options.trackBy;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Expands all dataNodes in the tree.\r\n   *\r\n   * To make this working, the `dataNodes` variable of the TreeControl must be set to all root level\r\n   * data nodes of the tree.\r\n   */\r\n  expandAll(): void {\r\n    this.expansionModel.clear();\r\n    const allNodes = this.dataNodes.reduce((accumulator: T[], dataNode) =>\r\n        [...accumulator, ...this.getDescendants(dataNode), dataNode], []);\r\n    this.expansionModel.select(...allNodes.map(node => this._trackByValue(node)));\r\n  }\r\n\r\n  /** Gets a list of descendant dataNodes of a subtree rooted at given data node recursively. */\r\n  getDescendants(dataNode: T): T[] {\r\n    const descendants: T[] = [];\r\n\r\n    this._getDescendants(descendants, dataNode);\r\n    // Remove the node itself\r\n    return descendants.splice(1);\r\n  }\r\n\r\n  /** A helper function to get descendants recursively. */\r\n  protected _getDescendants(descendants: T[], dataNode: T): void {\r\n    descendants.push(dataNode);\r\n    const childrenNodes = this.getChildren(dataNode);\r\n    if (Array.isArray(childrenNodes)) {\r\n      childrenNodes.forEach((child: T) => this._getDescendants(descendants, child));\r\n    } else if (isObservable(childrenNodes)) {\r\n      // TypeScript as of version 3.5 doesn't seem to treat `Boolean` like a function that\r\n      // returns a `boolean` specifically in the context of `filter`, so we manually clarify that.\r\n      childrenNodes.pipe(take(1), filter(Boolean as () => boolean))\r\n          .subscribe(children => {\r\n            for (const child of children) {\r\n              this._getDescendants(descendants, child);\r\n            }\r\n          });\r\n    }\r\n  }\r\n}\r\n","/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\nimport {\r\n  Directive,\r\n  Inject,\r\n  InjectionToken,\r\n  Optional,\r\n  ViewContainerRef,\r\n} from '@angular/core';\r\n\r\n/**\r\n * Injection token used to provide a `CdkTreeNode` to its outlet.\r\n * Used primarily to avoid circular imports.\r\n * @docs-private\r\n */\r\nexport const CDK_TREE_NODE_OUTLET_NODE = new InjectionToken<{}>('CDK_TREE_NODE_OUTLET_NODE');\r\n\r\n/**\r\n * Outlet for nested CdkNode. Put `[cdkTreeNodeOutlet]` on a tag to place children dataNodes\r\n * inside the outlet.\r\n */\r\n@Directive({\r\n  selector: '[cdkTreeNodeOutlet]'\r\n})\r\nexport class CdkTreeNodeOutlet {\r\n  constructor(\r\n      public viewContainer: ViewContainerRef,\r\n      @Inject(CDK_TREE_NODE_OUTLET_NODE) @Optional() public _node?: any) {}\r\n}\r\n","/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n\r\nimport {Directive, TemplateRef} from '@angular/core';\r\n\r\n\r\n/** Context provided to the tree node component. */\r\nexport class CdkTreeNodeOutletContext<T> {\r\n  /** Data for the node. */\r\n  $implicit: T;\r\n\r\n  /** Depth of the node. */\r\n  level: number;\r\n\r\n  /** Index location of the node. */\r\n  index?: number;\r\n\r\n  /** Length of the number of total dataNodes. */\r\n  count?: number;\r\n\r\n  constructor(data: T) {\r\n    this.$implicit = data;\r\n  }\r\n}\r\n\r\n/**\r\n * Data node definition for the CdkTree.\r\n * Captures the node's template and a when predicate that describes when this node should be used.\r\n */\r\n@Directive({\r\n  selector: '[cdkTreeNodeDef]',\r\n  inputs: [\r\n    'when: cdkTreeNodeDefWhen'\r\n  ],\r\n})\r\nexport class CdkTreeNodeDef<T> {\r\n  /**\r\n   * Function that should return true if this node template should be used for the provided node\r\n   * data and index. If left undefined, this node will be considered the default node template to\r\n   * use when no other when functions return true for the data.\r\n   * For every node, there must be at least one when function that passes or an undefined to\r\n   * default.\r\n   */\r\n  when: (index: number, nodeData: T) => boolean;\r\n\r\n  /** @docs-private */\r\n  constructor(public template: TemplateRef<any>) {}\r\n}\r\n","/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n\r\n/**\r\n * Returns an error to be thrown when there is no usable data.\r\n * @docs-private\r\n */\r\nexport function getTreeNoValidDataSourceError() {\r\n  return Error(`A valid data source must be provided.`);\r\n}\r\n\r\n/**\r\n * Returns an error to be thrown when there are multiple nodes that are missing a when function.\r\n * @docs-private\r\n */\r\nexport function getTreeMultipleDefaultNodeDefsError() {\r\n  return Error(`There can only be one default row without a when predicate function.`);\r\n}\r\n\r\n/**\r\n * Returns an error to be thrown when there are no matching node defs for a particular set of data.\r\n * @docs-private\r\n */\r\nexport function getTreeMissingMatchingNodeDefError() {\r\n  return Error(`Could not find a matching node definition for the provided node data.`);\r\n}\r\n\r\n/**\r\n * Returns an error to be thrown when there are tree control.\r\n * @docs-private\r\n */\r\nexport function getTreeControlMissingError() {\r\n  return Error(`Could not find a tree control for the tree.`);\r\n}\r\n\r\n/**\r\n * Returns an error to be thrown when tree control did not implement functions for flat/nested node.\r\n * @docs-private\r\n */\r\nexport function getTreeControlFunctionsMissingError() {\r\n  return Error(`Could not find functions for nested/flat tree in tree control.`);\r\n}\r\n","/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\nimport {FocusableOption} from '@angular/cdk/a11y';\r\nimport {CollectionViewer, DataSource, isDataSource} from '@angular/cdk/collections';\r\nimport {\r\n  AfterContentChecked,\r\n  ChangeDetectionStrategy,\r\n  ChangeDetectorRef,\r\n  Component,\r\n  ContentChildren,\r\n  Directive,\r\n  DoCheck,\r\n  ElementRef,\r\n  Input,\r\n  IterableChangeRecord,\r\n  IterableDiffer,\r\n  IterableDiffers,\r\n  OnDestroy,\r\n  OnInit,\r\n  QueryList,\r\n  TrackByFunction,\r\n  ViewChild,\r\n  ViewContainerRef,\r\n  ViewEncapsulation\r\n} from '@angular/core';\r\nimport {\r\n  BehaviorSubject,\r\n  isObservable,\r\n  Observable,\r\n  of as observableOf,\r\n  Subject,\r\n  Subscription,\r\n} from 'rxjs';\r\nimport {takeUntil} from 'rxjs/operators';\r\nimport {TreeControl} from './control/tree-control';\r\nimport {CdkTreeNodeDef, CdkTreeNodeOutletContext} from './node';\r\nimport {CdkTreeNodeOutlet} from './outlet';\r\nimport {\r\n  getTreeControlFunctionsMissingError,\r\n  getTreeControlMissingError,\r\n  getTreeMissingMatchingNodeDefError,\r\n  getTreeMultipleDefaultNodeDefsError,\r\n  getTreeNoValidDataSourceError\r\n} from './tree-errors';\r\nimport {coerceNumberProperty} from '@angular/cdk/coercion';\r\n\r\n/**\r\n * CDK tree component that connects with a data source to retrieve data of type `T` and renders\r\n * dataNodes with hierarchy. Updates the dataNodes when new data is provided by the data source.\r\n */\r\n@Component({\r\n  selector: 'cdk-tree',\r\n  exportAs: 'cdkTree',\r\n  template: `<ng-container cdkTreeNodeOutlet></ng-container>`,\r\n  host: {\r\n    'class': 'cdk-tree',\r\n    'role': 'tree',\r\n  },\r\n  encapsulation: ViewEncapsulation.None,\r\n\r\n  // The \"OnPush\" status for the `CdkTree` component is effectively a noop, so we are removing it.\r\n  // The view for `CdkTree` consists entirely of templates declared in other views. As they are\r\n  // declared elsewhere, they are checked when their declaration points are checked.\r\n  // tslint:disable-next-line:validate-decorators\r\n  changeDetection: ChangeDetectionStrategy.Default\r\n})\r\nexport class CdkTree<T, K = T> implements AfterContentChecked, CollectionViewer, OnDestroy, OnInit {\r\n  /** Subject that emits when the component has been destroyed. */\r\n  private _onDestroy = new Subject<void>();\r\n\r\n  /** Differ used to find the changes in the data provided by the data source. */\r\n  private _dataDiffer: IterableDiffer<T>;\r\n\r\n  /** Stores the node definition that does not have a when predicate. */\r\n  private _defaultNodeDef: CdkTreeNodeDef<T> | null;\r\n\r\n  /** Data subscription */\r\n  private _dataSubscription: Subscription | null;\r\n\r\n  /** Level of nodes */\r\n  private _levels: Map<T, number> = new Map<T, number>();\r\n\r\n  /**\r\n   * Provides a stream containing the latest data array to render. Influenced by the tree's\r\n   * stream of view window (what dataNodes are currently on screen).\r\n   * Data source can be an observable of data array, or a data array to render.\r\n   */\r\n  @Input()\r\n  get dataSource(): DataSource<T> | Observable<T[]> | T[] { return this._dataSource; }\r\n  set dataSource(dataSource: DataSource<T> | Observable<T[]> | T[]) {\r\n    if (this._dataSource !== dataSource) {\r\n      this._switchDataSource(dataSource);\r\n    }\r\n  }\r\n  private _dataSource: DataSource<T> | Observable<T[]> | T[];\r\n\r\n  /** The tree controller */\r\n  @Input() treeControl: TreeControl<T, K>;\r\n\r\n  /**\r\n   * Tracking function that will be used to check the differences in data changes. Used similarly\r\n   * to `ngFor` `trackBy` function. Optimize node operations by identifying a node based on its data\r\n   * relative to the function to know if a node should be added/removed/moved.\r\n   * Accepts a function that takes two parameters, `index` and `item`.\r\n   */\r\n  @Input() trackBy: TrackByFunction<T>;\r\n\r\n  // Outlets within the tree's template where the dataNodes will be inserted.\r\n  @ViewChild(CdkTreeNodeOutlet, {static: true}) _nodeOutlet: CdkTreeNodeOutlet;\r\n\r\n  /** The tree node template for the tree */\r\n  @ContentChildren(CdkTreeNodeDef, {\r\n    // We need to use `descendants: true`, because Ivy will no longer match\r\n    // indirect descendants if it's left as false.\r\n    descendants: true\r\n  }) _nodeDefs: QueryList<CdkTreeNodeDef<T>>;\r\n\r\n  // TODO(tinayuangao): Setup a listener for scrolling, emit the calculated view to viewChange.\r\n  //     Remove the MAX_VALUE in viewChange\r\n  /**\r\n   * Stream containing the latest information on what rows are being displayed on screen.\r\n   * Can be used by the data source to as a heuristic of what data should be provided.\r\n   */\r\n  viewChange =\r\n    new BehaviorSubject<{start: number, end: number}>({start: 0, end: Number.MAX_VALUE});\r\n\r\n  constructor(private _differs: IterableDiffers,\r\n              private _changeDetectorRef: ChangeDetectorRef) {}\r\n\r\n  ngOnInit() {\r\n    this._dataDiffer = this._differs.find([]).create(this.trackBy);\r\n    if (!this.treeControl && (typeof ngDevMode === 'undefined' || ngDevMode)) {\r\n      throw getTreeControlMissingError();\r\n    }\r\n  }\r\n\r\n  ngOnDestroy() {\r\n    this._nodeOutlet.viewContainer.clear();\r\n\r\n    this.viewChange.complete();\r\n    this._onDestroy.next();\r\n    this._onDestroy.complete();\r\n\r\n    if (this._dataSource && typeof (this._dataSource as DataSource<T>).disconnect === 'function') {\r\n      (this.dataSource as DataSource<T>).disconnect(this);\r\n    }\r\n\r\n    if (this._dataSubscription) {\r\n      this._dataSubscription.unsubscribe();\r\n      this._dataSubscription = null;\r\n    }\r\n  }\r\n\r\n  ngAfterContentChecked() {\r\n    const defaultNodeDefs = this._nodeDefs.filter(def => !def.when);\r\n    if (defaultNodeDefs.length > 1 && (typeof ngDevMode === 'undefined' || ngDevMode)) {\r\n      throw getTreeMultipleDefaultNodeDefsError();\r\n    }\r\n    this._defaultNodeDef = defaultNodeDefs[0];\r\n\r\n    if (this.dataSource && this._nodeDefs && !this._dataSubscription) {\r\n      this._observeRenderChanges();\r\n    }\r\n  }\r\n\r\n\r\n  // TODO(tinayuangao): Work on keyboard traversal and actions, make sure it's working for RTL\r\n  //     and nested trees.\r\n\r\n  /**\r\n   * Switch to the provided data source by resetting the data and unsubscribing from the current\r\n   * render change subscription if one exists. If the data source is null, interpret this by\r\n   * clearing the node outlet. Otherwise start listening for new data.\r\n   */\r\n  private _switchDataSource(dataSource: DataSource<T> | Observable<T[]> | T[]) {\r\n    if (this._dataSource && typeof (this._dataSource as DataSource<T>).disconnect === 'function') {\r\n      (this.dataSource as DataSource<T>).disconnect(this);\r\n    }\r\n\r\n    if (this._dataSubscription) {\r\n      this._dataSubscription.unsubscribe();\r\n      this._dataSubscription = null;\r\n    }\r\n\r\n    // Remove the all dataNodes if there is now no data source\r\n    if (!dataSource) {\r\n      this._nodeOutlet.viewContainer.clear();\r\n    }\r\n\r\n    this._dataSource = dataSource;\r\n    if (this._nodeDefs) {\r\n      this._observeRenderChanges();\r\n    }\r\n  }\r\n\r\n  /** Set up a subscription for the data provided by the data source. */\r\n  private _observeRenderChanges() {\r\n    let dataStream: Observable<T[] | ReadonlyArray<T>> | undefined;\r\n\r\n    if (isDataSource(this._dataSource)) {\r\n      dataStream = this._dataSource.connect(this);\r\n    } else if (isObservable(this._dataSource)) {\r\n      dataStream = this._dataSource;\r\n    } else if (Array.isArray(this._dataSource)) {\r\n      dataStream = observableOf(this._dataSource);\r\n    }\r\n\r\n    if (dataStream) {\r\n      this._dataSubscription = dataStream.pipe(takeUntil(this._onDestroy))\r\n        .subscribe(data => this.renderNodeChanges(data));\r\n    } else if (typeof ngDevMode === 'undefined' || ngDevMode) {\r\n      throw getTreeNoValidDataSourceError();\r\n    }\r\n  }\r\n\r\n  /** Check for changes made in the data and render each change (node added/removed/moved). */\r\n  renderNodeChanges(data: T[] | ReadonlyArray<T>, dataDiffer: IterableDiffer<T> = this._dataDiffer,\r\n                    viewContainer: ViewContainerRef = this._nodeOutlet.viewContainer,\r\n                    parentData?: T) {\r\n    const changes = dataDiffer.diff(data);\r\n    if (!changes) { return; }\r\n\r\n    changes.forEachOperation((item: IterableChangeRecord<T>,\r\n                              adjustedPreviousIndex: number | null,\r\n                              currentIndex: number | null) => {\r\n        if (item.previousIndex == null) {\r\n          this.insertNode(data[currentIndex!], currentIndex!, viewContainer, parentData);\r\n        } else if (currentIndex == null) {\r\n          viewContainer.remove(adjustedPreviousIndex!);\r\n          this._levels.delete(item.item);\r\n        } else {\r\n          const view = viewContainer.get(adjustedPreviousIndex!);\r\n          viewContainer.move(view!, currentIndex);\r\n        }\r\n      });\r\n\r\n    this._changeDetectorRef.detectChanges();\r\n  }\r\n\r\n  /**\r\n   * Finds the matching node definition that should be used for this node data. If there is only\r\n   * one node definition, it is returned. Otherwise, find the node definition that has a when\r\n   * predicate that returns true with the data. If none return true, return the default node\r\n   * definition.\r\n   */\r\n  _getNodeDef(data: T, i: number): CdkTreeNodeDef<T> {\r\n    if (this._nodeDefs.length === 1) { return this._nodeDefs.first; }\r\n\r\n    const nodeDef =\r\n      this._nodeDefs.find(def => def.when && def.when(i, data)) || this._defaultNodeDef;\r\n\r\n    if (!nodeDef && (typeof ngDevMode === 'undefined' || ngDevMode)) {\r\n      throw getTreeMissingMatchingNodeDefError();\r\n    }\r\n\r\n    return nodeDef!;\r\n  }\r\n\r\n  /**\r\n   * Create the embedded view for the data node template and place it in the correct index location\r\n   * within the data node view container.\r\n   */\r\n  insertNode(nodeData: T, index: number, viewContainer?: ViewContainerRef, parentData?: T) {\r\n    const node = this._getNodeDef(nodeData, index);\r\n\r\n    // Node context that will be provided to created embedded view\r\n    const context = new CdkTreeNodeOutletContext<T>(nodeData);\r\n\r\n    // If the tree is flat tree, then use the `getLevel` function in flat tree control\r\n    // Otherwise, use the level of parent node.\r\n    if (this.treeControl.getLevel) {\r\n      context.level = this.treeControl.getLevel(nodeData);\r\n    } else if (typeof parentData !== 'undefined' && this._levels.has(parentData)) {\r\n      context.level = this._levels.get(parentData)! + 1;\r\n    } else {\r\n      context.level = 0;\r\n    }\r\n    this._levels.set(nodeData, context.level);\r\n\r\n    // Use default tree nodeOutlet, or nested node's nodeOutlet\r\n    const container = viewContainer ? viewContainer : this._nodeOutlet.viewContainer;\r\n    container.createEmbeddedView(node.template, context, index);\r\n\r\n    // Set the data to just created `CdkTreeNode`.\r\n    // The `CdkTreeNode` created from `createEmbeddedView` will be saved in static variable\r\n    //     `mostRecentTreeNode`. We get it from static variable and pass the node data to it.\r\n    if (CdkTreeNode.mostRecentTreeNode) {\r\n      CdkTreeNode.mostRecentTreeNode.data = nodeData;\r\n    }\r\n  }\r\n}\r\n\r\n\r\n/**\r\n * Tree node for CdkTree. It contains the data in the tree node.\r\n */\r\n@Directive({\r\n  selector: 'cdk-tree-node',\r\n  exportAs: 'cdkTreeNode',\r\n})\r\nexport class CdkTreeNode<T, K = T> implements DoCheck, FocusableOption, OnDestroy, OnInit {\r\n  /**\r\n   * The role of the tree node.\r\n   * @deprecated The correct role is 'treeitem', 'group' should not be used. This input will be\r\n   *   removed in a future version.\r\n   * @breaking-change 12.0.0 Remove this input\r\n   */\r\n  @Input() get role(): 'treeitem'|'group' { return 'treeitem'; }\r\n\r\n  set role(_role: 'treeitem'|'group') {\r\n    // TODO: move to host after View Engine deprecation\r\n    this._elementRef.nativeElement.setAttribute('role', _role);\r\n  }\r\n\r\n  /**\r\n   * The most recently created `CdkTreeNode`. We save it in static variable so we can retrieve it\r\n   * in `CdkTree` and set the data to it.\r\n   */\r\n  static mostRecentTreeNode: CdkTreeNode<any> | null = null;\r\n\r\n  /** Subject that emits when the component has been destroyed. */\r\n  protected _destroyed = new Subject<void>();\r\n\r\n  /** Emits when the node's data has changed. */\r\n  _dataChanges = new Subject<void>();\r\n\r\n  private _parentNodeAriaLevel: number;\r\n\r\n  /** The tree node's data. */\r\n  get data(): T { return this._data; }\r\n  set data(value: T) {\r\n    if (value !== this._data) {\r\n      this._data = value;\r\n      this._setRoleFromData();\r\n      this._dataChanges.next();\r\n    }\r\n  }\r\n  protected _data: T;\r\n\r\n  get isExpanded(): boolean {\r\n    return this._tree.treeControl.isExpanded(this._data);\r\n  }\r\n\r\n  private _setExpanded(_expanded: boolean) {\r\n    this._isAriaExpanded = _expanded;\r\n    this._elementRef.nativeElement.setAttribute('aria-expanded', `${_expanded}`);\r\n  }\r\n\r\n  protected _isAriaExpanded: boolean;\r\n\r\n  get level(): number {\r\n   // If the treeControl has a getLevel method, use it to get the level. Otherwise read the\r\n   // aria-level off the parent node and use it as the level for this node (note aria-level is\r\n   // 1-indexed, while this property is 0-indexed, so we don't need to increment).\r\n   return this._tree.treeControl.getLevel ?\r\n     this._tree.treeControl.getLevel(this._data) : this._parentNodeAriaLevel;\r\n   }\r\n\r\n  constructor(protected _elementRef: ElementRef<HTMLElement>,\r\n              protected _tree: CdkTree<T, K>) {\r\n    CdkTreeNode.mostRecentTreeNode = this as CdkTreeNode<T, K>;\r\n    // The classes are directly added here instead of in the host property because classes on\r\n    // the host property are not inherited with View Engine. It is not set as a @HostBinding because\r\n    // it is not set by the time it's children nodes try to read the class from it.\r\n    // TODO: move to host after View Engine deprecation\r\n    this._elementRef.nativeElement.classList.add('cdk-tree-node');\r\n    this.role = 'treeitem';\r\n  }\r\n\r\n  ngOnInit(): void {\r\n    this._parentNodeAriaLevel = getParentNodeAriaLevel(this._elementRef.nativeElement);\r\n    this._elementRef.nativeElement.setAttribute('aria-level', `${this.level + 1}`);\r\n  }\r\n\r\n  ngDoCheck() {\r\n    // aria-expanded is be set here because the expanded state is stored in the tree control and\r\n    // the node isn't aware when the state is changed.\r\n    // It is not set using a @HostBinding because they sometimes get lost with Mixin based classes.\r\n    // TODO: move to host after View Engine deprecation\r\n    if (this.isExpanded != this._isAriaExpanded) {\r\n      this._setExpanded(this.isExpanded);\r\n    }\r\n  }\r\n\r\n  ngOnDestroy() {\r\n    // If this is the last tree node being destroyed,\r\n    // clear out the reference to avoid leaking memory.\r\n    if (CdkTreeNode.mostRecentTreeNode === this) {\r\n      CdkTreeNode.mostRecentTreeNode = null;\r\n    }\r\n\r\n    this._dataChanges.complete();\r\n    this._destroyed.next();\r\n    this._destroyed.complete();\r\n  }\r\n\r\n  /** Focuses the menu item. Implements for FocusableOption. */\r\n  focus(): void {\r\n    this._elementRef.nativeElement.focus();\r\n  }\r\n\r\n  // TODO: role should eventually just be set in the component host\r\n  protected _setRoleFromData(): void {\r\n    if (!this._tree.treeControl.isExpandable && !this._tree.treeControl.getChildren &&\r\n      (typeof ngDevMode === 'undefined' || ngDevMode)) {\r\n      throw getTreeControlFunctionsMissingError();\r\n    }\r\n    this.role = 'treeitem';\r\n  }\r\n}\r\n\r\nfunction getParentNodeAriaLevel(nodeElement: HTMLElement): number {\r\n  let parent = nodeElement.parentElement;\r\n  while (parent && !isNodeElement(parent)) {\r\n    parent = parent.parentElement;\r\n  }\r\n  if (!parent) {\r\n    if (typeof ngDevMode === 'undefined' || ngDevMode) {\r\n      throw Error('Incorrect tree structure containing detached node.');\r\n    } else {\r\n      return -1;\r\n    }\r\n  } else if (parent.classList.contains('cdk-nested-tree-node')) {\r\n    return coerceNumberProperty(parent.getAttribute('aria-level')!);\r\n  } else {\r\n    // The ancestor element is the cdk-tree itself\r\n    return 0;\r\n  }\r\n}\r\n\r\nfunction isNodeElement(element: HTMLElement) {\r\n  const classList = element.classList;\r\n  return !!(classList?.contains('cdk-nested-tree-node') || classList?.contains('cdk-tree'));\r\n}\r\n","/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\nimport {\r\n  AfterContentInit,\r\n  ContentChildren,\r\n  Directive,\r\n  DoCheck,\r\n  ElementRef,\r\n  IterableDiffer,\r\n  IterableDiffers,\r\n  OnDestroy,\r\n  OnInit,\r\n  QueryList,\r\n} from '@angular/core';\r\nimport {isObservable} from 'rxjs';\r\nimport {takeUntil} from 'rxjs/operators';\r\n\r\nimport {CDK_TREE_NODE_OUTLET_NODE, CdkTreeNodeOutlet} from './outlet';\r\nimport {CdkTree, CdkTreeNode} from './tree';\r\nimport {getTreeControlFunctionsMissingError} from './tree-errors';\r\n\r\n/**\r\n * Nested node is a child of `<cdk-tree>`. It works with nested tree.\r\n * By using `cdk-nested-tree-node` component in tree node template, children of the parent node will\r\n * be added in the `cdkTreeNodeOutlet` in tree node template.\r\n * The children of node will be automatically added to `cdkTreeNodeOutlet`.\r\n */\r\n@Directive({\r\n  selector: 'cdk-nested-tree-node',\r\n  exportAs: 'cdkNestedTreeNode',\r\n  inputs: ['role', 'disabled', 'tabIndex'],\r\n  providers: [\r\n    {provide: CdkTreeNode, useExisting: CdkNestedTreeNode},\r\n    {provide: CDK_TREE_NODE_OUTLET_NODE, useExisting: CdkNestedTreeNode}\r\n  ]\r\n})\r\nexport class CdkNestedTreeNode<T, K = T> extends CdkTreeNode<T, K>\r\n    implements AfterContentInit, DoCheck, OnDestroy, OnInit {\r\n  /** Differ used to find the changes in the data provided by the data source. */\r\n  private _dataDiffer: IterableDiffer<T>;\r\n\r\n  /** The children data dataNodes of current node. They will be placed in `CdkTreeNodeOutlet`. */\r\n  protected _children: T[];\r\n\r\n  /** The children node placeholder. */\r\n  @ContentChildren(CdkTreeNodeOutlet, {\r\n    // We need to use `descendants: true`, because Ivy will no longer match\r\n    // indirect descendants if it's left as false.\r\n    descendants: true\r\n  })\r\n  nodeOutlet: QueryList<CdkTreeNodeOutlet>;\r\n\r\n  constructor(protected _elementRef: ElementRef<HTMLElement>,\r\n              protected _tree: CdkTree<T, K>,\r\n              protected _differs: IterableDiffers) {\r\n    super(_elementRef, _tree);\r\n    // The classes are directly added here instead of in the host property because classes on\r\n    // the host property are not inherited with View Engine. It is not set as a @HostBinding because\r\n    // it is not set by the time it's children nodes try to read the class from it.\r\n    // TODO: move to host after View Engine deprecation\r\n    this._elementRef.nativeElement.classList.add('cdk-nested-tree-node');\r\n  }\r\n\r\n  ngAfterContentInit() {\r\n    this._dataDiffer = this._differs.find([]).create(this._tree.trackBy);\r\n    if (!this._tree.treeControl.getChildren && (typeof ngDevMode === 'undefined' || ngDevMode)) {\r\n      throw getTreeControlFunctionsMissingError();\r\n    }\r\n    const childrenNodes = this._tree.treeControl.getChildren(this.data);\r\n    if (Array.isArray(childrenNodes)) {\r\n      this.updateChildrenNodes(childrenNodes as T[]);\r\n    } else if (isObservable(childrenNodes)) {\r\n      childrenNodes.pipe(takeUntil(this._destroyed))\r\n        .subscribe(result => this.updateChildrenNodes(result));\r\n    }\r\n    this.nodeOutlet.changes.pipe(takeUntil(this._destroyed))\r\n        .subscribe(() => this.updateChildrenNodes());\r\n  }\r\n\r\n  // This is a workaround for https://github.com/angular/angular/issues/23091\r\n  // In aot mode, the lifecycle hooks from parent class are not called.\r\n  ngOnInit() {\r\n    super.ngOnInit();\r\n  }\r\n\r\n  ngDoCheck() {\r\n    super.ngDoCheck();\r\n  }\r\n\r\n  ngOnDestroy() {\r\n    this._clear();\r\n    super.ngOnDestroy();\r\n  }\r\n\r\n  /** Add children dataNodes to the NodeOutlet */\r\n  protected updateChildrenNodes(children?: T[]): void {\r\n    const outlet = this._getNodeOutlet();\r\n    if (children) {\r\n      this._children = children;\r\n    }\r\n    if (outlet && this._children) {\r\n      const viewContainer = outlet.viewContainer;\r\n      this._tree.renderNodeChanges(this._children, this._dataDiffer, viewContainer, this._data);\r\n    } else {\r\n      // Reset the data differ if there's no children nodes displayed\r\n      this._dataDiffer.diff([]);\r\n    }\r\n  }\r\n\r\n  /** Clear the children dataNodes. */\r\n  protected _clear(): void {\r\n    const outlet = this._getNodeOutlet();\r\n    if (outlet) {\r\n      outlet.viewContainer.clear();\r\n      this._dataDiffer.diff([]);\r\n    }\r\n  }\r\n\r\n  /** Gets the outlet for the current node. */\r\n  private _getNodeOutlet() {\r\n    const outlets = this.nodeOutlet;\r\n\r\n    // Note that since we use `descendants: true` on the query, we have to ensure\r\n    // that we don't pick up the outlet of a child node by accident.\r\n    return outlets && outlets.find(outlet => !outlet._node || outlet._node === this);\r\n  }\r\n}\r\n","/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n\r\nimport {Directionality} from '@angular/cdk/bidi';\r\nimport {coerceNumberProperty, NumberInput} from '@angular/cdk/coercion';\r\nimport {Directive, ElementRef, Input, OnDestroy, Optional} from '@angular/core';\r\nimport {takeUntil} from 'rxjs/operators';\r\nimport {Subject} from 'rxjs';\r\nimport {CdkTree, CdkTreeNode} from './tree';\r\n\r\n/** Regex used to split a string on its CSS units. */\r\nconst cssUnitPattern = /([A-Za-z%]+)$/;\r\n\r\n/**\r\n * Indent for the children tree dataNodes.\r\n * This directive will add left-padding to the node to show hierarchy.\r\n */\r\n@Directive({\r\n  selector: '[cdkTreeNodePadding]',\r\n})\r\nexport class CdkTreeNodePadding<T, K = T> implements OnDestroy {\r\n  /** Current padding value applied to the element. Used to avoid unnecessarily hitting the DOM. */\r\n  private _currentPadding: string|null;\r\n\r\n  /** Subject that emits when the component has been destroyed. */\r\n  private _destroyed = new Subject<void>();\r\n\r\n  /** CSS units used for the indentation value. */\r\n  indentUnits = 'px';\r\n\r\n  /** The level of depth of the tree node. The padding will be `level * indent` pixels. */\r\n  @Input('cdkTreeNodePadding')\r\n  get level(): number { return this._level; }\r\n  set level(value: number) { this._setLevelInput(value); }\r\n  _level: number;\r\n\r\n  /**\r\n   * The indent for each level. Can be a number or a CSS string.\r\n   * Default number 40px from material design menu sub-menu spec.\r\n   */\r\n  @Input('cdkTreeNodePaddingIndent')\r\n  get indent(): number | string { return this._indent; }\r\n  set indent(indent: number | string) { this._setIndentInput(indent); }\r\n  _indent: number = 40;\r\n\r\n  constructor(private _treeNode: CdkTreeNode<T, K>,\r\n              private _tree: CdkTree<T, K>,\r\n              private _element: ElementRef<HTMLElement>,\r\n              @Optional() private _dir: Directionality) {\r\n    this._setPadding();\r\n    if (_dir) {\r\n      _dir.change.pipe(takeUntil(this._destroyed)).subscribe(() => this._setPadding(true));\r\n    }\r\n\r\n    // In Ivy the indentation binding might be set before the tree node's data has been added,\r\n    // which means that we'll miss the first render. We have to subscribe to changes in the\r\n    // data to ensure that everything is up to date.\r\n    _treeNode._dataChanges.subscribe(() => this._setPadding());\r\n  }\r\n\r\n  ngOnDestroy() {\r\n    this._destroyed.next();\r\n    this._destroyed.complete();\r\n  }\r\n\r\n  /** The padding indent value for the tree node. Returns a string with px numbers if not null. */\r\n  _paddingIndent(): string|null {\r\n    const nodeLevel = (this._treeNode.data && this._tree.treeControl.getLevel)\r\n      ? this._tree.treeControl.getLevel(this._treeNode.data)\r\n      : null;\r\n    const level = this._level == null ? nodeLevel : this._level;\r\n    return typeof level === 'number' ? `${level * this._indent}${this.indentUnits}` : null;\r\n  }\r\n\r\n  _setPadding(forceChange = false) {\r\n    const padding = this._paddingIndent();\r\n\r\n    if (padding !== this._currentPadding || forceChange) {\r\n      const element = this._element.nativeElement;\r\n      const paddingProp = this._dir && this._dir.value === 'rtl' ? 'paddingRight' : 'paddingLeft';\r\n      const resetProp = paddingProp === 'paddingLeft' ? 'paddingRight' : 'paddingLeft';\r\n      element.style[paddingProp] = padding || '';\r\n      element.style[resetProp] = '';\r\n      this._currentPadding = padding;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * This has been extracted to a util because of TS 4 and VE.\r\n   * View Engine doesn't support property rename inheritance.\r\n   * TS 4.0 doesn't allow properties to override accessors or vice-versa.\r\n   * @docs-private\r\n   */\r\n  protected _setLevelInput(value: number) {\r\n    // Set to null as the fallback value so that _setPadding can fall back to the node level if the\r\n    // consumer set the directive as `cdkTreeNodePadding=\"\"`. We still want to take this value if\r\n    // they set 0 explicitly.\r\n    this._level = coerceNumberProperty(value, null)!;\r\n    this._setPadding();\r\n  }\r\n\r\n  /**\r\n   * This has been extracted to a util because of TS 4 and VE.\r\n   * View Engine doesn't support property rename inheritance.\r\n   * TS 4.0 doesn't allow properties to override accessors or vice-versa.\r\n   * @docs-private\r\n   */\r\n  protected _setIndentInput(indent: number | string) {\r\n    let value = indent;\r\n    let units = 'px';\r\n\r\n    if (typeof indent === 'string') {\r\n      const parts = indent.split(cssUnitPattern);\r\n      value = parts[0];\r\n      units = parts[1] || units;\r\n    }\r\n\r\n    this.indentUnits = units;\r\n    this._indent = coerceNumberProperty(value);\r\n    this._setPadding();\r\n  }\r\n\r\n  static ngAcceptInputType_level: NumberInput;\r\n}\r\n","/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n\r\nimport {BooleanInput, coerceBooleanProperty} from '@angular/cdk/coercion';\r\nimport {Directive, HostListener, Input} from '@angular/core';\r\n\r\nimport {CdkTree, CdkTreeNode} from './tree';\r\n\r\n/**\r\n * Node toggle to expand/collapse the node.\r\n */\r\n@Directive({selector: '[cdkTreeNodeToggle]'})\r\nexport class CdkTreeNodeToggle<T, K = T> {\r\n  /** Whether expand/collapse the node recursively. */\r\n  @Input('cdkTreeNodeToggleRecursive')\r\n  get recursive(): boolean { return this._recursive; }\r\n  set recursive(value: boolean) { this._recursive = coerceBooleanProperty(value); }\r\n  protected _recursive = false;\r\n\r\n  constructor(protected _tree: CdkTree<T, K>,\r\n              protected _treeNode: CdkTreeNode<T, K>) {}\r\n\r\n  // We have to use a `HostListener` here in order to support both Ivy and ViewEngine.\r\n  // In Ivy the `host` bindings will be merged when this class is extended, whereas in\r\n  // ViewEngine they're overwritten.\r\n  // TODO(crisbeto): we move this back into `host` once Ivy is turned on by default.\r\n  // tslint:disable-next-line:no-host-decorator-in-concrete\r\n  @HostListener('click', ['$event'])\r\n  _toggle(event: Event): void {\r\n    this.recursive\r\n      ? this._tree.treeControl.toggleDescendants(this._treeNode.data)\r\n      : this._tree.treeControl.toggle(this._treeNode.data);\r\n\r\n    event.stopPropagation();\r\n  }\r\n\r\n  static ngAcceptInputType_recursive: BooleanInput;\r\n}\r\n","/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n\r\nimport {NgModule} from '@angular/core';\r\nimport {CdkTreeNodeOutlet} from './outlet';\r\nimport {CdkTreeNodePadding} from './padding';\r\nimport {CdkTreeNodeToggle} from './toggle';\r\nimport {CdkTree, CdkTreeNode} from './tree';\r\nimport {CdkTreeNodeDef} from './node';\r\nimport {CdkNestedTreeNode} from './nested-node';\r\n\r\nconst EXPORTED_DECLARATIONS = [\r\n  CdkNestedTreeNode,\r\n  CdkTreeNodeDef,\r\n  CdkTreeNodePadding,\r\n  CdkTreeNodeToggle,\r\n  CdkTree,\r\n  CdkTreeNode,\r\n  CdkTreeNodeOutlet,\r\n];\r\n\r\n@NgModule({\r\n  exports: EXPORTED_DECLARATIONS,\r\n  declarations: EXPORTED_DECLARATIONS,\r\n})\r\nexport class CdkTreeModule {}\r\n","/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n\r\nexport * from './control/base-tree-control';\r\nexport * from './control/flat-tree-control';\r\nexport * from './control/nested-tree-control';\r\nexport * from './control/tree-control';\r\nexport * from './nested-node';\r\nexport * from './node';\r\nexport * from './padding';\r\nexport * from './outlet';\r\nexport * from './tree';\r\nexport * from './tree-errors';\r\nexport * from './tree-module';\r\nexport * from './toggle';\r\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './public-api';\n"],"names":["observableOf"],"mappings":"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"}