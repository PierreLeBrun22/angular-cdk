{"version":3,"file":"testing.js","sources":["../../../../../../src/cdk/testing/change-detection.ts","../../../../../../src/cdk/testing/component-harness.ts","../../../../../../src/cdk/testing/harness-environment.ts","../../../../../../src/cdk/testing/test-element.ts","../../../../../../src/cdk/testing/element-dimensions.ts","../../../../../../src/cdk/testing/text-filtering.ts","../../../../../../src/cdk/testing/public-api.ts","../../../../../../src/cdk/testing/index.ts"],"sourcesContent":["/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n\r\nimport {BehaviorSubject, Subscription} from 'rxjs';\r\n\r\n/** Represents the status of auto change detection. */\r\nexport interface AutoChangeDetectionStatus {\r\n  /** Whether auto change detection is disabled. */\r\n  isDisabled: boolean;\r\n  /**\r\n   * An optional callback, if present it indicates that change detection should be run immediately,\r\n   * while handling the status change. The callback should then be called as soon as change\r\n   * detection is done.\r\n   */\r\n  onDetectChangesNow?: () => void;\r\n}\r\n\r\n/** Subject used to dispatch and listen for changes to the auto change detection status . */\r\nconst autoChangeDetectionSubject = new BehaviorSubject<AutoChangeDetectionStatus>({\r\n  isDisabled: false\r\n});\r\n\r\n/** The current subscription to `autoChangeDetectionSubject`. */\r\nlet autoChangeDetectionSubscription: Subscription | null;\r\n\r\n/**\r\n * The default handler for auto change detection status changes. This handler will be used if the\r\n * specific environment does not install its own.\r\n * @param status The new auto change detection status.\r\n */\r\nfunction defaultAutoChangeDetectionHandler(status: AutoChangeDetectionStatus) {\r\n  status.onDetectChangesNow?.();\r\n}\r\n\r\n/**\r\n * Allows a test `HarnessEnvironment` to install its own handler for auto change detection status\r\n * changes.\r\n * @param handler The handler for the auto change detection status.\r\n */\r\nexport function handleAutoChangeDetectionStatus(\r\n    handler: (status: AutoChangeDetectionStatus) => void) {\r\n  stopHandlingAutoChangeDetectionStatus();\r\n  autoChangeDetectionSubscription = autoChangeDetectionSubject.subscribe(handler);\r\n}\r\n\r\n/** Allows a `HarnessEnvironment` to stop handling auto change detection status changes. */\r\nexport function stopHandlingAutoChangeDetectionStatus() {\r\n  autoChangeDetectionSubscription?.unsubscribe();\r\n  autoChangeDetectionSubscription = null;\r\n}\r\n\r\n/**\r\n * Batches together triggering of change detection over the duration of the given function.\r\n * @param fn The function to call with batched change detection.\r\n * @param triggerBeforeAndAfter Optionally trigger change detection once before and after the batch\r\n *   operation. If false, change detection will not be triggered.\r\n * @return The result of the given function.\r\n */\r\nasync function batchChangeDetection<T>(fn: () => Promise<T>, triggerBeforeAndAfter: boolean) {\r\n  // If change detection batching is already in progress, just run the function.\r\n  if (autoChangeDetectionSubject.getValue().isDisabled) {\r\n    return await fn();\r\n  }\r\n\r\n  // If nothing is handling change detection batching, install the default handler.\r\n  if (!autoChangeDetectionSubscription) {\r\n    autoChangeDetectionSubject.subscribe(defaultAutoChangeDetectionHandler);\r\n  }\r\n\r\n  if (triggerBeforeAndAfter) {\r\n    await new Promise(resolve => autoChangeDetectionSubject.next({\r\n      isDisabled: true,\r\n      onDetectChangesNow: resolve as () => void,\r\n    }));\r\n    // The function passed in may throw (e.g. if the user wants to make an expectation of an error\r\n    // being thrown. If this happens, we need to make sure we still re-enable change detection, so\r\n    // we wrap it in a `finally` block.\r\n    try {\r\n      return await fn();\r\n    } finally {\r\n      await new Promise(resolve => autoChangeDetectionSubject.next({\r\n        isDisabled: false,\r\n        onDetectChangesNow: resolve as () => void,\r\n      }));\r\n    }\r\n  } else {\r\n    autoChangeDetectionSubject.next({isDisabled: true});\r\n    // The function passed in may throw (e.g. if the user wants to make an expectation of an error\r\n    // being thrown. If this happens, we need to make sure we still re-enable change detection, so\r\n    // we wrap it in a `finally` block.\r\n    try {\r\n      return await fn();\r\n    } finally {\r\n      autoChangeDetectionSubject.next({isDisabled: false});\r\n    }\r\n  }\r\n}\r\n\r\n/**\r\n * Disables the harness system's auto change detection for the duration of the given function.\r\n * @param fn The function to disable auto change detection for.\r\n * @return The result of the given function.\r\n */\r\nexport async function manualChangeDetection<T>(fn: () => Promise<T>) {\r\n  return batchChangeDetection(fn, false);\r\n}\r\n\r\n\r\n\r\n/**\r\n * Resolves the given list of async values in parallel (i.e. via Promise.all) while batching change\r\n * detection over the entire operation such that change detection occurs exactly once before\r\n * resolving the values and once after.\r\n * @param values A getter for the async values to resolve in parallel with batched change detection.\r\n * @return The resolved values.\r\n */\r\nexport function parallel<T1, T2, T3, T4, T5>(\r\n  values: () =>\r\n      [T1 | PromiseLike<T1>, T2 | PromiseLike<T2>, T3 | PromiseLike<T3>, T4 | PromiseLike<T4>,\r\n       T5 | PromiseLike<T5>\r\n      ]): Promise<[T1, T2, T3, T4, T5]>;\r\n\r\n/**\r\n * Resolves the given list of async values in parallel (i.e. via Promise.all) while batching change\r\n * detection over the entire operation such that change detection occurs exactly once before\r\n * resolving the values and once after.\r\n * @param values A getter for the async values to resolve in parallel with batched change detection.\r\n * @return The resolved values.\r\n */\r\nexport function parallel<T1, T2, T3, T4>(\r\n  values: () =>\r\n      [T1 | PromiseLike<T1>, T2 | PromiseLike<T2>, T3 | PromiseLike<T3>, T4 | PromiseLike<T4>]):\r\n  Promise<[T1, T2, T3, T4]>;\r\n\r\n/**\r\n * Resolves the given list of async values in parallel (i.e. via Promise.all) while batching change\r\n * detection over the entire operation such that change detection occurs exactly once before\r\n * resolving the values and once after.\r\n * @param values A getter for the async values to resolve in parallel with batched change detection.\r\n * @return The resolved values.\r\n */\r\nexport function parallel<T1, T2, T3>(\r\n  values: () => [T1 | PromiseLike<T1>, T2 | PromiseLike<T2>, T3 | PromiseLike<T3>]):\r\n  Promise<[T1, T2, T3]>;\r\n\r\n/**\r\n * Resolves the given list of async values in parallel (i.e. via Promise.all) while batching change\r\n * detection over the entire operation such that change detection occurs exactly once before\r\n * resolving the values and once after.\r\n * @param values A getter for the async values to resolve in parallel with batched change detection.\r\n * @return The resolved values.\r\n */\r\nexport function parallel<T1, T2>(values: () => [T1 | PromiseLike<T1>, T2 | PromiseLike<T2>]):\r\n  Promise<[T1, T2]>;\r\n\r\n/**\r\n * Resolves the given list of async values in parallel (i.e. via Promise.all) while batching change\r\n * detection over the entire operation such that change detection occurs exactly once before\r\n * resolving the values and once after.\r\n * @param values A getter for the async values to resolve in parallel with batched change detection.\r\n * @return The resolved values.\r\n */\r\nexport function parallel<T>(values: () => (T | PromiseLike<T>)[]): Promise<T[]>;\r\n\r\nexport async function parallel<T>(values: () => Iterable<T | PromiseLike<T>>): Promise<T[]> {\r\n  return batchChangeDetection(() => Promise.all(values()), true);\r\n}\r\n","/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n\r\nimport {parallel} from './change-detection';\r\nimport {TestElement} from './test-element';\r\n\r\n/** An async function that returns a promise when called. */\r\nexport type AsyncFactoryFn<T> = () => Promise<T>;\r\n\r\n/** An async function that takes an item and returns a boolean promise */\r\nexport type AsyncPredicate<T> = (item: T) => Promise<boolean>;\r\n\r\n/** An async function that takes an item and an option value and returns a boolean promise. */\r\nexport type AsyncOptionPredicate<T, O> = (item: T, option: O) => Promise<boolean>;\r\n\r\n/**\r\n * A query for a `ComponentHarness`, which is expressed as either a `ComponentHarnessConstructor` or\r\n * a `HarnessPredicate`.\r\n */\r\nexport type HarnessQuery<T extends ComponentHarness> =\r\n    ComponentHarnessConstructor<T> | HarnessPredicate<T>;\r\n\r\n/**\r\n * The result type obtained when searching using a particular list of queries. This type depends on\r\n * the particular items being queried.\r\n * - If one of the queries is for a `ComponentHarnessConstructor<C1>`, it means that the result\r\n *   might be a harness of type `C1`\r\n * - If one of the queries is for a `HarnessPredicate<C2>`, it means that the result might be a\r\n *   harness of type `C2`\r\n * - If one of the queries is for a `string`, it means that the result might be a `TestElement`.\r\n *\r\n * Since we don't know for sure which query will match, the result type if the union of the types\r\n * for all possible results.\r\n *\r\n * e.g.\r\n * The type:\r\n * `LocatorFnResult&lt;[\r\n *   ComponentHarnessConstructor&lt;MyHarness&gt;,\r\n *   HarnessPredicate&lt;MyOtherHarness&gt;,\r\n *   string\r\n * ]&gt;`\r\n * is equivalent to:\r\n * `MyHarness | MyOtherHarness | TestElement`.\r\n */\r\nexport type LocatorFnResult<T extends (HarnessQuery<any> | string)[]> = {\r\n  [I in keyof T]:\r\n      // Map `ComponentHarnessConstructor<C>` to `C`.\r\n      T[I] extends new (...args: any[]) => infer C ? C :\r\n      // Map `HarnessPredicate<C>` to `C`.\r\n      T[I] extends { harnessType: new (...args: any[]) => infer C } ? C :\r\n      // Map `string` to `TestElement`.\r\n      T[I] extends string ? TestElement :\r\n      // Map everything else to `never` (should not happen due to the type constraint on `T`).\r\n      never;\r\n}[number];\r\n\r\n\r\n/**\r\n * Interface used to load ComponentHarness objects. This interface is used by test authors to\r\n * instantiate `ComponentHarness`es.\r\n */\r\nexport interface HarnessLoader {\r\n  /**\r\n   * Searches for an element with the given selector under the current instances's root element,\r\n   * and returns a `HarnessLoader` rooted at the matching element. If multiple elements match the\r\n   * selector, the first is used. If no elements match, an error is thrown.\r\n   * @param selector The selector for the root element of the new `HarnessLoader`\r\n   * @return A `HarnessLoader` rooted at the element matching the given selector.\r\n   * @throws If a matching element can't be found.\r\n   */\r\n  getChildLoader(selector: string): Promise<HarnessLoader>;\r\n\r\n  /**\r\n   * Searches for all elements with the given selector under the current instances's root element,\r\n   * and returns an array of `HarnessLoader`s, one for each matching element, rooted at that\r\n   * element.\r\n   * @param selector The selector for the root element of the new `HarnessLoader`\r\n   * @return A list of `HarnessLoader`s, one for each matching element, rooted at that element.\r\n   */\r\n  getAllChildLoaders(selector: string): Promise<HarnessLoader[]>;\r\n\r\n  /**\r\n   * Searches for an instance of the component corresponding to the given harness type under the\r\n   * `HarnessLoader`'s root element, and returns a `ComponentHarness` for that instance. If multiple\r\n   * matching components are found, a harness for the first one is returned. If no matching\r\n   * component is found, an error is thrown.\r\n   * @param query A query for a harness to create\r\n   * @return An instance of the given harness type\r\n   * @throws If a matching component instance can't be found.\r\n   */\r\n  getHarness<T extends ComponentHarness>(query: HarnessQuery<T>): Promise<T>;\r\n\r\n  /**\r\n   * Searches for all instances of the component corresponding to the given harness type under the\r\n   * `HarnessLoader`'s root element, and returns a list `ComponentHarness` for each instance.\r\n   * @param query A query for a harness to create\r\n   * @return A list instances of the given harness type.\r\n   */\r\n  getAllHarnesses<T extends ComponentHarness>(query: HarnessQuery<T>): Promise<T[]>;\r\n}\r\n\r\n/**\r\n * Interface used to create asynchronous locator functions used find elements and component\r\n * harnesses. This interface is used by `ComponentHarness` authors to create locator functions for\r\n * their `ComponentHarness` subclass.\r\n */\r\nexport interface LocatorFactory {\r\n  /** Gets a locator factory rooted at the document root. */\r\n  documentRootLocatorFactory(): LocatorFactory;\r\n\r\n  /** The root element of this `LocatorFactory` as a `TestElement`. */\r\n  rootElement: TestElement;\r\n\r\n  /**\r\n   * Creates an asynchronous locator function that can be used to find a `ComponentHarness` instance\r\n   * or element under the root element of this `LocatorFactory`.\r\n   * @param queries A list of queries specifying which harnesses and elements to search for:\r\n   *   - A `string` searches for elements matching the CSS selector specified by the string.\r\n   *   - A `ComponentHarness` constructor searches for `ComponentHarness` instances matching the\r\n   *     given class.\r\n   *   - A `HarnessPredicate` searches for `ComponentHarness` instances matching the given\r\n   *     predicate.\r\n   * @return An asynchronous locator function that searches for and returns a `Promise` for the\r\n   *   first element or harness matching the given search criteria. Matches are ordered first by\r\n   *   order in the DOM, and second by order in the queries list. If no matches are found, the\r\n   *   `Promise` rejects. The type that the `Promise` resolves to is a union of all result types for\r\n   *   each query.\r\n   *\r\n   * e.g. Given the following DOM: `<div id=\"d1\" /><div id=\"d2\" />`, and assuming\r\n   * `DivHarness.hostSelector === 'div'`:\r\n   * - `await lf.locatorFor(DivHarness, 'div')()` gets a `DivHarness` instance for `#d1`\r\n   * - `await lf.locatorFor('div', DivHarness)()` gets a `TestElement` instance for `#d1`\r\n   * - `await lf.locatorFor('span')()` throws because the `Promise` rejects.\r\n   */\r\n  locatorFor<T extends (HarnessQuery<any> | string)[]>(...queries: T):\r\n      AsyncFactoryFn<LocatorFnResult<T>>;\r\n\r\n  /**\r\n   * Creates an asynchronous locator function that can be used to find a `ComponentHarness` instance\r\n   * or element under the root element of this `LocatorFactory`.\r\n   * @param queries A list of queries specifying which harnesses and elements to search for:\r\n   *   - A `string` searches for elements matching the CSS selector specified by the string.\r\n   *   - A `ComponentHarness` constructor searches for `ComponentHarness` instances matching the\r\n   *     given class.\r\n   *   - A `HarnessPredicate` searches for `ComponentHarness` instances matching the given\r\n   *     predicate.\r\n   * @return An asynchronous locator function that searches for and returns a `Promise` for the\r\n   *   first element or harness matching the given search criteria. Matches are ordered first by\r\n   *   order in the DOM, and second by order in the queries list. If no matches are found, the\r\n   *   `Promise` is resolved with `null`. The type that the `Promise` resolves to is a union of all\r\n   *   result types for each query or null.\r\n   *\r\n   * e.g. Given the following DOM: `<div id=\"d1\" /><div id=\"d2\" />`, and assuming\r\n   * `DivHarness.hostSelector === 'div'`:\r\n   * - `await lf.locatorForOptional(DivHarness, 'div')()` gets a `DivHarness` instance for `#d1`\r\n   * - `await lf.locatorForOptional('div', DivHarness)()` gets a `TestElement` instance for `#d1`\r\n   * - `await lf.locatorForOptional('span')()` gets `null`.\r\n   */\r\n  locatorForOptional<T extends (HarnessQuery<any> | string)[]>(...queries: T):\r\n      AsyncFactoryFn<LocatorFnResult<T> | null>;\r\n\r\n  /**\r\n   * Creates an asynchronous locator function that can be used to find `ComponentHarness` instances\r\n   * or elements under the root element of this `LocatorFactory`.\r\n   * @param queries A list of queries specifying which harnesses and elements to search for:\r\n   *   - A `string` searches for elements matching the CSS selector specified by the string.\r\n   *   - A `ComponentHarness` constructor searches for `ComponentHarness` instances matching the\r\n   *     given class.\r\n   *   - A `HarnessPredicate` searches for `ComponentHarness` instances matching the given\r\n   *     predicate.\r\n   * @return An asynchronous locator function that searches for and returns a `Promise` for all\r\n   *   elements and harnesses matching the given search criteria. Matches are ordered first by\r\n   *   order in the DOM, and second by order in the queries list. If an element matches more than\r\n   *   one `ComponentHarness` class, the locator gets an instance of each for the same element. If\r\n   *   an element matches multiple `string` selectors, only one `TestElement` instance is returned\r\n   *   for that element. The type that the `Promise` resolves to is an array where each element is\r\n   *   the union of all result types for each query.\r\n   *\r\n   * e.g. Given the following DOM: `<div id=\"d1\" /><div id=\"d2\" />`, and assuming\r\n   * `DivHarness.hostSelector === 'div'` and `IdIsD1Harness.hostSelector === '#d1'`:\r\n   * - `await lf.locatorForAll(DivHarness, 'div')()` gets `[\r\n   *     DivHarness, // for #d1\r\n   *     TestElement, // for #d1\r\n   *     DivHarness, // for #d2\r\n   *     TestElement // for #d2\r\n   *   ]`\r\n   * - `await lf.locatorForAll('div', '#d1')()` gets `[\r\n   *     TestElement, // for #d1\r\n   *     TestElement // for #d2\r\n   *   ]`\r\n   * - `await lf.locatorForAll(DivHarness, IdIsD1Harness)()` gets `[\r\n   *     DivHarness, // for #d1\r\n   *     IdIsD1Harness, // for #d1\r\n   *     DivHarness // for #d2\r\n   *   ]`\r\n   * - `await lf.locatorForAll('span')()` gets `[]`.\r\n   */\r\n  locatorForAll<T extends (HarnessQuery<any> | string)[]>(...queries: T):\r\n      AsyncFactoryFn<LocatorFnResult<T>[]>;\r\n\r\n  /** @return A `HarnessLoader` rooted at the root element of this `LocatorFactory`. */\r\n  rootHarnessLoader(): Promise<HarnessLoader>;\r\n\r\n  /**\r\n   * Gets a `HarnessLoader` instance for an element under the root of this `LocatorFactory`.\r\n   * @param selector The selector for the root element.\r\n   * @return A `HarnessLoader` rooted at the first element matching the given selector.\r\n   * @throws If no matching element is found for the given selector.\r\n   */\r\n  harnessLoaderFor(selector: string): Promise<HarnessLoader>;\r\n\r\n  /**\r\n   * Gets a `HarnessLoader` instance for an element under the root of this `LocatorFactory`\r\n   * @param selector The selector for the root element.\r\n   * @return A `HarnessLoader` rooted at the first element matching the given selector, or null if\r\n   *     no matching element is found.\r\n   */\r\n  harnessLoaderForOptional(selector: string): Promise<HarnessLoader | null>;\r\n\r\n  /**\r\n   * Gets a list of `HarnessLoader` instances, one for each matching element.\r\n   * @param selector The selector for the root element.\r\n   * @return A list of `HarnessLoader`, one rooted at each element matching the given selector.\r\n   */\r\n  harnessLoaderForAll(selector: string): Promise<HarnessLoader[]>;\r\n\r\n  /**\r\n   * Flushes change detection and async tasks captured in the Angular zone.\r\n   * In most cases it should not be necessary to call this manually. However, there may be some edge\r\n   * cases where it is needed to fully flush animation events.\r\n   */\r\n  forceStabilize(): Promise<void>;\r\n\r\n  /**\r\n   * Waits for all scheduled or running async tasks to complete. This allows harness\r\n   * authors to wait for async tasks outside of the Angular zone.\r\n   */\r\n  waitForTasksOutsideAngular(): Promise<void>;\r\n}\r\n\r\n/**\r\n * Base class for component harnesses that all component harness authors should extend. This base\r\n * component harness provides the basic ability to locate element and sub-component harness. It\r\n * should be inherited when defining user's own harness.\r\n */\r\nexport abstract class ComponentHarness {\r\n  constructor(protected readonly locatorFactory: LocatorFactory) {}\r\n\r\n  /** Gets a `Promise` for the `TestElement` representing the host element of the component. */\r\n  async host(): Promise<TestElement> {\r\n    return this.locatorFactory.rootElement;\r\n  }\r\n\r\n  /**\r\n   * Gets a `LocatorFactory` for the document root element. This factory can be used to create\r\n   * locators for elements that a component creates outside of its own root element. (e.g. by\r\n   * appending to document.body).\r\n   */\r\n  protected documentRootLocatorFactory(): LocatorFactory {\r\n    return this.locatorFactory.documentRootLocatorFactory();\r\n  }\r\n\r\n  /**\r\n   * Creates an asynchronous locator function that can be used to find a `ComponentHarness` instance\r\n   * or element under the host element of this `ComponentHarness`.\r\n   * @param queries A list of queries specifying which harnesses and elements to search for:\r\n   *   - A `string` searches for elements matching the CSS selector specified by the string.\r\n   *   - A `ComponentHarness` constructor searches for `ComponentHarness` instances matching the\r\n   *     given class.\r\n   *   - A `HarnessPredicate` searches for `ComponentHarness` instances matching the given\r\n   *     predicate.\r\n   * @return An asynchronous locator function that searches for and returns a `Promise` for the\r\n   *   first element or harness matching the given search criteria. Matches are ordered first by\r\n   *   order in the DOM, and second by order in the queries list. If no matches are found, the\r\n   *   `Promise` rejects. The type that the `Promise` resolves to is a union of all result types for\r\n   *   each query.\r\n   *\r\n   * e.g. Given the following DOM: `<div id=\"d1\" /><div id=\"d2\" />`, and assuming\r\n   * `DivHarness.hostSelector === 'div'`:\r\n   * - `await ch.locatorFor(DivHarness, 'div')()` gets a `DivHarness` instance for `#d1`\r\n   * - `await ch.locatorFor('div', DivHarness)()` gets a `TestElement` instance for `#d1`\r\n   * - `await ch.locatorFor('span')()` throws because the `Promise` rejects.\r\n   */\r\n  protected locatorFor<T extends (HarnessQuery<any> | string)[]>(...queries: T):\r\n      AsyncFactoryFn<LocatorFnResult<T>> {\r\n    return this.locatorFactory.locatorFor(...queries);\r\n  }\r\n\r\n  /**\r\n   * Creates an asynchronous locator function that can be used to find a `ComponentHarness` instance\r\n   * or element under the host element of this `ComponentHarness`.\r\n   * @param queries A list of queries specifying which harnesses and elements to search for:\r\n   *   - A `string` searches for elements matching the CSS selector specified by the string.\r\n   *   - A `ComponentHarness` constructor searches for `ComponentHarness` instances matching the\r\n   *     given class.\r\n   *   - A `HarnessPredicate` searches for `ComponentHarness` instances matching the given\r\n   *     predicate.\r\n   * @return An asynchronous locator function that searches for and returns a `Promise` for the\r\n   *   first element or harness matching the given search criteria. Matches are ordered first by\r\n   *   order in the DOM, and second by order in the queries list. If no matches are found, the\r\n   *   `Promise` is resolved with `null`. The type that the `Promise` resolves to is a union of all\r\n   *   result types for each query or null.\r\n   *\r\n   * e.g. Given the following DOM: `<div id=\"d1\" /><div id=\"d2\" />`, and assuming\r\n   * `DivHarness.hostSelector === 'div'`:\r\n   * - `await ch.locatorForOptional(DivHarness, 'div')()` gets a `DivHarness` instance for `#d1`\r\n   * - `await ch.locatorForOptional('div', DivHarness)()` gets a `TestElement` instance for `#d1`\r\n   * - `await ch.locatorForOptional('span')()` gets `null`.\r\n   */\r\n  protected locatorForOptional<T extends (HarnessQuery<any> | string)[]>(...queries: T):\r\n      AsyncFactoryFn<LocatorFnResult<T> | null> {\r\n    return this.locatorFactory.locatorForOptional(...queries);\r\n  }\r\n\r\n  /**\r\n   * Creates an asynchronous locator function that can be used to find `ComponentHarness` instances\r\n   * or elements under the host element of this `ComponentHarness`.\r\n   * @param queries A list of queries specifying which harnesses and elements to search for:\r\n   *   - A `string` searches for elements matching the CSS selector specified by the string.\r\n   *   - A `ComponentHarness` constructor searches for `ComponentHarness` instances matching the\r\n   *     given class.\r\n   *   - A `HarnessPredicate` searches for `ComponentHarness` instances matching the given\r\n   *     predicate.\r\n   * @return An asynchronous locator function that searches for and returns a `Promise` for all\r\n   *   elements and harnesses matching the given search criteria. Matches are ordered first by\r\n   *   order in the DOM, and second by order in the queries list. If an element matches more than\r\n   *   one `ComponentHarness` class, the locator gets an instance of each for the same element. If\r\n   *   an element matches multiple `string` selectors, only one `TestElement` instance is returned\r\n   *   for that element. The type that the `Promise` resolves to is an array where each element is\r\n   *   the union of all result types for each query.\r\n   *\r\n   * e.g. Given the following DOM: `<div id=\"d1\" /><div id=\"d2\" />`, and assuming\r\n   * `DivHarness.hostSelector === 'div'` and `IdIsD1Harness.hostSelector === '#d1'`:\r\n   * - `await ch.locatorForAll(DivHarness, 'div')()` gets `[\r\n   *     DivHarness, // for #d1\r\n   *     TestElement, // for #d1\r\n   *     DivHarness, // for #d2\r\n   *     TestElement // for #d2\r\n   *   ]`\r\n   * - `await ch.locatorForAll('div', '#d1')()` gets `[\r\n   *     TestElement, // for #d1\r\n   *     TestElement // for #d2\r\n   *   ]`\r\n   * - `await ch.locatorForAll(DivHarness, IdIsD1Harness)()` gets `[\r\n   *     DivHarness, // for #d1\r\n   *     IdIsD1Harness, // for #d1\r\n   *     DivHarness // for #d2\r\n   *   ]`\r\n   * - `await ch.locatorForAll('span')()` gets `[]`.\r\n   */\r\n  protected locatorForAll<T extends (HarnessQuery<any> | string)[]>(...queries: T):\r\n      AsyncFactoryFn<LocatorFnResult<T>[]> {\r\n    return this.locatorFactory.locatorForAll(...queries);\r\n  }\r\n\r\n  /**\r\n   * Flushes change detection and async tasks in the Angular zone.\r\n   * In most cases it should not be necessary to call this manually. However, there may be some edge\r\n   * cases where it is needed to fully flush animation events.\r\n   */\r\n  protected async forceStabilize() {\r\n    return this.locatorFactory.forceStabilize();\r\n  }\r\n\r\n  /**\r\n   * Waits for all scheduled or running async tasks to complete. This allows harness\r\n   * authors to wait for async tasks outside of the Angular zone.\r\n   */\r\n  protected async waitForTasksOutsideAngular() {\r\n    return this.locatorFactory.waitForTasksOutsideAngular();\r\n  }\r\n}\r\n\r\n\r\n/**\r\n * Base class for component harnesses that authors should extend if they anticipate that consumers\r\n * of the harness may want to access other harnesses within the `<ng-content>` of the component.\r\n */\r\nexport abstract class ContentContainerComponentHarness<S extends string = string>\r\n  extends ComponentHarness implements HarnessLoader {\r\n\r\n  async getChildLoader(selector: S): Promise<HarnessLoader> {\r\n    return (await this.getRootHarnessLoader()).getChildLoader(selector);\r\n  }\r\n\r\n  async getAllChildLoaders(selector: S): Promise<HarnessLoader[]> {\r\n    return (await this.getRootHarnessLoader()).getAllChildLoaders(selector);\r\n  }\r\n\r\n  async getHarness<T extends ComponentHarness>(query: HarnessQuery<T>): Promise<T> {\r\n    return (await this.getRootHarnessLoader()).getHarness(query);\r\n  }\r\n\r\n  async getAllHarnesses<T extends ComponentHarness>(query: HarnessQuery<T>): Promise<T[]> {\r\n    return (await this.getRootHarnessLoader()).getAllHarnesses(query);\r\n  }\r\n\r\n  /**\r\n   * Gets the root harness loader from which to start\r\n   * searching for content contained by this harness.\r\n   */\r\n  protected async getRootHarnessLoader(): Promise<HarnessLoader> {\r\n    return this.locatorFactory.rootHarnessLoader();\r\n  }\r\n}\r\n\r\n/** Constructor for a ComponentHarness subclass. */\r\nexport interface ComponentHarnessConstructor<T extends ComponentHarness> {\r\n  new(locatorFactory: LocatorFactory): T;\r\n\r\n  /**\r\n   * `ComponentHarness` subclasses must specify a static `hostSelector` property that is used to\r\n   * find the host element for the corresponding component. This property should match the selector\r\n   * for the Angular component.\r\n   */\r\n  hostSelector: string;\r\n}\r\n\r\n/** A set of criteria that can be used to filter a list of `ComponentHarness` instances. */\r\nexport interface BaseHarnessFilters {\r\n  /** Only find instances whose host element matches the given selector. */\r\n  selector?: string;\r\n  /** Only find instances that are nested under an element with the given selector. */\r\n  ancestor?: string;\r\n}\r\n\r\n/**\r\n * A class used to associate a ComponentHarness class with predicates functions that can be used to\r\n * filter instances of the class.\r\n */\r\nexport class HarnessPredicate<T extends ComponentHarness> {\r\n  private _predicates: AsyncPredicate<T>[] = [];\r\n  private _descriptions: string[] = [];\r\n  private _ancestor: string;\r\n\r\n  constructor(public harnessType: ComponentHarnessConstructor<T>, options: BaseHarnessFilters) {\r\n    this._addBaseOptions(options);\r\n  }\r\n\r\n  /**\r\n   * Checks if the specified nullable string value matches the given pattern.\r\n   * @param value The nullable string value to check, or a Promise resolving to the\r\n   *   nullable string value.\r\n   * @param pattern The pattern the value is expected to match. If `pattern` is a string,\r\n   *   `value` is expected to match exactly. If `pattern` is a regex, a partial match is\r\n   *   allowed. If `pattern` is `null`, the value is expected to be `null`.\r\n   * @return Whether the value matches the pattern.\r\n   */\r\n  static async stringMatches(value: string | null | Promise<string | null>,\r\n                             pattern: string | RegExp | null): Promise<boolean> {\r\n    value = await value;\r\n    if (pattern === null) {\r\n      return value === null;\r\n    } else if (value === null) {\r\n      return false;\r\n    }\r\n    return typeof pattern === 'string' ? value === pattern : pattern.test(value);\r\n  }\r\n\r\n  /**\r\n   * Adds a predicate function to be run against candidate harnesses.\r\n   * @param description A description of this predicate that may be used in error messages.\r\n   * @param predicate An async predicate function.\r\n   * @return this (for method chaining).\r\n   */\r\n  add(description: string, predicate: AsyncPredicate<T>) {\r\n    this._descriptions.push(description);\r\n    this._predicates.push(predicate);\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * Adds a predicate function that depends on an option value to be run against candidate\r\n   * harnesses. If the option value is undefined, the predicate will be ignored.\r\n   * @param name The name of the option (may be used in error messages).\r\n   * @param option The option value.\r\n   * @param predicate The predicate function to run if the option value is not undefined.\r\n   * @return this (for method chaining).\r\n   */\r\n  addOption<O>(name: string, option: O | undefined, predicate: AsyncOptionPredicate<T, O>) {\r\n    if (option !== undefined) {\r\n      this.add(`${name} = ${_valueAsString(option)}`, item => predicate(item, option));\r\n    }\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * Filters a list of harnesses on this predicate.\r\n   * @param harnesses The list of harnesses to filter.\r\n   * @return A list of harnesses that satisfy this predicate.\r\n   */\r\n  async filter(harnesses: T[]): Promise<T[]> {\r\n    if (harnesses.length === 0) {\r\n      return [];\r\n    }\r\n    const results = await parallel(() => harnesses.map(h => this.evaluate(h)));\r\n    return harnesses.filter((_, i) => results[i]);\r\n  }\r\n\r\n  /**\r\n   * Evaluates whether the given harness satisfies this predicate.\r\n   * @param harness The harness to check\r\n   * @return A promise that resolves to true if the harness satisfies this predicate,\r\n   *   and resolves to false otherwise.\r\n   */\r\n  async evaluate(harness: T): Promise<boolean> {\r\n    const results = await parallel(() => this._predicates.map(p => p(harness)));\r\n    return results.reduce((combined, current) => combined && current, true);\r\n  }\r\n\r\n  /** Gets a description of this predicate for use in error messages. */\r\n  getDescription() {\r\n    return this._descriptions.join(', ');\r\n  }\r\n\r\n  /** Gets the selector used to find candidate elements. */\r\n  getSelector() {\r\n    return this._ancestor.split(',')\r\n        .map(part => `${part.trim()} ${this.harnessType.hostSelector}`.trim())\r\n        .join(',');\r\n  }\r\n\r\n  /** Adds base options common to all harness types. */\r\n  private _addBaseOptions(options: BaseHarnessFilters) {\r\n    this._ancestor = options.ancestor || '';\r\n    if (this._ancestor) {\r\n      this._descriptions.push(`has ancestor matching selector \"${this._ancestor}\"`);\r\n    }\r\n    const selector = options.selector;\r\n    if (selector !== undefined) {\r\n      this.add(`host matches selector \"${selector}\"`, async item => {\r\n        return (await item.host()).matchesSelector(selector);\r\n      });\r\n    }\r\n  }\r\n}\r\n\r\n/** Represent a value as a string for the purpose of logging. */\r\nfunction _valueAsString(value: unknown) {\r\n  if (value === undefined) {\r\n    return 'undefined';\r\n  }\r\n  // `JSON.stringify` doesn't handle RegExp properly, so we need a custom replacer.\r\n  try {\r\n    return JSON.stringify(value, (_, v) => {\r\n      if (v instanceof RegExp) {\r\n        return `/${v.toString()}/`;\r\n      }\r\n\r\n      return typeof v === 'string' ? v.replace('/\\//g', '\\\\/') : v;\r\n    }).replace(/\"\\/\\//g, '\\\\/').replace(/\\/\\/\"/g, '\\\\/').replace(/\\\\\\//g, '/');\r\n  } catch {\r\n    // `JSON.stringify` will throw if the object is cyclical,\r\n    // in this case the best we can do is report the value as `{...}`.\r\n    return '{...}';\r\n  }\r\n}\r\n","/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n\r\nimport {parallel} from './change-detection';\r\nimport {\r\n  AsyncFactoryFn,\r\n  ComponentHarness,\r\n  ComponentHarnessConstructor,\r\n  HarnessLoader,\r\n  HarnessPredicate,\r\n  HarnessQuery,\r\n  LocatorFactory,\r\n  LocatorFnResult,\r\n} from './component-harness';\r\nimport {TestElement} from './test-element';\r\n\r\n/** Parsed form of the queries passed to the `locatorFor*` methods. */\r\ntype ParsedQueries<T extends ComponentHarness> = {\r\n  /** The full list of queries, in their original order. */\r\n  allQueries: (string | HarnessPredicate<T>)[],\r\n  /**\r\n   * A filtered view of `allQueries` containing only the queries that are looking for a\r\n   * `ComponentHarness`\r\n   */\r\n  harnessQueries: HarnessPredicate<T>[],\r\n  /**\r\n   * A filtered view of `allQueries` containing only the queries that are looking for a\r\n   * `TestElement`\r\n   */\r\n  elementQueries: string[],\r\n  /** The set of all `ComponentHarness` subclasses represented in the original query list. */\r\n  harnessTypes: Set<ComponentHarnessConstructor<T>>,\r\n};\r\n\r\n/**\r\n * Base harness environment class that can be extended to allow `ComponentHarness`es to be used in\r\n * different test environments (e.g. testbed, protractor, etc.). This class implements the\r\n * functionality of both a `HarnessLoader` and `LocatorFactory`. This class is generic on the raw\r\n * element type, `E`, used by the particular test environment.\r\n */\r\nexport abstract class HarnessEnvironment<E> implements HarnessLoader, LocatorFactory {\r\n  // Implemented as part of the `LocatorFactory` interface.\r\n  rootElement: TestElement;\r\n\r\n  protected constructor(protected rawRootElement: E) {\r\n    this.rootElement = this.createTestElement(rawRootElement);\r\n  }\r\n\r\n  // Implemented as part of the `LocatorFactory` interface.\r\n  documentRootLocatorFactory(): LocatorFactory {\r\n    return this.createEnvironment(this.getDocumentRoot());\r\n  }\r\n\r\n  // Implemented as part of the `LocatorFactory` interface.\r\n  locatorFor<T extends (HarnessQuery<any> | string)[]>(...queries: T):\r\n      AsyncFactoryFn<LocatorFnResult<T>> {\r\n    return () => _assertResultFound(\r\n        this._getAllHarnessesAndTestElements(queries),\r\n        _getDescriptionForLocatorForQueries(queries));\r\n  }\r\n\r\n  // Implemented as part of the `LocatorFactory` interface.\r\n  locatorForOptional<T extends (HarnessQuery<any> | string)[]>(...queries: T):\r\n      AsyncFactoryFn<LocatorFnResult<T> | null> {\r\n    return async () => (await this._getAllHarnessesAndTestElements(queries))[0] || null;\r\n  }\r\n\r\n  // Implemented as part of the `LocatorFactory` interface.\r\n  locatorForAll<T extends (HarnessQuery<any> | string)[]>(...queries: T):\r\n      AsyncFactoryFn<LocatorFnResult<T>[]> {\r\n    return () => this._getAllHarnessesAndTestElements(queries);\r\n  }\r\n\r\n  // Implemented as part of the `LocatorFactory` interface.\r\n  async rootHarnessLoader(): Promise<HarnessLoader> {\r\n    return this;\r\n  }\r\n\r\n  // Implemented as part of the `LocatorFactory` interface.\r\n  async harnessLoaderFor(selector: string): Promise<HarnessLoader> {\r\n    return this.createEnvironment(await _assertResultFound(this.getAllRawElements(selector),\r\n        [_getDescriptionForHarnessLoaderQuery(selector)]));\r\n  }\r\n\r\n  // Implemented as part of the `LocatorFactory` interface.\r\n  async harnessLoaderForOptional(selector: string): Promise<HarnessLoader | null> {\r\n    const elements = await this.getAllRawElements(selector);\r\n    return elements[0] ? this.createEnvironment(elements[0]) : null;\r\n  }\r\n\r\n  // Implemented as part of the `LocatorFactory` interface.\r\n  async harnessLoaderForAll(selector: string): Promise<HarnessLoader[]> {\r\n    const elements = await this.getAllRawElements(selector);\r\n    return elements.map(element => this.createEnvironment(element));\r\n  }\r\n\r\n  // Implemented as part of the `HarnessLoader` interface.\r\n  getHarness<T extends ComponentHarness>(query: HarnessQuery<T>): Promise<T> {\r\n    return this.locatorFor(query)();\r\n  }\r\n\r\n  // Implemented as part of the `HarnessLoader` interface.\r\n  getAllHarnesses<T extends ComponentHarness>(query: HarnessQuery<T>): Promise<T[]> {\r\n    return this.locatorForAll(query)();\r\n  }\r\n\r\n  // Implemented as part of the `HarnessLoader` interface.\r\n  async getChildLoader(selector: string): Promise<HarnessLoader> {\r\n    return this.createEnvironment(await _assertResultFound(this.getAllRawElements(selector),\r\n        [_getDescriptionForHarnessLoaderQuery(selector)]));\r\n  }\r\n\r\n  // Implemented as part of the `HarnessLoader` interface.\r\n  async getAllChildLoaders(selector: string): Promise<HarnessLoader[]> {\r\n    return (await this.getAllRawElements(selector)).map(e => this.createEnvironment(e));\r\n  }\r\n\r\n  /** Creates a `ComponentHarness` for the given harness type with the given raw host element. */\r\n  protected createComponentHarness<T extends ComponentHarness>(\r\n      harnessType: ComponentHarnessConstructor<T>, element: E): T {\r\n    return new harnessType(this.createEnvironment(element));\r\n  }\r\n\r\n  // Part of LocatorFactory interface, subclasses will implement.\r\n  abstract forceStabilize(): Promise<void>;\r\n\r\n  // Part of LocatorFactory interface, subclasses will implement.\r\n  abstract waitForTasksOutsideAngular(): Promise<void>;\r\n\r\n  /** Gets the root element for the document. */\r\n  protected abstract getDocumentRoot(): E;\r\n\r\n  /** Creates a `TestElement` from a raw element. */\r\n  protected abstract createTestElement(element: E): TestElement;\r\n\r\n  /** Creates a `HarnessLoader` rooted at the given raw element. */\r\n  protected abstract createEnvironment(element: E): HarnessEnvironment<E>;\r\n\r\n  /**\r\n   * Gets a list of all elements matching the given selector under this environment's root element.\r\n   */\r\n  protected abstract getAllRawElements(selector: string): Promise<E[]>;\r\n\r\n  /**\r\n   * Matches the given raw elements with the given list of element and harness queries to produce a\r\n   * list of matched harnesses and test elements.\r\n   */\r\n  private async _getAllHarnessesAndTestElements<T extends (HarnessQuery<any> | string)[]>(\r\n      queries: T): Promise<LocatorFnResult<T>[]> {\r\n    const {allQueries, harnessQueries, elementQueries, harnessTypes} = _parseQueries(queries);\r\n\r\n    // Combine all of the queries into one large comma-delimited selector and use it to get all raw\r\n    // elements matching any of the individual queries.\r\n    const rawElements = await this.getAllRawElements(\r\n        [...elementQueries, ...harnessQueries.map(predicate => predicate.getSelector())].join(','));\r\n\r\n    // If every query is searching for the same harness subclass, we know every result corresponds\r\n    // to an instance of that subclass. Likewise, if every query is for a `TestElement`, we know\r\n    // every result corresponds to a `TestElement`. Otherwise we need to verify which result was\r\n    // found by which selector so it can be matched to the appropriate instance.\r\n    const skipSelectorCheck = (elementQueries.length === 0 && harnessTypes.size === 1) ||\r\n        harnessQueries.length === 0;\r\n\r\n    const perElementMatches = await parallel(() => rawElements.map(async rawElement => {\r\n      const testElement = this.createTestElement(rawElement);\r\n      const allResultsForElement = await parallel(\r\n          // For each query, get `null` if it doesn't match, or a `TestElement` or\r\n          // `ComponentHarness` as appropriate if it does match. This gives us everything that\r\n          // matches the current raw element, but it may contain duplicate entries (e.g.\r\n          // multiple `TestElement` or multiple `ComponentHarness` of the same type).\r\n          () => allQueries.map(query => this._getQueryResultForElement(\r\n              query, rawElement, testElement, skipSelectorCheck)));\r\n      return _removeDuplicateQueryResults(allResultsForElement);\r\n    }));\r\n    return ([] as any).concat(...perElementMatches);\r\n  }\r\n\r\n  /**\r\n   * Check whether the given query matches the given element, if it does return the matched\r\n   * `TestElement` or `ComponentHarness`, if it does not, return null. In cases where the caller\r\n   * knows for sure that the query matches the element's selector, `skipSelectorCheck` can be used\r\n   * to skip verification and optimize performance.\r\n   */\r\n  private async _getQueryResultForElement<T extends ComponentHarness>(\r\n      query: string | HarnessPredicate<T>, rawElement: E, testElement: TestElement,\r\n      skipSelectorCheck: boolean = false): Promise<T | TestElement | null> {\r\n    if (typeof query === 'string') {\r\n      return ((skipSelectorCheck || await testElement.matchesSelector(query)) ? testElement : null);\r\n    }\r\n    if (skipSelectorCheck || await testElement.matchesSelector(query.getSelector())) {\r\n      const harness = this.createComponentHarness(query.harnessType, rawElement);\r\n      return (await query.evaluate(harness)) ? harness : null;\r\n    }\r\n    return null;\r\n  }\r\n}\r\n\r\n/**\r\n * Parses a list of queries in the format accepted by the `locatorFor*` methods into an easier to\r\n * work with format.\r\n */\r\nfunction _parseQueries<T extends (HarnessQuery<any> | string)[]>(queries: T):\r\n    ParsedQueries<LocatorFnResult<T> & ComponentHarness> {\r\n  const allQueries = [];\r\n  const harnessQueries = [];\r\n  const elementQueries = [];\r\n  const harnessTypes =\r\n      new Set<ComponentHarnessConstructor<LocatorFnResult<T> & ComponentHarness>>();\r\n\r\n  for (const query of queries) {\r\n    if (typeof query === 'string') {\r\n      allQueries.push(query);\r\n      elementQueries.push(query);\r\n    } else {\r\n      const predicate = query instanceof HarnessPredicate ? query : new HarnessPredicate(query, {});\r\n      allQueries.push(predicate);\r\n      harnessQueries.push(predicate);\r\n      harnessTypes.add(predicate.harnessType);\r\n    }\r\n  }\r\n\r\n  return {allQueries, harnessQueries, elementQueries, harnessTypes};\r\n}\r\n\r\n/**\r\n * Removes duplicate query results for a particular element. (e.g. multiple `TestElement`\r\n * instances or multiple instances of the same `ComponentHarness` class.\r\n */\r\nasync function _removeDuplicateQueryResults<T extends (ComponentHarness | TestElement | null)[]>(\r\n    results: T): Promise<T> {\r\n  let testElementMatched = false;\r\n  let matchedHarnessTypes = new Set();\r\n  const dedupedMatches = [];\r\n  for (const result of results) {\r\n    if (!result) {\r\n      continue;\r\n    }\r\n    if (result instanceof ComponentHarness) {\r\n      if (!matchedHarnessTypes.has(result.constructor)) {\r\n        matchedHarnessTypes.add(result.constructor);\r\n        dedupedMatches.push(result);\r\n      }\r\n    } else if (!testElementMatched) {\r\n      testElementMatched = true;\r\n      dedupedMatches.push(result);\r\n    }\r\n  }\r\n  return dedupedMatches as T;\r\n}\r\n\r\n/** Verifies that there is at least one result in an array. */\r\nasync function _assertResultFound<T>(results: Promise<T[]>, queryDescriptions: string[]):\r\n    Promise<T> {\r\n  const result = (await results)[0];\r\n  if (result == undefined) {\r\n    throw Error(`Failed to find element matching one of the following queries:\\n` +\r\n        queryDescriptions.map(desc => `(${desc})`).join(',\\n'));\r\n  }\r\n  return result;\r\n}\r\n\r\n/** Gets a list of description strings from a list of queries. */\r\nfunction _getDescriptionForLocatorForQueries(queries: (string | HarnessQuery<any>)[]) {\r\n  return queries.map(query => typeof query === 'string' ?\r\n      _getDescriptionForTestElementQuery(query) : _getDescriptionForComponentHarnessQuery(query));\r\n}\r\n\r\n/** Gets a description string for a `ComponentHarness` query. */\r\nfunction _getDescriptionForComponentHarnessQuery(query: HarnessQuery<any>) {\r\n  const harnessPredicate =\r\n      query instanceof HarnessPredicate ? query : new HarnessPredicate(query, {});\r\n  const {name, hostSelector} = harnessPredicate.harnessType;\r\n  const description = `${name} with host element matching selector: \"${hostSelector}\"`;\r\n  const constraints = harnessPredicate.getDescription();\r\n  return description + (constraints ?\r\n      ` satisfying the constraints: ${harnessPredicate.getDescription()}` : '');\r\n}\r\n\r\n/** Gets a description string for a `TestElement` query. */\r\nfunction _getDescriptionForTestElementQuery(selector: string) {\r\n  return `TestElement for element matching selector: \"${selector}\"`;\r\n}\r\n\r\n/** Gets a description string for a `HarnessLoader` query. */\r\nfunction _getDescriptionForHarnessLoaderQuery(selector: string) {\r\n  return `HarnessLoader for element matching selector: \"${selector}\"`;\r\n}\r\n","/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n\r\nimport {ElementDimensions} from './element-dimensions';\r\n\r\n/** Modifier keys that may be held while typing. */\r\nexport interface ModifierKeys {\r\n  control?: boolean;\r\n  alt?: boolean;\r\n  shift?: boolean;\r\n  meta?: boolean;\r\n}\r\n\r\n/** Data that can be attached to a custom event dispatched from a `TestElement`. */\r\nexport type EventData =\r\n    string | number | boolean | undefined | null | EventData[] | {[key: string]: EventData};\r\n\r\n/** An enum of non-text keys that can be used with the `sendKeys` method. */\r\n// NOTE: This is a separate enum from `@angular/cdk/keycodes` because we don't necessarily want to\r\n// support every possible keyCode. We also can't rely on Protractor's `Key` because we don't want a\r\n// dependency on any particular testing framework here. Instead we'll just maintain this supported\r\n// list of keys and let individual concrete `HarnessEnvironment` classes map them to whatever key\r\n// representation is used in its respective testing framework.\r\n// tslint:disable-next-line:prefer-const-enum Seems like this causes some issues with System.js\r\nexport enum TestKey {\r\n  BACKSPACE,\r\n  TAB,\r\n  ENTER,\r\n  SHIFT,\r\n  CONTROL,\r\n  ALT,\r\n  ESCAPE,\r\n  PAGE_UP,\r\n  PAGE_DOWN,\r\n  END,\r\n  HOME,\r\n  LEFT_ARROW,\r\n  UP_ARROW,\r\n  RIGHT_ARROW,\r\n  DOWN_ARROW,\r\n  INSERT,\r\n  DELETE,\r\n  F1,\r\n  F2,\r\n  F3,\r\n  F4,\r\n  F5,\r\n  F6,\r\n  F7,\r\n  F8,\r\n  F9,\r\n  F10,\r\n  F11,\r\n  F12,\r\n  META\r\n}\r\n\r\n/**\r\n * This acts as a common interface for DOM elements across both unit and e2e tests. It is the\r\n * interface through which the ComponentHarness interacts with the component's DOM.\r\n */\r\nexport interface TestElement {\r\n  /** Blur the element. */\r\n  blur(): Promise<void>;\r\n\r\n  /** Clear the element's input (for input and textarea elements only). */\r\n  clear(): Promise<void>;\r\n\r\n  /**\r\n   * Click the element at the default location for the current environment. If you need to guarantee\r\n   * the element is clicked at a specific location, consider using `click('center')` or\r\n   * `click(x, y)` instead.\r\n   */\r\n  click(modifiers?: ModifierKeys): Promise<void>;\r\n\r\n  /** Click the element at the element's center. */\r\n  click(location: 'center', modifiers?: ModifierKeys): Promise<void>;\r\n\r\n  /**\r\n   * Click the element at the specified coordinates relative to the top-left of the element.\r\n   * @param relativeX Coordinate within the element, along the X-axis at which to click.\r\n   * @param relativeY Coordinate within the element, along the Y-axis at which to click.\r\n   * @param modifiers Modifier keys held while clicking\r\n   */\r\n  click(relativeX: number, relativeY: number, modifiers?: ModifierKeys): Promise<void>;\r\n\r\n  /**\r\n   * Right clicks on the element at the specified coordinates relative to the top-left of it.\r\n   * @param relativeX Coordinate within the element, along the X-axis at which to click.\r\n   * @param relativeY Coordinate within the element, along the Y-axis at which to click.\r\n   * @param modifiers Modifier keys held while clicking\r\n   * @breaking-change 11.0.0 To become a required method.\r\n   */\r\n  rightClick?(relativeX: number, relativeY: number, modifiers?: ModifierKeys): Promise<void>;\r\n\r\n  /** Focus the element. */\r\n  focus(): Promise<void>;\r\n\r\n  /** Get the computed value of the given CSS property for the element. */\r\n  getCssValue(property: string): Promise<string>;\r\n\r\n  /** Hovers the mouse over the element. */\r\n  hover(): Promise<void>;\r\n\r\n  /** Moves the mouse away from the element. */\r\n  mouseAway(): Promise<void>;\r\n\r\n  /**\r\n   * Sends the given string to the input as a series of key presses. Also fires input events\r\n   * and attempts to add the string to the Element's value.\r\n   */\r\n  sendKeys(...keys: (string | TestKey)[]): Promise<void>;\r\n\r\n  /**\r\n   * Sends the given string to the input as a series of key presses. Also fires input events\r\n   * and attempts to add the string to the Element's value.\r\n   */\r\n  sendKeys(modifiers: ModifierKeys, ...keys: (string | TestKey)[]): Promise<void>;\r\n\r\n  /**\r\n   * Gets the text from the element.\r\n   * @param options Options that affect what text is included.\r\n   */\r\n  text(options?: TextOptions): Promise<string>;\r\n\r\n  /** Gets the value for the given attribute from the element. */\r\n  getAttribute(name: string): Promise<string | null>;\r\n\r\n  /** Checks whether the element has the given class. */\r\n  hasClass(name: string): Promise<boolean>;\r\n\r\n  /** Gets the dimensions of the element. */\r\n  getDimensions(): Promise<ElementDimensions>;\r\n\r\n  /** Gets the value of a property of an element. */\r\n  getProperty(name: string): Promise<any>;\r\n\r\n  /** Checks whether this element matches the given selector. */\r\n  matchesSelector(selector: string): Promise<boolean>;\r\n\r\n  /** Checks whether the element is focused. */\r\n  isFocused(): Promise<boolean>;\r\n\r\n  /**\r\n   * Sets the value of a property of an input.\r\n   * @breaking-change 11.0.0 To become a required method.\r\n   */\r\n  setInputValue?(value: string): Promise<void>;\r\n\r\n  // Note that ideally here we'd be selecting options based on their value, rather than their\r\n  // index, but we're limited by `@angular/forms` which will modify the option value in some cases.\r\n  // Since the value will be truncated, we can't rely on it to do the lookup in the DOM. See:\r\n  // https://github.com/angular/angular/blob/master/packages/forms/src/directives/select_control_value_accessor.ts#L19\r\n  /**\r\n   * Selects the options at the specified indexes inside of a native `select` element.\r\n   * @breaking-change 12.0.0 To become a required method.\r\n   */\r\n  selectOptions?(...optionIndexes: number[]): Promise<void>;\r\n\r\n  /**\r\n   * Dispatches an event with a particular name.\r\n   * @param name Name of the event to be dispatched.\r\n   * @breaking-change 12.0.0 To be a required method.\r\n   */\r\n  dispatchEvent?(name: string, data?: Record<string, EventData>): Promise<void>;\r\n}\r\n\r\nexport interface TextOptions {\r\n  /** Optional selector for elements to exclude. */\r\n  exclude?: string;\r\n}\r\n","/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n\r\n /**\r\n  * Dimensions for element size and its position relative to the viewport.\r\n  */\r\nexport interface ElementDimensions {\r\n  top: number;\r\n  left: number;\r\n  width: number;\r\n  height: number;\r\n}\r\n","/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n\r\n/**\r\n * Gets text of element excluding certain selectors within the element.\r\n * @param element Element to get text from,\r\n * @param excludeSelector Selector identifying which elements to exclude,\r\n */\r\nexport function _getTextWithExcludedElements(element: Element, excludeSelector: string) {\r\n  const clone = element.cloneNode(true) as Element;\r\n  const exclusions = clone.querySelectorAll(excludeSelector);\r\n  for (let i = 0; i < exclusions.length; i++) {\r\n    let child = exclusions[i];\r\n    child.parentNode?.removeChild(child);\r\n  }\r\n  return (clone.textContent || '').trim();\r\n}\r\n","/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n\r\nexport * from './component-harness';\r\nexport * from './harness-environment';\r\nexport * from './test-element';\r\nexport * from './element-dimensions';\r\nexport * from './text-filtering';\r\nexport * from './change-detection';\r\n","/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n\r\nexport * from './public-api';\r\n"],"names":[],"mappings":"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"}