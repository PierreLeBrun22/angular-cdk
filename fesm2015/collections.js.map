{"version":3,"file":"collections.js","sources":["../../../../../../src/cdk/collections/data-source.ts","../../../../../../src/cdk/collections/array-data-source.ts","../../../../../../src/cdk/collections/collection-viewer.ts","../../../../../../src/cdk/collections/dispose-view-repeater-strategy.ts","../../../../../../src/cdk/collections/recycle-view-repeater-strategy.ts","../../../../../../src/cdk/collections/selection-model.ts","../../../../../../src/cdk/collections/unique-selection-dispatcher.ts","../../../../../../src/cdk/collections/tree-adapter.ts","../../../../../../src/cdk/collections/view-repeater.ts","../../../../../../src/cdk/collections/public-api.ts","../../../../../../src/cdk/collections/index.ts"],"sourcesContent":["/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n\r\nimport {Observable} from 'rxjs';\r\nimport {CollectionViewer} from './collection-viewer';\r\n\r\nexport abstract class DataSource<T> {\r\n  /**\r\n   * Connects a collection viewer (such as a data-table) to this data source. Note that\r\n   * the stream provided will be accessed during change detection and should not directly change\r\n   * values that are bound in template views.\r\n   * @param collectionViewer The component that exposes a view over the data provided by this\r\n   *     data source.\r\n   * @returns Observable that emits a new value when the data changes.\r\n   */\r\n  abstract connect(collectionViewer: CollectionViewer): Observable<T[] | ReadonlyArray<T>>;\r\n\r\n  /**\r\n   * Disconnects a collection viewer (such as a data-table) from this data source. Can be used\r\n   * to perform any clean-up or tear-down operations when a view is being destroyed.\r\n   *\r\n   * @param collectionViewer The component that exposes a view over the data provided by this\r\n   *     data source.\r\n   */\r\n  abstract disconnect(collectionViewer: CollectionViewer): void;\r\n}\r\n\r\n/** Checks whether an object is a data source. */\r\nexport function isDataSource(value: any): value is DataSource<any> {\r\n  // Check if the value is a DataSource by observing if it has a connect function. Cannot\r\n  // be checked as an `instanceof DataSource` since people could create their own sources\r\n  // that match the interface, but don't extend DataSource.\r\n  return value && typeof value.connect === 'function';\r\n}\r\n","/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n\r\nimport {Observable, isObservable, of as observableOf} from 'rxjs';\r\nimport {DataSource} from './data-source';\r\n\r\n\r\n/** DataSource wrapper for a native array. */\r\nexport class ArrayDataSource<T> extends DataSource<T> {\r\n  constructor(private _data: T[] | ReadonlyArray<T> | Observable<T[] | ReadonlyArray<T>>) {\r\n    super();\r\n  }\r\n\r\n  connect(): Observable<T[] | ReadonlyArray<T>> {\r\n    return isObservable(this._data) ? this._data : observableOf(this._data);\r\n  }\r\n\r\n  disconnect() {}\r\n}\r\n","/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n\r\nimport {Observable} from 'rxjs';\r\n\r\n\r\n/** Represents a range of numbers with a specified start and end. */\r\nexport type ListRange = {start: number, end: number};\r\n\r\n\r\n/**\r\n * Interface for any component that provides a view of some data collection and wants to provide\r\n * information regarding the view and any changes made.\r\n */\r\nexport interface CollectionViewer {\r\n  /**\r\n   * A stream that emits whenever the `CollectionViewer` starts looking at a new portion of the\r\n   * data. The `start` index is inclusive, while the `end` is exclusive.\r\n   */\r\n  viewChange: Observable<ListRange>;\r\n}\r\n","/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n\r\nimport {\r\n  EmbeddedViewRef,\r\n  IterableChangeRecord,\r\n  IterableChanges,\r\n  ViewContainerRef\r\n} from '@angular/core';\r\nimport {\r\n  _ViewRepeater,\r\n  _ViewRepeaterItemChanged,\r\n  _ViewRepeaterItemContext,\r\n  _ViewRepeaterItemContextFactory,\r\n  _ViewRepeaterItemValueResolver,\r\n  _ViewRepeaterOperation\r\n} from './view-repeater';\r\n\r\n/**\r\n * A repeater that destroys views when they are removed from a\r\n * {@link ViewContainerRef}. When new items are inserted into the container,\r\n * the repeater will always construct a new embedded view for each item.\r\n *\r\n * @template T The type for the embedded view's $implicit property.\r\n * @template R The type for the item in each IterableDiffer change record.\r\n * @template C The type for the context passed to each embedded view.\r\n */\r\nexport class _DisposeViewRepeaterStrategy<T, R, C extends _ViewRepeaterItemContext<T>>\r\n    implements _ViewRepeater<T, R, C> {\r\n  applyChanges(changes: IterableChanges<R>,\r\n               viewContainerRef: ViewContainerRef,\r\n               itemContextFactory: _ViewRepeaterItemContextFactory<T, R, C>,\r\n               itemValueResolver: _ViewRepeaterItemValueResolver<T, R>,\r\n               itemViewChanged?: _ViewRepeaterItemChanged<R, C>) {\r\n    changes.forEachOperation(\r\n        (record: IterableChangeRecord<R>,\r\n         adjustedPreviousIndex: number | null,\r\n         currentIndex: number | null) => {\r\n          let view: EmbeddedViewRef<C> | undefined;\r\n          let operation: _ViewRepeaterOperation;\r\n          if (record.previousIndex == null) {\r\n            const insertContext = itemContextFactory(record, adjustedPreviousIndex, currentIndex);\r\n            view = viewContainerRef.createEmbeddedView(\r\n                insertContext.templateRef, insertContext.context, insertContext.index);\r\n            operation = _ViewRepeaterOperation.INSERTED;\r\n          } else if (currentIndex == null) {\r\n            viewContainerRef.remove(adjustedPreviousIndex!);\r\n            operation = _ViewRepeaterOperation.REMOVED;\r\n          } else {\r\n            view = viewContainerRef.get(adjustedPreviousIndex!) as EmbeddedViewRef<C>;\r\n            viewContainerRef.move(view!, currentIndex);\r\n            operation = _ViewRepeaterOperation.MOVED;\r\n          }\r\n\r\n          if (itemViewChanged) {\r\n            itemViewChanged({\r\n              context: view?.context,\r\n              operation,\r\n              record,\r\n            });\r\n          }\r\n        });\r\n  }\r\n\r\n  detach() {\r\n  }\r\n}\r\n","/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n\r\nimport {\r\n  EmbeddedViewRef,\r\n  IterableChangeRecord,\r\n  IterableChanges,\r\n  ViewContainerRef\r\n} from '@angular/core';\r\nimport {\r\n  _ViewRepeater,\r\n  _ViewRepeaterItemChanged,\r\n  _ViewRepeaterItemContext,\r\n  _ViewRepeaterItemContextFactory,\r\n  _ViewRepeaterItemInsertArgs,\r\n  _ViewRepeaterItemValueResolver,\r\n  _ViewRepeaterOperation\r\n} from './view-repeater';\r\n\r\n\r\n/**\r\n * A repeater that caches views when they are removed from a\r\n * {@link ViewContainerRef}. When new items are inserted into the container,\r\n * the repeater will reuse one of the cached views instead of creating a new\r\n * embedded view. Recycling cached views reduces the quantity of expensive DOM\r\n * inserts.\r\n *\r\n * @template T The type for the embedded view's $implicit property.\r\n * @template R The type for the item in each IterableDiffer change record.\r\n * @template C The type for the context passed to each embedded view.\r\n */\r\nexport class _RecycleViewRepeaterStrategy<T, R, C extends _ViewRepeaterItemContext<T>>\r\n    implements _ViewRepeater<T, R, C> {\r\n  /**\r\n   * The size of the cache used to store unused views.\r\n   * Setting the cache size to `0` will disable caching. Defaults to 20 views.\r\n   */\r\n  viewCacheSize: number = 20;\r\n\r\n  /**\r\n   * View cache that stores embedded view instances that have been previously stamped out,\r\n   * but don't are not currently rendered. The view repeater will reuse these views rather than\r\n   * creating brand new ones.\r\n   *\r\n   * TODO(michaeljamesparsons) Investigate whether using a linked list would improve performance.\r\n   */\r\n  private _viewCache: EmbeddedViewRef<C>[] = [];\r\n\r\n  /** Apply changes to the DOM. */\r\n  applyChanges(changes: IterableChanges<R>,\r\n               viewContainerRef: ViewContainerRef,\r\n               itemContextFactory: _ViewRepeaterItemContextFactory<T, R, C>,\r\n               itemValueResolver: _ViewRepeaterItemValueResolver<T, R>,\r\n               itemViewChanged?: _ViewRepeaterItemChanged<R, C>) {\r\n    // Rearrange the views to put them in the right location.\r\n    changes.forEachOperation((record: IterableChangeRecord<R>,\r\n                              adjustedPreviousIndex: number | null,\r\n                              currentIndex: number | null) => {\r\n      let view: EmbeddedViewRef<C> | undefined;\r\n      let operation: _ViewRepeaterOperation;\r\n      if (record.previousIndex == null) {  // Item added.\r\n        const viewArgsFactory = () => itemContextFactory(\r\n            record, adjustedPreviousIndex, currentIndex);\r\n        view = this._insertView(viewArgsFactory, currentIndex!, viewContainerRef,\r\n            itemValueResolver(record));\r\n        operation = view ? _ViewRepeaterOperation.INSERTED : _ViewRepeaterOperation.REPLACED;\r\n      } else if (currentIndex == null) {  // Item removed.\r\n        this._detachAndCacheView(adjustedPreviousIndex!, viewContainerRef);\r\n        operation = _ViewRepeaterOperation.REMOVED;\r\n      } else {  // Item moved.\r\n        view = this._moveView(adjustedPreviousIndex!, currentIndex!, viewContainerRef,\r\n            itemValueResolver(record));\r\n        operation = _ViewRepeaterOperation.MOVED;\r\n      }\r\n\r\n      if (itemViewChanged) {\r\n        itemViewChanged({\r\n          context: view?.context,\r\n          operation,\r\n          record,\r\n        });\r\n      }\r\n    });\r\n  }\r\n\r\n  detach() {\r\n    for (const view of this._viewCache) {\r\n      view.destroy();\r\n    }\r\n    this._viewCache = [];\r\n  }\r\n\r\n  /**\r\n   * Inserts a view for a new item, either from the cache or by creating a new\r\n   * one. Returns `undefined` if the item was inserted into a cached view.\r\n   */\r\n  private _insertView(viewArgsFactory: () => _ViewRepeaterItemInsertArgs<C>, currentIndex: number,\r\n                      viewContainerRef: ViewContainerRef,\r\n                      value: T): EmbeddedViewRef<C> | undefined {\r\n    const cachedView = this._insertViewFromCache(currentIndex!, viewContainerRef);\r\n    if (cachedView) {\r\n      cachedView.context.$implicit = value;\r\n      return undefined;\r\n    }\r\n\r\n    const viewArgs = viewArgsFactory();\r\n    return viewContainerRef.createEmbeddedView(\r\n        viewArgs.templateRef, viewArgs.context, viewArgs.index);\r\n  }\r\n\r\n  /** Detaches the view at the given index and inserts into the view cache. */\r\n  private _detachAndCacheView(index: number, viewContainerRef: ViewContainerRef) {\r\n    const detachedView = viewContainerRef.detach(index) as EmbeddedViewRef<C>;\r\n    this._maybeCacheView(detachedView, viewContainerRef);\r\n  }\r\n\r\n  /** Moves view at the previous index to the current index. */\r\n  private _moveView(adjustedPreviousIndex: number, currentIndex: number,\r\n                    viewContainerRef: ViewContainerRef, value: T): EmbeddedViewRef<C> {\r\n    const view = viewContainerRef.get(adjustedPreviousIndex!) as EmbeddedViewRef<C>;\r\n    viewContainerRef.move(view, currentIndex);\r\n    view.context.$implicit = value;\r\n    return view;\r\n  }\r\n\r\n  /**\r\n   * Cache the given detached view. If the cache is full, the view will be\r\n   * destroyed.\r\n   */\r\n  private _maybeCacheView(view: EmbeddedViewRef<C>, viewContainerRef: ViewContainerRef) {\r\n    if (this._viewCache.length < this.viewCacheSize) {\r\n      this._viewCache.push(view);\r\n    } else {\r\n      const index = viewContainerRef.indexOf(view);\r\n\r\n      // The host component could remove views from the container outside of\r\n      // the view repeater. It's unlikely this will occur, but just in case,\r\n      // destroy the view on its own, otherwise destroy it through the\r\n      // container to ensure that all the references are removed.\r\n      if (index === -1) {\r\n        view.destroy();\r\n      } else {\r\n        viewContainerRef.remove(index);\r\n      }\r\n    }\r\n  }\r\n\r\n  /** Inserts a recycled view from the cache at the given index. */\r\n  private _insertViewFromCache(index: number,\r\n                               viewContainerRef: ViewContainerRef): EmbeddedViewRef<C> | null {\r\n    const cachedView = this._viewCache.pop();\r\n    if (cachedView) {\r\n      viewContainerRef.insert(cachedView, index);\r\n    }\r\n    return cachedView || null;\r\n  }\r\n}\r\n","/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n\r\nimport {Subject} from 'rxjs';\r\n\r\n/**\r\n * Class to be used to power selecting one or more options from a list.\r\n */\r\nexport class SelectionModel<T> {\r\n  /** Currently-selected values. */\r\n  private _selection = new Set<T>();\r\n\r\n  /** Keeps track of the deselected options that haven't been emitted by the change event. */\r\n  private _deselectedToEmit: T[] = [];\r\n\r\n  /** Keeps track of the selected options that haven't been emitted by the change event. */\r\n  private _selectedToEmit: T[] = [];\r\n\r\n  /** Cache for the array value of the selected items. */\r\n  private _selected: T[] | null;\r\n\r\n  /** Selected values. */\r\n  get selected(): T[] {\r\n    if (!this._selected) {\r\n      this._selected = Array.from(this._selection.values());\r\n    }\r\n\r\n    return this._selected;\r\n  }\r\n\r\n  /** Event emitted when the value has changed. */\r\n  changed: Subject<SelectionChange<T>> = new Subject();\r\n\r\n  constructor(\r\n    private _multiple = false,\r\n    initiallySelectedValues?: T[],\r\n    private _emitChanges = true) {\r\n\r\n    if (initiallySelectedValues && initiallySelectedValues.length) {\r\n      if (_multiple) {\r\n        initiallySelectedValues.forEach(value => this._markSelected(value));\r\n      } else {\r\n        this._markSelected(initiallySelectedValues[0]);\r\n      }\r\n\r\n      // Clear the array in order to avoid firing the change event for preselected values.\r\n      this._selectedToEmit.length = 0;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Selects a value or an array of values.\r\n   */\r\n  select(...values: T[]): void {\r\n    this._verifyValueAssignment(values);\r\n    values.forEach(value => this._markSelected(value));\r\n    this._emitChangeEvent();\r\n  }\r\n\r\n  /**\r\n   * Deselects a value or an array of values.\r\n   */\r\n  deselect(...values: T[]): void {\r\n    this._verifyValueAssignment(values);\r\n    values.forEach(value => this._unmarkSelected(value));\r\n    this._emitChangeEvent();\r\n  }\r\n\r\n  /**\r\n   * Toggles a value between selected and deselected.\r\n   */\r\n  toggle(value: T): void {\r\n    this.isSelected(value) ? this.deselect(value) : this.select(value);\r\n  }\r\n\r\n  /**\r\n   * Clears all of the selected values.\r\n   */\r\n  clear(): void {\r\n    this._unmarkAll();\r\n    this._emitChangeEvent();\r\n  }\r\n\r\n  /**\r\n   * Determines whether a value is selected.\r\n   */\r\n  isSelected(value: T): boolean {\r\n    return this._selection.has(value);\r\n  }\r\n\r\n  /**\r\n   * Determines whether the model does not have a value.\r\n   */\r\n  isEmpty(): boolean {\r\n    return this._selection.size === 0;\r\n  }\r\n\r\n  /**\r\n   * Determines whether the model has a value.\r\n   */\r\n  hasValue(): boolean {\r\n    return !this.isEmpty();\r\n  }\r\n\r\n  /**\r\n   * Sorts the selected values based on a predicate function.\r\n   */\r\n  sort(predicate?: (a: T, b: T) => number): void {\r\n    if (this._multiple && this.selected) {\r\n      this._selected!.sort(predicate);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Gets whether multiple values can be selected.\r\n   */\r\n  isMultipleSelection() {\r\n    return this._multiple;\r\n  }\r\n\r\n  /** Emits a change event and clears the records of selected and deselected values. */\r\n  private _emitChangeEvent() {\r\n    // Clear the selected values so they can be re-cached.\r\n    this._selected = null;\r\n\r\n    if (this._selectedToEmit.length || this._deselectedToEmit.length) {\r\n      this.changed.next({\r\n        source: this,\r\n        added: this._selectedToEmit,\r\n        removed: this._deselectedToEmit\r\n      });\r\n\r\n      this._deselectedToEmit = [];\r\n      this._selectedToEmit = [];\r\n    }\r\n  }\r\n\r\n  /** Selects a value. */\r\n  private _markSelected(value: T) {\r\n    if (!this.isSelected(value)) {\r\n      if (!this._multiple) {\r\n        this._unmarkAll();\r\n      }\r\n\r\n      this._selection.add(value);\r\n\r\n      if (this._emitChanges) {\r\n        this._selectedToEmit.push(value);\r\n      }\r\n    }\r\n  }\r\n\r\n  /** Deselects a value. */\r\n  private _unmarkSelected(value: T) {\r\n    if (this.isSelected(value)) {\r\n      this._selection.delete(value);\r\n\r\n      if (this._emitChanges) {\r\n        this._deselectedToEmit.push(value);\r\n      }\r\n    }\r\n  }\r\n\r\n  /** Clears out the selected values. */\r\n  private _unmarkAll() {\r\n    if (!this.isEmpty()) {\r\n      this._selection.forEach(value => this._unmarkSelected(value));\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Verifies the value assignment and throws an error if the specified value array is\r\n   * including multiple values while the selection model is not supporting multiple values.\r\n   */\r\n  private _verifyValueAssignment(values: T[]) {\r\n    if (values.length > 1 && !this._multiple && (typeof ngDevMode === 'undefined' || ngDevMode)) {\r\n      throw getMultipleValuesInSingleSelectionError();\r\n    }\r\n  }\r\n}\r\n\r\n/**\r\n * Event emitted when the value of a MatSelectionModel has changed.\r\n * @docs-private\r\n */\r\nexport interface SelectionChange<T> {\r\n  /** Model that dispatched the event. */\r\n  source: SelectionModel<T>;\r\n  /** Options that were added to the model. */\r\n  added: T[];\r\n  /** Options that were removed from the model. */\r\n  removed: T[];\r\n}\r\n\r\n/**\r\n * Returns an error that reports that multiple values are passed into a selection model\r\n * with a single value.\r\n * @docs-private\r\n */\r\nexport function getMultipleValuesInSingleSelectionError() {\r\n  return Error('Cannot pass multiple values into SelectionModel with single-value mode.');\r\n}\r\n","/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n\r\nimport {Injectable, OnDestroy} from '@angular/core';\r\n\r\n\r\n// Users of the Dispatcher never need to see this type, but TypeScript requires it to be exported.\r\nexport type UniqueSelectionDispatcherListener = (id: string, name: string) => void;\r\n\r\n/**\r\n * Class to coordinate unique selection based on name.\r\n * Intended to be consumed as an Angular service.\r\n * This service is needed because native radio change events are only fired on the item currently\r\n * being selected, and we still need to uncheck the previous selection.\r\n *\r\n * This service does not *store* any IDs and names because they may change at any time, so it is\r\n * less error-prone if they are simply passed through when the events occur.\r\n */\r\n@Injectable({providedIn: 'root'})\r\nexport class UniqueSelectionDispatcher implements OnDestroy {\r\n  private _listeners: UniqueSelectionDispatcherListener[] = [];\r\n\r\n  /**\r\n   * Notify other items that selection for the given name has been set.\r\n   * @param id ID of the item.\r\n   * @param name Name of the item.\r\n   */\r\n  notify(id: string, name: string) {\r\n    for (let listener of this._listeners) {\r\n      listener(id, name);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Listen for future changes to item selection.\r\n   * @return Function used to deregister listener\r\n   */\r\n  listen(listener: UniqueSelectionDispatcherListener): () => void {\r\n    this._listeners.push(listener);\r\n    return () => {\r\n      this._listeners = this._listeners.filter((registered: UniqueSelectionDispatcherListener) => {\r\n        return listener !== registered;\r\n      });\r\n    };\r\n  }\r\n\r\n  ngOnDestroy() {\r\n    this._listeners = [];\r\n  }\r\n}\r\n","/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n\r\nimport {SelectionModel} from './selection-model';\r\n\r\n\r\n/**\r\n * Interface for a class that can flatten hierarchical structured data and re-expand the flattened\r\n * data back into its original structure. Should be used in conjunction with the cdk-tree.\r\n */\r\nexport interface TreeDataNodeFlattener<T> {\r\n  /** Transforms a set of hierarchical structured data into a flattened data array. */\r\n  flattenNodes(structuredData: any[]): T[];\r\n\r\n  /**\r\n   * Expands a flattened array of data into its hierarchical form using the provided expansion\r\n   * model.\r\n   */\r\n  expandFlattenedNodes(nodes: T[], expansionModel: SelectionModel<T>): T[];\r\n\r\n  /**\r\n   * Put node descendants of node in array.\r\n   * If `onlyExpandable` is true, then only process expandable descendants.\r\n   */\r\n  nodeDescendents(node: T, nodes: T[], onlyExpandable: boolean): void;\r\n}\r\n","/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n\r\nimport {\r\n  InjectionToken,\r\n  IterableChangeRecord,\r\n  IterableChanges,\r\n  TemplateRef,\r\n  ViewContainerRef\r\n} from '@angular/core';\r\n\r\n/**\r\n * The context for an embedded view in the repeater's view container.\r\n *\r\n * @template T The type for the embedded view's $implicit property.\r\n */\r\nexport interface _ViewRepeaterItemContext<T> {\r\n  $implicit?: T;\r\n}\r\n\r\n/**\r\n * The arguments needed to construct an embedded view for an item in a view\r\n * container.\r\n *\r\n * @template C The type for the context passed to each embedded view.\r\n */\r\nexport interface _ViewRepeaterItemInsertArgs<C> {\r\n  templateRef: TemplateRef<C>;\r\n  context?: C;\r\n  index?: number;\r\n}\r\n\r\n/**\r\n * A factory that derives the embedded view context for an item in a view\r\n * container.\r\n *\r\n * @template T The type for the embedded view's $implicit property.\r\n * @template R The type for the item in each IterableDiffer change record.\r\n * @template C The type for the context passed to each embedded view.\r\n */\r\nexport type _ViewRepeaterItemContextFactory<T, R, C extends _ViewRepeaterItemContext<T>> =\r\n    (record: IterableChangeRecord<R>,\r\n     adjustedPreviousIndex: number | null,\r\n     currentIndex: number | null) => _ViewRepeaterItemInsertArgs<C>;\r\n\r\n/**\r\n * Extracts the value of an item from an {@link IterableChangeRecord}.\r\n *\r\n * @template T The type for the embedded view's $implicit property.\r\n * @template R The type for the item in each IterableDiffer change record.\r\n */\r\nexport type _ViewRepeaterItemValueResolver<T, R> =\r\n    (record: IterableChangeRecord<R>) => T;\r\n\r\n/** Indicates how a view was changed by a {@link _ViewRepeater}. */\r\nexport const enum _ViewRepeaterOperation {\r\n  /** The content of an existing view was replaced with another item. */\r\n  REPLACED,\r\n  /** A new view was created with `createEmbeddedView`. */\r\n  INSERTED,\r\n  /** The position of a view changed, but the content remains the same. */\r\n  MOVED,\r\n  /** A view was detached from the view container. */\r\n  REMOVED,\r\n}\r\n\r\n/**\r\n * Meta data describing the state of a view after it was updated by a\r\n * {@link _ViewRepeater}.\r\n *\r\n * @template R The type for the item in each IterableDiffer change record.\r\n * @template C The type for the context passed to each embedded view.\r\n */\r\nexport interface _ViewRepeaterItemChange<R, C> {\r\n  /** The view's context after it was changed. */\r\n  context?: C;\r\n  /** Indicates how the view was changed. */\r\n  operation: _ViewRepeaterOperation;\r\n  /** The view's corresponding change record. */\r\n  record: IterableChangeRecord<R>;\r\n}\r\n\r\n/**\r\n * Type for a callback to be executed after a view has changed.\r\n *\r\n * @template R The type for the item in each IterableDiffer change record.\r\n * @template C The type for the context passed to each embedded view.\r\n */\r\nexport type _ViewRepeaterItemChanged<R, C> =\r\n    (change: _ViewRepeaterItemChange<R, C>) => void;\r\n\r\n/**\r\n * Describes a strategy for rendering items in a {@link ViewContainerRef}.\r\n *\r\n * @template T The type for the embedded view's $implicit property.\r\n * @template R The type for the item in each IterableDiffer change record.\r\n * @template C The type for the context passed to each embedded view.\r\n */\r\nexport interface _ViewRepeater<T, R, C extends _ViewRepeaterItemContext<T>> {\r\n  applyChanges(\r\n      changes: IterableChanges<R>,\r\n      viewContainerRef: ViewContainerRef,\r\n      itemContextFactory: _ViewRepeaterItemContextFactory<T, R, C>,\r\n      itemValueResolver: _ViewRepeaterItemValueResolver<T, R>,\r\n      itemViewChanged?: _ViewRepeaterItemChanged<R, C>): void;\r\n\r\n  detach(): void;\r\n}\r\n\r\n/**\r\n * Injection token for {@link _ViewRepeater}. This token is for use by Angular Material only.\r\n * @docs-private\r\n */\r\nexport const _VIEW_REPEATER_STRATEGY = new InjectionToken<\r\n        _ViewRepeater<unknown, unknown, _ViewRepeaterItemContext<unknown>>>('_ViewRepeater');\r\n","/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n\r\nexport * from './array-data-source';\r\nexport * from './collection-viewer';\r\nexport * from './data-source';\r\nexport * from './dispose-view-repeater-strategy';\r\nexport * from './recycle-view-repeater-strategy';\r\nexport * from './selection-model';\r\nexport {\r\n  UniqueSelectionDispatcher,\r\n  UniqueSelectionDispatcherListener,\r\n} from './unique-selection-dispatcher';\r\nexport * from './tree-adapter';\r\nexport * from './view-repeater';\r\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './public-api';\n"],"names":["observableOf"],"mappings":";;;AAAA;;;;;;;AAWA,MAAsB,UAAU;CAmB/B;;AAGD,SAAgB,YAAY,CAAC,KAAU;;;;IAIrC,OAAO,KAAK,IAAI,OAAO,KAAK,CAAC,OAAO,KAAK,UAAU,CAAC;CACrD;;ACtCD;;;;;;;AAQA,AAIA;AACA,MAAa,eAAmB,SAAQ,UAAa;IACnD,YAAoB,KAAkE;QACpF,KAAK,EAAE,CAAC;QADU,UAAK,GAAL,KAAK,CAA6D;KAErF;IAED,OAAO;QACL,OAAO,YAAY,CAAC,IAAI,CAAC,KAAK,CAAC,GAAG,IAAI,CAAC,KAAK,GAAGA,EAAY,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;KACzE;IAED,UAAU,MAAK;CAChB;;ACvBD;;;;;;GAMG;;ACNH;;;;;;;;;;;;;;;;AAgCA,MAAa,4BAA4B;IAEvC,YAAY,CAAC,OAA2B,EAC3B,gBAAkC,EAClC,kBAA4D,EAC5D,iBAAuD,EACvD,eAAgD;QAC3D,OAAO,CAAC,gBAAgB,CACpB,CAAC,MAA+B,EAC/B,qBAAoC,EACpC,YAA2B;YAC1B,IAAI,IAAoC,CAAC;YACzC,IAAI,SAAiC,CAAC;YACtC,IAAI,MAAM,CAAC,aAAa,IAAI,IAAI,EAAE;gBAChC,MAAM,aAAa,GAAG,kBAAkB,CAAC,MAAM,EAAE,qBAAqB,EAAE,YAAY,CAAC,CAAC;gBACtF,IAAI,GAAG,gBAAgB,CAAC,kBAAkB,CACtC,aAAa,CAAC,WAAW,EAAE,aAAa,CAAC,OAAO,EAAE,aAAa,CAAC,KAAK,CAAC,CAAC;gBAC3E,SAAS,oBAAmC;aAC7C;iBAAM,IAAI,YAAY,IAAI,IAAI,EAAE;gBAC/B,gBAAgB,CAAC,MAAM,CAAC,qBAAsB,CAAC,CAAC;gBAChD,SAAS,mBAAkC;aAC5C;iBAAM;gBACL,IAAI,GAAG,gBAAgB,CAAC,GAAG,CAAC,qBAAsB,CAAuB,CAAC;gBAC1E,gBAAgB,CAAC,IAAI,CAAC,IAAK,EAAE,YAAY,CAAC,CAAC;gBAC3C,SAAS,iBAAgC;aAC1C;YAED,IAAI,eAAe,EAAE;gBACnB,eAAe,CAAC;oBACd,OAAO,EAAE,IAAI,aAAJ,IAAI,uBAAJ,IAAI,CAAE,OAAO;oBACtB,SAAS;oBACT,MAAM;iBACP,CAAC,CAAC;aACJ;SACF,CAAC,CAAC;KACR;IAED,MAAM;KACL;CACF;;ACvED;;;;;;;;;;;;;;;;;;AAoCA,MAAa,4BAA4B;IAAzC;;;;;QAME,kBAAa,GAAW,EAAE,CAAC;;;;;;;;QASnB,eAAU,GAAyB,EAAE,CAAC;KA8G/C;;IA3GC,YAAY,CAAC,OAA2B,EAC3B,gBAAkC,EAClC,kBAA4D,EAC5D,iBAAuD,EACvD,eAAgD;;QAE3D,OAAO,CAAC,gBAAgB,CAAC,CAAC,MAA+B,EAC/B,qBAAoC,EACpC,YAA2B;YACnD,IAAI,IAAoC,CAAC;YACzC,IAAI,SAAiC,CAAC;YACtC,IAAI,MAAM,CAAC,aAAa,IAAI,IAAI,EAAE;gBAChC,MAAM,eAAe,GAAG,MAAM,kBAAkB,CAC5C,MAAM,EAAE,qBAAqB,EAAE,YAAY,CAAC,CAAC;gBACjD,IAAI,GAAG,IAAI,CAAC,WAAW,CAAC,eAAe,EAAE,YAAa,EAAE,gBAAgB,EACpE,iBAAiB,CAAC,MAAM,CAAC,CAAC,CAAC;gBAC/B,SAAS,GAAG,IAAI,uCAAqE;aACtF;iBAAM,IAAI,YAAY,IAAI,IAAI,EAAE;gBAC/B,IAAI,CAAC,mBAAmB,CAAC,qBAAsB,EAAE,gBAAgB,CAAC,CAAC;gBACnE,SAAS,mBAAkC;aAC5C;iBAAM;gBACL,IAAI,GAAG,IAAI,CAAC,SAAS,CAAC,qBAAsB,EAAE,YAAa,EAAE,gBAAgB,EACzE,iBAAiB,CAAC,MAAM,CAAC,CAAC,CAAC;gBAC/B,SAAS,iBAAgC;aAC1C;YAED,IAAI,eAAe,EAAE;gBACnB,eAAe,CAAC;oBACd,OAAO,EAAE,IAAI,aAAJ,IAAI,uBAAJ,IAAI,CAAE,OAAO;oBACtB,SAAS;oBACT,MAAM;iBACP,CAAC,CAAC;aACJ;SACF,CAAC,CAAC;KACJ;IAED,MAAM;QACJ,KAAK,MAAM,IAAI,IAAI,IAAI,CAAC,UAAU,EAAE;YAClC,IAAI,CAAC,OAAO,EAAE,CAAC;SAChB;QACD,IAAI,CAAC,UAAU,GAAG,EAAE,CAAC;KACtB;;;;;IAMO,WAAW,CAAC,eAAqD,EAAE,YAAoB,EAC3E,gBAAkC,EAClC,KAAQ;QAC1B,MAAM,UAAU,GAAG,IAAI,CAAC,oBAAoB,CAAC,YAAa,EAAE,gBAAgB,CAAC,CAAC;QAC9E,IAAI,UAAU,EAAE;YACd,UAAU,CAAC,OAAO,CAAC,SAAS,GAAG,KAAK,CAAC;YACrC,OAAO,SAAS,CAAC;SAClB;QAED,MAAM,QAAQ,GAAG,eAAe,EAAE,CAAC;QACnC,OAAO,gBAAgB,CAAC,kBAAkB,CACtC,QAAQ,CAAC,WAAW,EAAE,QAAQ,CAAC,OAAO,EAAE,QAAQ,CAAC,KAAK,CAAC,CAAC;KAC7D;;IAGO,mBAAmB,CAAC,KAAa,EAAE,gBAAkC;QAC3E,MAAM,YAAY,GAAG,gBAAgB,CAAC,MAAM,CAAC,KAAK,CAAuB,CAAC;QAC1E,IAAI,CAAC,eAAe,CAAC,YAAY,EAAE,gBAAgB,CAAC,CAAC;KACtD;;IAGO,SAAS,CAAC,qBAA6B,EAAE,YAAoB,EACnD,gBAAkC,EAAE,KAAQ;QAC5D,MAAM,IAAI,GAAG,gBAAgB,CAAC,GAAG,CAAC,qBAAsB,CAAuB,CAAC;QAChF,gBAAgB,CAAC,IAAI,CAAC,IAAI,EAAE,YAAY,CAAC,CAAC;QAC1C,IAAI,CAAC,OAAO,CAAC,SAAS,GAAG,KAAK,CAAC;QAC/B,OAAO,IAAI,CAAC;KACb;;;;;IAMO,eAAe,CAAC,IAAwB,EAAE,gBAAkC;QAClF,IAAI,IAAI,CAAC,UAAU,CAAC,MAAM,GAAG,IAAI,CAAC,aAAa,EAAE;YAC/C,IAAI,CAAC,UAAU,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;SAC5B;aAAM;YACL,MAAM,KAAK,GAAG,gBAAgB,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC;;;;;YAM7C,IAAI,KAAK,KAAK,CAAC,CAAC,EAAE;gBAChB,IAAI,CAAC,OAAO,EAAE,CAAC;aAChB;iBAAM;gBACL,gBAAgB,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC;aAChC;SACF;KACF;;IAGO,oBAAoB,CAAC,KAAa,EACb,gBAAkC;QAC7D,MAAM,UAAU,GAAG,IAAI,CAAC,UAAU,CAAC,GAAG,EAAE,CAAC;QACzC,IAAI,UAAU,EAAE;YACd,gBAAgB,CAAC,MAAM,CAAC,UAAU,EAAE,KAAK,CAAC,CAAC;SAC5C;QACD,OAAO,UAAU,IAAI,IAAI,CAAC;KAC3B;CACF;;ACjKD;;;;;;;AAQA,AAEA;;;AAGA,MAAa,cAAc;IAyBzB,YACU,YAAY,KAAK,EACzB,uBAA6B,EACrB,eAAe,IAAI;QAFnB,cAAS,GAAT,SAAS,CAAQ;QAEjB,iBAAY,GAAZ,YAAY,CAAO;;QA1BrB,eAAU,GAAG,IAAI,GAAG,EAAK,CAAC;;QAG1B,sBAAiB,GAAQ,EAAE,CAAC;;QAG5B,oBAAe,GAAQ,EAAE,CAAC;;QAelC,YAAO,GAAgC,IAAI,OAAO,EAAE,CAAC;QAOnD,IAAI,uBAAuB,IAAI,uBAAuB,CAAC,MAAM,EAAE;YAC7D,IAAI,SAAS,EAAE;gBACb,uBAAuB,CAAC,OAAO,CAAC,KAAK,IAAI,IAAI,CAAC,aAAa,CAAC,KAAK,CAAC,CAAC,CAAC;aACrE;iBAAM;gBACL,IAAI,CAAC,aAAa,CAAC,uBAAuB,CAAC,CAAC,CAAC,CAAC,CAAC;aAChD;;YAGD,IAAI,CAAC,eAAe,CAAC,MAAM,GAAG,CAAC,CAAC;SACjC;KACF;;IA1BD,IAAI,QAAQ;QACV,IAAI,CAAC,IAAI,CAAC,SAAS,EAAE;YACnB,IAAI,CAAC,SAAS,GAAG,KAAK,CAAC,IAAI,CAAC,IAAI,CAAC,UAAU,CAAC,MAAM,EAAE,CAAC,CAAC;SACvD;QAED,OAAO,IAAI,CAAC,SAAS,CAAC;KACvB;;;;IAyBD,MAAM,CAAC,GAAG,MAAW;QACnB,IAAI,CAAC,sBAAsB,CAAC,MAAM,CAAC,CAAC;QACpC,MAAM,CAAC,OAAO,CAAC,KAAK,IAAI,IAAI,CAAC,aAAa,CAAC,KAAK,CAAC,CAAC,CAAC;QACnD,IAAI,CAAC,gBAAgB,EAAE,CAAC;KACzB;;;;IAKD,QAAQ,CAAC,GAAG,MAAW;QACrB,IAAI,CAAC,sBAAsB,CAAC,MAAM,CAAC,CAAC;QACpC,MAAM,CAAC,OAAO,CAAC,KAAK,IAAI,IAAI,CAAC,eAAe,CAAC,KAAK,CAAC,CAAC,CAAC;QACrD,IAAI,CAAC,gBAAgB,EAAE,CAAC;KACzB;;;;IAKD,MAAM,CAAC,KAAQ;QACb,IAAI,CAAC,UAAU,CAAC,KAAK,CAAC,GAAG,IAAI,CAAC,QAAQ,CAAC,KAAK,CAAC,GAAG,IAAI,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC;KACpE;;;;IAKD,KAAK;QACH,IAAI,CAAC,UAAU,EAAE,CAAC;QAClB,IAAI,CAAC,gBAAgB,EAAE,CAAC;KACzB;;;;IAKD,UAAU,CAAC,KAAQ;QACjB,OAAO,IAAI,CAAC,UAAU,CAAC,GAAG,CAAC,KAAK,CAAC,CAAC;KACnC;;;;IAKD,OAAO;QACL,OAAO,IAAI,CAAC,UAAU,CAAC,IAAI,KAAK,CAAC,CAAC;KACnC;;;;IAKD,QAAQ;QACN,OAAO,CAAC,IAAI,CAAC,OAAO,EAAE,CAAC;KACxB;;;;IAKD,IAAI,CAAC,SAAkC;QACrC,IAAI,IAAI,CAAC,SAAS,IAAI,IAAI,CAAC,QAAQ,EAAE;YACnC,IAAI,CAAC,SAAU,CAAC,IAAI,CAAC,SAAS,CAAC,CAAC;SACjC;KACF;;;;IAKD,mBAAmB;QACjB,OAAO,IAAI,CAAC,SAAS,CAAC;KACvB;;IAGO,gBAAgB;;QAEtB,IAAI,CAAC,SAAS,GAAG,IAAI,CAAC;QAEtB,IAAI,IAAI,CAAC,eAAe,CAAC,MAAM,IAAI,IAAI,CAAC,iBAAiB,CAAC,MAAM,EAAE;YAChE,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC;gBAChB,MAAM,EAAE,IAAI;gBACZ,KAAK,EAAE,IAAI,CAAC,eAAe;gBAC3B,OAAO,EAAE,IAAI,CAAC,iBAAiB;aAChC,CAAC,CAAC;YAEH,IAAI,CAAC,iBAAiB,GAAG,EAAE,CAAC;YAC5B,IAAI,CAAC,eAAe,GAAG,EAAE,CAAC;SAC3B;KACF;;IAGO,aAAa,CAAC,KAAQ;QAC5B,IAAI,CAAC,IAAI,CAAC,UAAU,CAAC,KAAK,CAAC,EAAE;YAC3B,IAAI,CAAC,IAAI,CAAC,SAAS,EAAE;gBACnB,IAAI,CAAC,UAAU,EAAE,CAAC;aACnB;YAED,IAAI,CAAC,UAAU,CAAC,GAAG,CAAC,KAAK,CAAC,CAAC;YAE3B,IAAI,IAAI,CAAC,YAAY,EAAE;gBACrB,IAAI,CAAC,eAAe,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;aAClC;SACF;KACF;;IAGO,eAAe,CAAC,KAAQ;QAC9B,IAAI,IAAI,CAAC,UAAU,CAAC,KAAK,CAAC,EAAE;YAC1B,IAAI,CAAC,UAAU,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC;YAE9B,IAAI,IAAI,CAAC,YAAY,EAAE;gBACrB,IAAI,CAAC,iBAAiB,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;aACpC;SACF;KACF;;IAGO,UAAU;QAChB,IAAI,CAAC,IAAI,CAAC,OAAO,EAAE,EAAE;YACnB,IAAI,CAAC,UAAU,CAAC,OAAO,CAAC,KAAK,IAAI,IAAI,CAAC,eAAe,CAAC,KAAK,CAAC,CAAC,CAAC;SAC/D;KACF;;;;;IAMO,sBAAsB,CAAC,MAAW;QACxC,IAAI,MAAM,CAAC,MAAM,GAAG,CAAC,IAAI,CAAC,IAAI,CAAC,SAAS,KAAK,OAAO,SAAS,KAAK,WAAW,IAAI,SAAS,CAAC,EAAE;YAC3F,MAAM,uCAAuC,EAAE,CAAC;SACjD;KACF;CACF;;;;;;AAoBD,SAAgB,uCAAuC;IACrD,OAAO,KAAK,CAAC,yEAAyE,CAAC,CAAC;CACzF;;AC9MD;;;;;;;AAQA,AAMA;;;;;;;;;AAUA,MAAa,yBAAyB;IADtC;QAEU,eAAU,GAAwC,EAAE,CAAC;KA6B9D;;;;;;IAtBC,MAAM,CAAC,EAAU,EAAE,IAAY;QAC7B,KAAK,IAAI,QAAQ,IAAI,IAAI,CAAC,UAAU,EAAE;YACpC,QAAQ,CAAC,EAAE,EAAE,IAAI,CAAC,CAAC;SACpB;KACF;;;;;IAMD,MAAM,CAAC,QAA2C;QAChD,IAAI,CAAC,UAAU,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC;QAC/B,OAAO;YACL,IAAI,CAAC,UAAU,GAAG,IAAI,CAAC,UAAU,CAAC,MAAM,CAAC,CAAC,UAA6C;gBACrF,OAAO,QAAQ,KAAK,UAAU,CAAC;aAChC,CAAC,CAAC;SACJ,CAAC;KACH;IAED,WAAW;QACT,IAAI,CAAC,UAAU,GAAG,EAAE,CAAC;KACtB;;;;YA9BF,UAAU,SAAC,EAAC,UAAU,EAAE,MAAM,EAAC;;;ACvBhC;;;;;;GAMG;;ACNH;;;;;;;AAQA,AA0GA;;;;AAIA,MAAa,uBAAuB,GAAG,IAAI,cAAc,CACmB,eAAe,CAAC;;ACvH5F;;;;;;GAMG;;ACNH;;GAEG;;;;"}