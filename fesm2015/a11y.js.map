{"version":3,"file":"a11y.js","sources":["../../../../../../src/cdk/a11y/aria-describer/aria-reference.ts","../../../../../../src/cdk/a11y/aria-describer/aria-describer.ts","../../../../../../src/cdk/a11y/key-manager/list-key-manager.ts","../../../../../../src/cdk/a11y/key-manager/activedescendant-key-manager.ts","../../../../../../src/cdk/a11y/key-manager/focus-key-manager.ts","../../../../../../src/cdk/a11y/interactivity-checker/interactivity-checker.ts","../../../../../../src/cdk/a11y/focus-trap/focus-trap.ts","../../../../../../src/cdk/a11y/focus-trap/configurable-focus-trap.ts","../../../../../../src/cdk/a11y/focus-trap/polyfill.ts","../../../../../../src/cdk/a11y/focus-trap/event-listener-inert-strategy.ts","../../../../../../src/cdk/a11y/focus-trap/configurable-focus-trap-config.ts","../../../../../../src/cdk/a11y/focus-trap/focus-trap-inert-strategy.ts","../../../../../../src/cdk/a11y/focus-trap/focus-trap-manager.ts","../../../../../../src/cdk/a11y/focus-trap/configurable-focus-trap-factory.ts","../../../../../../src/cdk/a11y/live-announcer/live-announcer-tokens.ts","../../../../../../src/cdk/a11y/live-announcer/live-announcer.ts","../../../../../../src/cdk/a11y/fake-event-detection.ts","../../../../../../src/cdk/a11y/focus-monitor/focus-monitor.ts","../../../../../../src/cdk/a11y/high-contrast-mode/high-contrast-mode-detector.ts","../../../../../../src/cdk/a11y/a11y-module.ts","../../../../../../src/cdk/a11y/public-api.ts","../../../../../../src/cdk/a11y/index.ts"],"sourcesContent":["/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n\r\n/** IDs are delimited by an empty space, as per the spec. */\r\nconst ID_DELIMITER = ' ';\r\n\r\n/**\r\n * Adds the given ID to the specified ARIA attribute on an element.\r\n * Used for attributes such as aria-labelledby, aria-owns, etc.\r\n */\r\nexport function addAriaReferencedId(el: Element, attr: string, id: string) {\r\n  const ids = getAriaReferenceIds(el, attr);\r\n  if (ids.some(existingId => existingId.trim() == id.trim())) { return; }\r\n  ids.push(id.trim());\r\n\r\n  el.setAttribute(attr, ids.join(ID_DELIMITER));\r\n}\r\n\r\n/**\r\n * Removes the given ID from the specified ARIA attribute on an element.\r\n * Used for attributes such as aria-labelledby, aria-owns, etc.\r\n */\r\nexport function removeAriaReferencedId(el: Element, attr: string, id: string) {\r\n  const ids = getAriaReferenceIds(el, attr);\r\n  const filteredIds = ids.filter(val => val != id.trim());\r\n\r\n  if (filteredIds.length) {\r\n    el.setAttribute(attr, filteredIds.join(ID_DELIMITER));\r\n  } else {\r\n    el.removeAttribute(attr);\r\n  }\r\n}\r\n\r\n/**\r\n * Gets the list of IDs referenced by the given ARIA attribute on an element.\r\n * Used for attributes such as aria-labelledby, aria-owns, etc.\r\n */\r\nexport function getAriaReferenceIds(el: Element, attr: string): string[] {\r\n  // Get string array of all individual ids (whitespace delimited) in the attribute value\r\n  return (el.getAttribute(attr) || '').match(/\\S+/g) || [];\r\n}\r\n","/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n\r\nimport {DOCUMENT} from '@angular/common';\r\nimport {Inject, Injectable, OnDestroy} from '@angular/core';\r\nimport {addAriaReferencedId, getAriaReferenceIds, removeAriaReferencedId} from './aria-reference';\r\n\r\n\r\n/**\r\n * Interface used to register message elements and keep a count of how many registrations have\r\n * the same message and the reference to the message element used for the `aria-describedby`.\r\n */\r\nexport interface RegisteredMessage {\r\n  /** The element containing the message. */\r\n  messageElement: Element;\r\n\r\n  /** The number of elements that reference this message element via `aria-describedby`. */\r\n  referenceCount: number;\r\n}\r\n\r\n/** ID used for the body container where all messages are appended. */\r\nexport const MESSAGES_CONTAINER_ID = 'cdk-describedby-message-container';\r\n\r\n/** ID prefix used for each created message element. */\r\nexport const CDK_DESCRIBEDBY_ID_PREFIX = 'cdk-describedby-message';\r\n\r\n/** Attribute given to each host element that is described by a message element. */\r\nexport const CDK_DESCRIBEDBY_HOST_ATTRIBUTE = 'cdk-describedby-host';\r\n\r\n/** Global incremental identifier for each registered message element. */\r\nlet nextId = 0;\r\n\r\n/** Global map of all registered message elements that have been placed into the document. */\r\nconst messageRegistry = new Map<string|Element, RegisteredMessage>();\r\n\r\n/** Container for all registered messages. */\r\nlet messagesContainer: HTMLElement | null = null;\r\n\r\n/**\r\n * Utility that creates visually hidden elements with a message content. Useful for elements that\r\n * want to use aria-describedby to further describe themselves without adding additional visual\r\n * content.\r\n */\r\n@Injectable({providedIn: 'root'})\r\nexport class AriaDescriber implements OnDestroy {\r\n  private _document: Document;\r\n\r\n  constructor(\r\n    @Inject(DOCUMENT) _document: any) {\r\n    this._document = _document;\r\n  }\r\n\r\n  /**\r\n   * Adds to the host element an aria-describedby reference to a hidden element that contains\r\n   * the message. If the same message has already been registered, then it will reuse the created\r\n   * message element.\r\n   */\r\n  describe(hostElement: Element, message: string, role?: string): void;\r\n\r\n  /**\r\n   * Adds to the host element an aria-describedby reference to an already-existing message element.\r\n   */\r\n  describe(hostElement: Element, message: HTMLElement): void;\r\n\r\n  describe(hostElement: Element, message: string|HTMLElement, role?: string): void {\r\n    if (!this._canBeDescribed(hostElement, message)) {\r\n      return;\r\n    }\r\n\r\n    const key = getKey(message, role);\r\n\r\n    if (typeof message !== 'string') {\r\n      // We need to ensure that the element has an ID.\r\n      setMessageId(message);\r\n      messageRegistry.set(key, {messageElement: message, referenceCount: 0});\r\n    } else if (!messageRegistry.has(key)) {\r\n      this._createMessageElement(message, role);\r\n    }\r\n\r\n    if (!this._isElementDescribedByMessage(hostElement, key)) {\r\n      this._addMessageReference(hostElement, key);\r\n    }\r\n  }\r\n\r\n  /** Removes the host element's aria-describedby reference to the message. */\r\n  removeDescription(hostElement: Element, message: string, role?: string): void;\r\n\r\n  /** Removes the host element's aria-describedby reference to the message element. */\r\n  removeDescription(hostElement: Element, message: HTMLElement): void;\r\n\r\n  removeDescription(hostElement: Element, message: string|HTMLElement, role?: string): void {\r\n    if (!message || !this._isElementNode(hostElement)) {\r\n      return;\r\n    }\r\n\r\n    const key = getKey(message, role);\r\n\r\n    if (this._isElementDescribedByMessage(hostElement, key)) {\r\n      this._removeMessageReference(hostElement, key);\r\n    }\r\n\r\n    // If the message is a string, it means that it's one that we created for the\r\n    // consumer so we can remove it safely, otherwise we should leave it in place.\r\n    if (typeof message === 'string') {\r\n      const registeredMessage = messageRegistry.get(key);\r\n      if (registeredMessage && registeredMessage.referenceCount === 0) {\r\n        this._deleteMessageElement(key);\r\n      }\r\n    }\r\n\r\n    if (messagesContainer && messagesContainer.childNodes.length === 0) {\r\n      this._deleteMessagesContainer();\r\n    }\r\n  }\r\n\r\n  /** Unregisters all created message elements and removes the message container. */\r\n  ngOnDestroy() {\r\n    const describedElements =\r\n        this._document.querySelectorAll(`[${CDK_DESCRIBEDBY_HOST_ATTRIBUTE}]`);\r\n\r\n    for (let i = 0; i < describedElements.length; i++) {\r\n      this._removeCdkDescribedByReferenceIds(describedElements[i]);\r\n      describedElements[i].removeAttribute(CDK_DESCRIBEDBY_HOST_ATTRIBUTE);\r\n    }\r\n\r\n    if (messagesContainer) {\r\n      this._deleteMessagesContainer();\r\n    }\r\n\r\n    messageRegistry.clear();\r\n  }\r\n\r\n  /**\r\n   * Creates a new element in the visually hidden message container element with the message\r\n   * as its content and adds it to the message registry.\r\n   */\r\n  private _createMessageElement(message: string, role?: string) {\r\n    const messageElement = this._document.createElement('div');\r\n    setMessageId(messageElement);\r\n    messageElement.textContent = message;\r\n\r\n    if (role) {\r\n      messageElement.setAttribute('role', role);\r\n    }\r\n\r\n    this._createMessagesContainer();\r\n    messagesContainer!.appendChild(messageElement);\r\n    messageRegistry.set(getKey(message, role), {messageElement, referenceCount: 0});\r\n  }\r\n\r\n  /** Deletes the message element from the global messages container. */\r\n  private _deleteMessageElement(key: string|Element) {\r\n    const registeredMessage = messageRegistry.get(key);\r\n    const messageElement = registeredMessage && registeredMessage.messageElement;\r\n    if (messagesContainer && messageElement) {\r\n      messagesContainer.removeChild(messageElement);\r\n    }\r\n    messageRegistry.delete(key);\r\n  }\r\n\r\n  /** Creates the global container for all aria-describedby messages. */\r\n  private _createMessagesContainer() {\r\n    if (!messagesContainer) {\r\n      const preExistingContainer = this._document.getElementById(MESSAGES_CONTAINER_ID);\r\n\r\n      // When going from the server to the client, we may end up in a situation where there's\r\n      // already a container on the page, but we don't have a reference to it. Clear the\r\n      // old container so we don't get duplicates. Doing this, instead of emptying the previous\r\n      // container, should be slightly faster.\r\n      if (preExistingContainer && preExistingContainer.parentNode) {\r\n        preExistingContainer.parentNode.removeChild(preExistingContainer);\r\n      }\r\n\r\n      messagesContainer = this._document.createElement('div');\r\n      messagesContainer.id = MESSAGES_CONTAINER_ID;\r\n      // We add `visibility: hidden` in order to prevent text in this container from\r\n      // being searchable by the browser's Ctrl + F functionality.\r\n      // Screen-readers will still read the description for elements with aria-describedby even\r\n      // when the description element is not visible.\r\n      messagesContainer.style.visibility = 'hidden';\r\n      // Even though we use `visibility: hidden`, we still apply `cdk-visually-hidden` so that\r\n      // the description element doesn't impact page layout.\r\n      messagesContainer.classList.add('cdk-visually-hidden');\r\n\r\n      this._document.body.appendChild(messagesContainer);\r\n    }\r\n  }\r\n\r\n  /** Deletes the global messages container. */\r\n  private _deleteMessagesContainer() {\r\n    if (messagesContainer && messagesContainer.parentNode) {\r\n      messagesContainer.parentNode.removeChild(messagesContainer);\r\n      messagesContainer = null;\r\n    }\r\n  }\r\n\r\n  /** Removes all cdk-describedby messages that are hosted through the element. */\r\n  private _removeCdkDescribedByReferenceIds(element: Element) {\r\n    // Remove all aria-describedby reference IDs that are prefixed by CDK_DESCRIBEDBY_ID_PREFIX\r\n    const originalReferenceIds = getAriaReferenceIds(element, 'aria-describedby')\r\n        .filter(id => id.indexOf(CDK_DESCRIBEDBY_ID_PREFIX) != 0);\r\n    element.setAttribute('aria-describedby', originalReferenceIds.join(' '));\r\n  }\r\n\r\n  /**\r\n   * Adds a message reference to the element using aria-describedby and increments the registered\r\n   * message's reference count.\r\n   */\r\n  private _addMessageReference(element: Element, key: string|Element) {\r\n    const registeredMessage = messageRegistry.get(key)!;\r\n\r\n    // Add the aria-describedby reference and set the\r\n    // describedby_host attribute to mark the element.\r\n    addAriaReferencedId(element, 'aria-describedby', registeredMessage.messageElement.id);\r\n    element.setAttribute(CDK_DESCRIBEDBY_HOST_ATTRIBUTE, '');\r\n    registeredMessage.referenceCount++;\r\n  }\r\n\r\n  /**\r\n   * Removes a message reference from the element using aria-describedby\r\n   * and decrements the registered message's reference count.\r\n   */\r\n  private _removeMessageReference(element: Element, key: string|Element) {\r\n    const registeredMessage = messageRegistry.get(key)!;\r\n    registeredMessage.referenceCount--;\r\n\r\n    removeAriaReferencedId(element, 'aria-describedby', registeredMessage.messageElement.id);\r\n    element.removeAttribute(CDK_DESCRIBEDBY_HOST_ATTRIBUTE);\r\n  }\r\n\r\n  /** Returns true if the element has been described by the provided message ID. */\r\n  private _isElementDescribedByMessage(element: Element, key: string|Element): boolean {\r\n    const referenceIds = getAriaReferenceIds(element, 'aria-describedby');\r\n    const registeredMessage = messageRegistry.get(key);\r\n    const messageId = registeredMessage && registeredMessage.messageElement.id;\r\n\r\n    return !!messageId && referenceIds.indexOf(messageId) != -1;\r\n  }\r\n\r\n  /** Determines whether a message can be described on a particular element. */\r\n  private _canBeDescribed(element: Element, message: string|HTMLElement|void): boolean {\r\n    if (!this._isElementNode(element)) {\r\n      return false;\r\n    }\r\n\r\n    if (message && typeof message === 'object') {\r\n      // We'd have to make some assumptions about the description element's text, if the consumer\r\n      // passed in an element. Assume that if an element is passed in, the consumer has verified\r\n      // that it can be used as a description.\r\n      return true;\r\n    }\r\n\r\n    const trimmedMessage = message == null ? '' : `${message}`.trim();\r\n    const ariaLabel = element.getAttribute('aria-label');\r\n\r\n    // We shouldn't set descriptions if they're exactly the same as the `aria-label` of the\r\n    // element, because screen readers will end up reading out the same text twice in a row.\r\n    return trimmedMessage ? (!ariaLabel || ariaLabel.trim() !== trimmedMessage) : false;\r\n  }\r\n\r\n  /** Checks whether a node is an Element node. */\r\n  private _isElementNode(element: Node): element is Element {\r\n    return element.nodeType === this._document.ELEMENT_NODE;\r\n  }\r\n}\r\n\r\n/** Gets a key that can be used to look messages up in the registry. */\r\nfunction getKey(message: string|Element, role?: string): string|Element {\r\n  return typeof message === 'string' ? `${role || ''}/${message}` : message;\r\n}\r\n\r\n/** Assigns a unique ID to an element, if it doesn't have one already. */\r\nfunction setMessageId(element: HTMLElement) {\r\n  if (!element.id) {\r\n    element.id = `${CDK_DESCRIBEDBY_ID_PREFIX}-${nextId++}`;\r\n  }\r\n}\r\n","/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n\r\nimport {QueryList} from '@angular/core';\r\nimport {Subject, Subscription} from 'rxjs';\r\nimport {\r\n  UP_ARROW,\r\n  DOWN_ARROW,\r\n  LEFT_ARROW,\r\n  RIGHT_ARROW,\r\n  TAB,\r\n  A,\r\n  Z,\r\n  ZERO,\r\n  NINE,\r\n  hasModifierKey,\r\n  HOME,\r\n  END,\r\n} from '@angular/cdk/keycodes';\r\nimport {debounceTime, filter, map, tap} from 'rxjs/operators';\r\n\r\n/** This interface is for items that can be passed to a ListKeyManager. */\r\nexport interface ListKeyManagerOption {\r\n  /** Whether the option is disabled. */\r\n  disabled?: boolean;\r\n\r\n  /** Gets the label for this option. */\r\n  getLabel?(): string;\r\n}\r\n\r\n/** Modifier keys handled by the ListKeyManager. */\r\nexport type ListKeyManagerModifierKey = 'altKey' | 'ctrlKey' | 'metaKey' | 'shiftKey';\r\n\r\n/**\r\n * This class manages keyboard events for selectable lists. If you pass it a query list\r\n * of items, it will set the active item correctly when arrow events occur.\r\n */\r\nexport class ListKeyManager<T extends ListKeyManagerOption> {\r\n  private _activeItemIndex = -1;\r\n  private _activeItem: T | null = null;\r\n  private _wrap = false;\r\n  private _letterKeyStream = new Subject<string>();\r\n  private _typeaheadSubscription = Subscription.EMPTY;\r\n  private _vertical = true;\r\n  private _horizontal: 'ltr' | 'rtl' | null;\r\n  private _allowedModifierKeys: ListKeyManagerModifierKey[] = [];\r\n  private _homeAndEnd = false;\r\n\r\n  /**\r\n   * Predicate function that can be used to check whether an item should be skipped\r\n   * by the key manager. By default, disabled items are skipped.\r\n   */\r\n  private _skipPredicateFn = (item: T) => item.disabled;\r\n\r\n  // Buffer for the letters that the user has pressed when the typeahead option is turned on.\r\n  private _pressedLetters: string[] = [];\r\n\r\n  constructor(private _items: QueryList<T> | T[]) {\r\n    // We allow for the items to be an array because, in some cases, the consumer may\r\n    // not have access to a QueryList of the items they want to manage (e.g. when the\r\n    // items aren't being collected via `ViewChildren` or `ContentChildren`).\r\n    if (_items instanceof QueryList) {\r\n      _items.changes.subscribe((newItems: QueryList<T>) => {\r\n        if (this._activeItem) {\r\n          const itemArray = newItems.toArray();\r\n          const newIndex = itemArray.indexOf(this._activeItem);\r\n\r\n          if (newIndex > -1 && newIndex !== this._activeItemIndex) {\r\n            this._activeItemIndex = newIndex;\r\n          }\r\n        }\r\n      });\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Stream that emits any time the TAB key is pressed, so components can react\r\n   * when focus is shifted off of the list.\r\n   */\r\n  tabOut: Subject<void> = new Subject<void>();\r\n\r\n  /** Stream that emits whenever the active item of the list manager changes. */\r\n  change = new Subject<number>();\r\n\r\n  /**\r\n   * Sets the predicate function that determines which items should be skipped by the\r\n   * list key manager.\r\n   * @param predicate Function that determines whether the given item should be skipped.\r\n   */\r\n  skipPredicate(predicate: (item: T) => boolean): this {\r\n    this._skipPredicateFn = predicate;\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * Configures wrapping mode, which determines whether the active item will wrap to\r\n   * the other end of list when there are no more items in the given direction.\r\n   * @param shouldWrap Whether the list should wrap when reaching the end.\r\n   */\r\n  withWrap(shouldWrap = true): this {\r\n    this._wrap = shouldWrap;\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * Configures whether the key manager should be able to move the selection vertically.\r\n   * @param enabled Whether vertical selection should be enabled.\r\n   */\r\n  withVerticalOrientation(enabled: boolean = true): this {\r\n    this._vertical = enabled;\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * Configures the key manager to move the selection horizontally.\r\n   * Passing in `null` will disable horizontal movement.\r\n   * @param direction Direction in which the selection can be moved.\r\n   */\r\n  withHorizontalOrientation(direction: 'ltr' | 'rtl' | null): this {\r\n    this._horizontal = direction;\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * Modifier keys which are allowed to be held down and whose default actions will be prevented\r\n   * as the user is pressing the arrow keys. Defaults to not allowing any modifier keys.\r\n   */\r\n  withAllowedModifierKeys(keys: ListKeyManagerModifierKey[]): this {\r\n    this._allowedModifierKeys = keys;\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * Turns on typeahead mode which allows users to set the active item by typing.\r\n   * @param debounceInterval Time to wait after the last keystroke before setting the active item.\r\n   */\r\n  withTypeAhead(debounceInterval: number = 200): this {\r\n    if ((typeof ngDevMode === 'undefined' || ngDevMode) && (this._items.length &&\r\n        this._items.some(item => typeof item.getLabel !== 'function'))) {\r\n      throw Error('ListKeyManager items in typeahead mode must implement the `getLabel` method.');\r\n    }\r\n\r\n    this._typeaheadSubscription.unsubscribe();\r\n\r\n    // Debounce the presses of non-navigational keys, collect the ones that correspond to letters\r\n    // and convert those letters back into a string. Afterwards find the first item that starts\r\n    // with that string and select it.\r\n    this._typeaheadSubscription = this._letterKeyStream.pipe(\r\n      tap(letter => this._pressedLetters.push(letter)),\r\n      debounceTime(debounceInterval),\r\n      filter(() => this._pressedLetters.length > 0),\r\n      map(() => this._pressedLetters.join(''))\r\n    ).subscribe(inputString => {\r\n      const items = this._getItemsArray();\r\n\r\n      // Start at 1 because we want to start searching at the item immediately\r\n      // following the current active item.\r\n      for (let i = 1; i < items.length + 1; i++) {\r\n        const index = (this._activeItemIndex + i) % items.length;\r\n        const item = items[index];\r\n\r\n        if (!this._skipPredicateFn(item) &&\r\n            item.getLabel!().toUpperCase().trim().indexOf(inputString) === 0) {\r\n\r\n          this.setActiveItem(index);\r\n          break;\r\n        }\r\n      }\r\n\r\n      this._pressedLetters = [];\r\n    });\r\n\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * Configures the key manager to activate the first and last items\r\n   * respectively when the Home or End key is pressed.\r\n   * @param enabled Whether pressing the Home or End key activates the first/last item.\r\n   */\r\n  withHomeAndEnd(enabled: boolean = true): this {\r\n    this._homeAndEnd = enabled;\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * Sets the active item to the item at the index specified.\r\n   * @param index The index of the item to be set as active.\r\n   */\r\n  setActiveItem(index: number): void;\r\n\r\n  /**\r\n   * Sets the active item to the specified item.\r\n   * @param item The item to be set as active.\r\n   */\r\n  setActiveItem(item: T): void;\r\n\r\n  setActiveItem(item: any): void {\r\n    const previousActiveItem = this._activeItem;\r\n\r\n    this.updateActiveItem(item);\r\n\r\n    if (this._activeItem !== previousActiveItem) {\r\n      this.change.next(this._activeItemIndex);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Sets the active item depending on the key event passed in.\r\n   * @param event Keyboard event to be used for determining which element should be active.\r\n   */\r\n  onKeydown(event: KeyboardEvent): void {\r\n    const keyCode = event.keyCode;\r\n    const modifiers: ListKeyManagerModifierKey[] = ['altKey', 'ctrlKey', 'metaKey', 'shiftKey'];\r\n    const isModifierAllowed = modifiers.every(modifier => {\r\n      return !event[modifier] || this._allowedModifierKeys.indexOf(modifier) > -1;\r\n    });\r\n\r\n    switch (keyCode) {\r\n      case TAB:\r\n        this.tabOut.next();\r\n        return;\r\n\r\n      case DOWN_ARROW:\r\n        if (this._vertical && isModifierAllowed) {\r\n          this.setNextItemActive();\r\n          break;\r\n        } else {\r\n          return;\r\n        }\r\n\r\n      case UP_ARROW:\r\n        if (this._vertical && isModifierAllowed) {\r\n          this.setPreviousItemActive();\r\n          break;\r\n        } else {\r\n          return;\r\n        }\r\n\r\n      case RIGHT_ARROW:\r\n        if (this._horizontal && isModifierAllowed) {\r\n          this._horizontal === 'rtl' ? this.setPreviousItemActive() : this.setNextItemActive();\r\n          break;\r\n        } else {\r\n          return;\r\n        }\r\n\r\n      case LEFT_ARROW:\r\n        if (this._horizontal && isModifierAllowed) {\r\n          this._horizontal === 'rtl' ? this.setNextItemActive() : this.setPreviousItemActive();\r\n          break;\r\n        } else {\r\n          return;\r\n        }\r\n\r\n      case HOME:\r\n        if (this._homeAndEnd && isModifierAllowed) {\r\n          this.setFirstItemActive();\r\n          break;\r\n        } else {\r\n          return;\r\n        }\r\n\r\n      case END:\r\n        if (this._homeAndEnd && isModifierAllowed) {\r\n          this.setLastItemActive();\r\n          break;\r\n        } else {\r\n          return;\r\n        }\r\n\r\n      default:\r\n      if (isModifierAllowed || hasModifierKey(event, 'shiftKey')) {\r\n          // Attempt to use the `event.key` which also maps it to the user's keyboard language,\r\n          // otherwise fall back to resolving alphanumeric characters via the keyCode.\r\n          if (event.key && event.key.length === 1) {\r\n            this._letterKeyStream.next(event.key.toLocaleUpperCase());\r\n          } else if ((keyCode >= A && keyCode <= Z) || (keyCode >= ZERO && keyCode <= NINE)) {\r\n            this._letterKeyStream.next(String.fromCharCode(keyCode));\r\n          }\r\n        }\r\n\r\n        // Note that we return here, in order to avoid preventing\r\n        // the default action of non-navigational keys.\r\n        return;\r\n    }\r\n\r\n    this._pressedLetters = [];\r\n    event.preventDefault();\r\n  }\r\n\r\n  /** Index of the currently active item. */\r\n  get activeItemIndex(): number | null {\r\n    return this._activeItemIndex;\r\n  }\r\n\r\n  /** The active item. */\r\n  get activeItem(): T | null {\r\n    return this._activeItem;\r\n  }\r\n\r\n  /** Gets whether the user is currently typing into the manager using the typeahead feature. */\r\n  isTyping(): boolean {\r\n    return this._pressedLetters.length > 0;\r\n  }\r\n\r\n  /** Sets the active item to the first enabled item in the list. */\r\n  setFirstItemActive(): void {\r\n    this._setActiveItemByIndex(0, 1);\r\n  }\r\n\r\n  /** Sets the active item to the last enabled item in the list. */\r\n  setLastItemActive(): void {\r\n    this._setActiveItemByIndex(this._items.length - 1, -1);\r\n  }\r\n\r\n  /** Sets the active item to the next enabled item in the list. */\r\n  setNextItemActive(): void {\r\n    this._activeItemIndex < 0 ? this.setFirstItemActive() : this._setActiveItemByDelta(1);\r\n  }\r\n\r\n  /** Sets the active item to a previous enabled item in the list. */\r\n  setPreviousItemActive(): void {\r\n    this._activeItemIndex < 0 && this._wrap ? this.setLastItemActive()\r\n                                            : this._setActiveItemByDelta(-1);\r\n  }\r\n\r\n  /**\r\n   * Allows setting the active without any other effects.\r\n   * @param index Index of the item to be set as active.\r\n   */\r\n  updateActiveItem(index: number): void;\r\n\r\n  /**\r\n   * Allows setting the active item without any other effects.\r\n   * @param item Item to be set as active.\r\n   */\r\n  updateActiveItem(item: T): void;\r\n\r\n  updateActiveItem(item: any): void {\r\n    const itemArray = this._getItemsArray();\r\n    const index = typeof item === 'number' ? item : itemArray.indexOf(item);\r\n    const activeItem = itemArray[index];\r\n\r\n    // Explicitly check for `null` and `undefined` because other falsy values are valid.\r\n    this._activeItem = activeItem == null ? null : activeItem;\r\n    this._activeItemIndex = index;\r\n  }\r\n\r\n  /**\r\n   * This method sets the active item, given a list of items and the delta between the\r\n   * currently active item and the new active item. It will calculate differently\r\n   * depending on whether wrap mode is turned on.\r\n   */\r\n  private _setActiveItemByDelta(delta: -1 | 1): void {\r\n    this._wrap ? this._setActiveInWrapMode(delta) : this._setActiveInDefaultMode(delta);\r\n  }\r\n\r\n  /**\r\n   * Sets the active item properly given \"wrap\" mode. In other words, it will continue to move\r\n   * down the list until it finds an item that is not disabled, and it will wrap if it\r\n   * encounters either end of the list.\r\n   */\r\n  private _setActiveInWrapMode(delta: -1 | 1): void {\r\n    const items = this._getItemsArray();\r\n\r\n    for (let i = 1; i <= items.length; i++) {\r\n      const index = (this._activeItemIndex + (delta * i) + items.length) % items.length;\r\n      const item = items[index];\r\n\r\n      if (!this._skipPredicateFn(item)) {\r\n        this.setActiveItem(index);\r\n        return;\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Sets the active item properly given the default mode. In other words, it will\r\n   * continue to move down the list until it finds an item that is not disabled. If\r\n   * it encounters either end of the list, it will stop and not wrap.\r\n   */\r\n  private _setActiveInDefaultMode(delta: -1 | 1): void {\r\n    this._setActiveItemByIndex(this._activeItemIndex + delta, delta);\r\n  }\r\n\r\n  /**\r\n   * Sets the active item to the first enabled item starting at the index specified. If the\r\n   * item is disabled, it will move in the fallbackDelta direction until it either\r\n   * finds an enabled item or encounters the end of the list.\r\n   */\r\n  private _setActiveItemByIndex(index: number, fallbackDelta: -1 | 1): void {\r\n    const items = this._getItemsArray();\r\n\r\n    if (!items[index]) {\r\n      return;\r\n    }\r\n\r\n    while (this._skipPredicateFn(items[index])) {\r\n      index += fallbackDelta;\r\n\r\n      if (!items[index]) {\r\n        return;\r\n      }\r\n    }\r\n\r\n    this.setActiveItem(index);\r\n  }\r\n\r\n  /** Returns the items as an array. */\r\n  private _getItemsArray(): T[] {\r\n    return this._items instanceof QueryList ? this._items.toArray() : this._items;\r\n  }\r\n}\r\n","/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n\r\nimport {ListKeyManager, ListKeyManagerOption} from './list-key-manager';\r\n\r\n/**\r\n * This is the interface for highlightable items (used by the ActiveDescendantKeyManager).\r\n * Each item must know how to style itself as active or inactive and whether or not it is\r\n * currently disabled.\r\n */\r\nexport interface Highlightable extends ListKeyManagerOption {\r\n  /** Applies the styles for an active item to this item. */\r\n  setActiveStyles(): void;\r\n\r\n  /** Applies the styles for an inactive item to this item. */\r\n  setInactiveStyles(): void;\r\n}\r\n\r\nexport class ActiveDescendantKeyManager<T> extends ListKeyManager<Highlightable & T> {\r\n\r\n  /**\r\n   * Sets the active item to the item at the specified index and adds the\r\n   * active styles to the newly active item. Also removes active styles\r\n   * from the previously active item.\r\n   * @param index Index of the item to be set as active.\r\n   */\r\n  setActiveItem(index: number): void;\r\n\r\n  /**\r\n   * Sets the active item to the item to the specified one and adds the\r\n   * active styles to the it. Also removes active styles from the\r\n   * previously active item.\r\n   * @param item Item to be set as active.\r\n   */\r\n  setActiveItem(item: T): void;\r\n\r\n  setActiveItem(index: any): void {\r\n    if (this.activeItem) {\r\n      this.activeItem.setInactiveStyles();\r\n    }\r\n    super.setActiveItem(index);\r\n    if (this.activeItem) {\r\n      this.activeItem.setActiveStyles();\r\n    }\r\n  }\r\n\r\n}\r\n","/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n\r\nimport {ListKeyManager, ListKeyManagerOption} from './list-key-manager';\r\nimport {FocusOrigin} from '../focus-monitor/focus-monitor';\r\n\r\n/**\r\n * This is the interface for focusable items (used by the FocusKeyManager).\r\n * Each item must know how to focus itself, whether or not it is currently disabled\r\n * and be able to supply its label.\r\n */\r\nexport interface FocusableOption extends ListKeyManagerOption {\r\n  /** Focuses the `FocusableOption`. */\r\n  focus(origin?: FocusOrigin): void;\r\n}\r\n\r\nexport class FocusKeyManager<T> extends ListKeyManager<FocusableOption & T> {\r\n  private _origin: FocusOrigin = 'program';\r\n\r\n  /**\r\n   * Sets the focus origin that will be passed in to the items for any subsequent `focus` calls.\r\n   * @param origin Focus origin to be used when focusing items.\r\n   */\r\n  setFocusOrigin(origin: FocusOrigin): this {\r\n    this._origin = origin;\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * Sets the active item to the item at the specified\r\n   * index and focuses the newly active item.\r\n   * @param index Index of the item to be set as active.\r\n   */\r\n  setActiveItem(index: number): void;\r\n\r\n  /**\r\n   * Sets the active item to the item that is specified and focuses it.\r\n   * @param item Item to be set as active.\r\n   */\r\n  setActiveItem(item: T): void;\r\n\r\n  setActiveItem(item: any): void {\r\n    super.setActiveItem(item);\r\n\r\n    if (this.activeItem) {\r\n      this.activeItem.focus(this._origin);\r\n    }\r\n  }\r\n}\r\n","/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n\r\nimport {Platform} from '@angular/cdk/platform';\r\nimport {Injectable} from '@angular/core';\r\n\r\n/**\r\n * Configuration for the isFocusable method.\r\n */\r\nexport class IsFocusableConfig {\r\n  /**\r\n   * Whether to count an element as focusable even if it is not currently visible.\r\n   */\r\n  ignoreVisibility: boolean = false;\r\n}\r\n\r\n// The InteractivityChecker leans heavily on the ally.js accessibility utilities.\r\n// Methods like `isTabbable` are only covering specific edge-cases for the browsers which are\r\n// supported.\r\n\r\n/**\r\n * Utility for checking the interactivity of an element, such as whether is is focusable or\r\n * tabbable.\r\n */\r\n@Injectable({providedIn: 'root'})\r\nexport class InteractivityChecker {\r\n\r\n  constructor(private _platform: Platform) {}\r\n\r\n  /**\r\n   * Gets whether an element is disabled.\r\n   *\r\n   * @param element Element to be checked.\r\n   * @returns Whether the element is disabled.\r\n   */\r\n  isDisabled(element: HTMLElement): boolean {\r\n    // This does not capture some cases, such as a non-form control with a disabled attribute or\r\n    // a form control inside of a disabled form, but should capture the most common cases.\r\n    return element.hasAttribute('disabled');\r\n  }\r\n\r\n  /**\r\n   * Gets whether an element is visible for the purposes of interactivity.\r\n   *\r\n   * This will capture states like `display: none` and `visibility: hidden`, but not things like\r\n   * being clipped by an `overflow: hidden` parent or being outside the viewport.\r\n   *\r\n   * @returns Whether the element is visible.\r\n   */\r\n  isVisible(element: HTMLElement): boolean {\r\n    return hasGeometry(element) && getComputedStyle(element).visibility === 'visible';\r\n  }\r\n\r\n  /**\r\n   * Gets whether an element can be reached via Tab key.\r\n   * Assumes that the element has already been checked with isFocusable.\r\n   *\r\n   * @param element Element to be checked.\r\n   * @returns Whether the element is tabbable.\r\n   */\r\n  isTabbable(element: HTMLElement): boolean {\r\n    // Nothing is tabbable on the server 😎\r\n    if (!this._platform.isBrowser) {\r\n      return false;\r\n    }\r\n\r\n    const frameElement = getFrameElement(getWindow(element));\r\n\r\n    if (frameElement) {\r\n      // Frame elements inherit their tabindex onto all child elements.\r\n      if (getTabIndexValue(frameElement) === -1) {\r\n        return false;\r\n      }\r\n\r\n      // Browsers disable tabbing to an element inside of an invisible frame.\r\n      if (!this.isVisible(frameElement)) {\r\n        return false;\r\n      }\r\n    }\r\n\r\n    let nodeName = element.nodeName.toLowerCase();\r\n    let tabIndexValue = getTabIndexValue(element);\r\n\r\n    if (element.hasAttribute('contenteditable')) {\r\n      return tabIndexValue !== -1;\r\n    }\r\n\r\n    if (nodeName === 'iframe' || nodeName === 'object') {\r\n      // The frame or object's content may be tabbable depending on the content, but it's\r\n      // not possibly to reliably detect the content of the frames. We always consider such\r\n      // elements as non-tabbable.\r\n      return false;\r\n    }\r\n\r\n    // In iOS, the browser only considers some specific elements as tabbable.\r\n    if (this._platform.WEBKIT && this._platform.IOS && !isPotentiallyTabbableIOS(element)) {\r\n      return false;\r\n    }\r\n\r\n    if (nodeName === 'audio') {\r\n      // Audio elements without controls enabled are never tabbable, regardless\r\n      // of the tabindex attribute explicitly being set.\r\n      if (!element.hasAttribute('controls')) {\r\n        return false;\r\n      }\r\n      // Audio elements with controls are by default tabbable unless the\r\n      // tabindex attribute is set to `-1` explicitly.\r\n      return tabIndexValue !== -1;\r\n    }\r\n\r\n    if (nodeName === 'video') {\r\n      // For all video elements, if the tabindex attribute is set to `-1`, the video\r\n      // is not tabbable. Note: We cannot rely on the default `HTMLElement.tabIndex`\r\n      // property as that one is set to `-1` in Chrome, Edge and Safari v13.1. The\r\n      // tabindex attribute is the source of truth here.\r\n      if (tabIndexValue === -1) {\r\n        return false;\r\n      }\r\n      // If the tabindex is explicitly set, and not `-1` (as per check before), the\r\n      // video element is always tabbable (regardless of whether it has controls or not).\r\n      if (tabIndexValue !== null) {\r\n        return true;\r\n      }\r\n      // Otherwise (when no explicit tabindex is set), a video is only tabbable if it\r\n      // has controls enabled. Firefox is special as videos are always tabbable regardless\r\n      // of whether there are controls or not.\r\n      return this._platform.FIREFOX || element.hasAttribute('controls');\r\n    }\r\n\r\n    return element.tabIndex >= 0;\r\n  }\r\n\r\n  /**\r\n   * Gets whether an element can be focused by the user.\r\n   *\r\n   * @param element Element to be checked.\r\n   * @param config The config object with options to customize this method's behavior\r\n   * @returns Whether the element is focusable.\r\n   */\r\n  isFocusable(element: HTMLElement, config?: IsFocusableConfig): boolean {\r\n    // Perform checks in order of left to most expensive.\r\n    // Again, naive approach that does not capture many edge cases and browser quirks.\r\n    return isPotentiallyFocusable(element) && !this.isDisabled(element) &&\r\n      (config?.ignoreVisibility || this.isVisible(element));\r\n  }\r\n\r\n}\r\n\r\n/**\r\n * Returns the frame element from a window object. Since browsers like MS Edge throw errors if\r\n * the frameElement property is being accessed from a different host address, this property\r\n * should be accessed carefully.\r\n */\r\nfunction getFrameElement(window: Window) {\r\n  try {\r\n    return window.frameElement as HTMLElement;\r\n  } catch {\r\n    return null;\r\n  }\r\n}\r\n\r\n/** Checks whether the specified element has any geometry / rectangles. */\r\nfunction hasGeometry(element: HTMLElement): boolean {\r\n  // Use logic from jQuery to check for an invisible element.\r\n  // See https://github.com/jquery/jquery/blob/master/src/css/hiddenVisibleSelectors.js#L12\r\n  return !!(element.offsetWidth || element.offsetHeight ||\r\n      (typeof element.getClientRects === 'function' && element.getClientRects().length));\r\n}\r\n\r\n/** Gets whether an element's  */\r\nfunction isNativeFormElement(element: Node) {\r\n  let nodeName = element.nodeName.toLowerCase();\r\n  return nodeName === 'input' ||\r\n      nodeName === 'select' ||\r\n      nodeName === 'button' ||\r\n      nodeName === 'textarea';\r\n}\r\n\r\n/** Gets whether an element is an `<input type=\"hidden\">`. */\r\nfunction isHiddenInput(element: HTMLElement): boolean {\r\n  return isInputElement(element) && element.type == 'hidden';\r\n}\r\n\r\n/** Gets whether an element is an anchor that has an href attribute. */\r\nfunction isAnchorWithHref(element: HTMLElement): boolean {\r\n  return isAnchorElement(element) && element.hasAttribute('href');\r\n}\r\n\r\n/** Gets whether an element is an input element. */\r\nfunction isInputElement(element: HTMLElement): element is HTMLInputElement {\r\n  return element.nodeName.toLowerCase() == 'input';\r\n}\r\n\r\n/** Gets whether an element is an anchor element. */\r\nfunction isAnchorElement(element: HTMLElement): element is HTMLAnchorElement {\r\n  return element.nodeName.toLowerCase() == 'a';\r\n}\r\n\r\n/** Gets whether an element has a valid tabindex. */\r\nfunction hasValidTabIndex(element: HTMLElement): boolean {\r\n  if (!element.hasAttribute('tabindex') || element.tabIndex === undefined) {\r\n    return false;\r\n  }\r\n\r\n  let tabIndex = element.getAttribute('tabindex');\r\n\r\n  // IE11 parses tabindex=\"\" as the value \"-32768\"\r\n  if (tabIndex == '-32768') {\r\n    return false;\r\n  }\r\n\r\n  return !!(tabIndex && !isNaN(parseInt(tabIndex, 10)));\r\n}\r\n\r\n/**\r\n * Returns the parsed tabindex from the element attributes instead of returning the\r\n * evaluated tabindex from the browsers defaults.\r\n */\r\nfunction getTabIndexValue(element: HTMLElement): number | null {\r\n  if (!hasValidTabIndex(element)) {\r\n    return null;\r\n  }\r\n\r\n  // See browser issue in Gecko https://bugzilla.mozilla.org/show_bug.cgi?id=1128054\r\n  const tabIndex = parseInt(element.getAttribute('tabindex') || '', 10);\r\n\r\n  return isNaN(tabIndex) ? -1 : tabIndex;\r\n}\r\n\r\n/** Checks whether the specified element is potentially tabbable on iOS */\r\nfunction isPotentiallyTabbableIOS(element: HTMLElement): boolean {\r\n  let nodeName = element.nodeName.toLowerCase();\r\n  let inputType = nodeName === 'input' && (element as HTMLInputElement).type;\r\n\r\n  return inputType === 'text'\r\n      || inputType === 'password'\r\n      || nodeName === 'select'\r\n      || nodeName === 'textarea';\r\n}\r\n\r\n/**\r\n * Gets whether an element is potentially focusable without taking current visible/disabled state\r\n * into account.\r\n */\r\nfunction isPotentiallyFocusable(element: HTMLElement): boolean {\r\n  // Inputs are potentially focusable *unless* they're type=\"hidden\".\r\n  if (isHiddenInput(element)) {\r\n    return false;\r\n  }\r\n\r\n  return isNativeFormElement(element) ||\r\n      isAnchorWithHref(element) ||\r\n      element.hasAttribute('contenteditable') ||\r\n      hasValidTabIndex(element);\r\n}\r\n\r\n/** Gets the parent window of a DOM node with regards of being inside of an iframe. */\r\nfunction getWindow(node: HTMLElement): Window {\r\n  // ownerDocument is null if `node` itself *is* a document.\r\n  return node.ownerDocument && node.ownerDocument.defaultView || window;\r\n}\r\n","/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n\r\nimport {BooleanInput, coerceBooleanProperty} from '@angular/cdk/coercion';\r\nimport {DOCUMENT} from '@angular/common';\r\nimport {\r\n  AfterContentInit,\r\n  Directive,\r\n  ElementRef,\r\n  Inject,\r\n  Injectable,\r\n  Input,\r\n  NgZone,\r\n  OnDestroy,\r\n  DoCheck,\r\n  SimpleChanges,\r\n  OnChanges,\r\n} from '@angular/core';\r\nimport {take} from 'rxjs/operators';\r\nimport {InteractivityChecker} from '../interactivity-checker/interactivity-checker';\r\n\r\n\r\n/**\r\n * Class that allows for trapping focus within a DOM element.\r\n *\r\n * This class currently uses a relatively simple approach to focus trapping.\r\n * It assumes that the tab order is the same as DOM order, which is not necessarily true.\r\n * Things like `tabIndex > 0`, flex `order`, and shadow roots can cause the two to be misaligned.\r\n *\r\n * @deprecated Use `ConfigurableFocusTrap` instead.\r\n * @breaking-change 11.0.0\r\n */\r\nexport class FocusTrap {\r\n  private _startAnchor: HTMLElement | null;\r\n  private _endAnchor: HTMLElement | null;\r\n  private _hasAttached = false;\r\n\r\n  // Event listeners for the anchors. Need to be regular functions so that we can unbind them later.\r\n  protected startAnchorListener = () => this.focusLastTabbableElement();\r\n  protected endAnchorListener = () => this.focusFirstTabbableElement();\r\n\r\n  /** Whether the focus trap is active. */\r\n  get enabled(): boolean { return this._enabled; }\r\n  set enabled(value: boolean) {\r\n    this._enabled = value;\r\n\r\n    if (this._startAnchor && this._endAnchor) {\r\n      this._toggleAnchorTabIndex(value, this._startAnchor);\r\n      this._toggleAnchorTabIndex(value, this._endAnchor);\r\n    }\r\n  }\r\n  protected _enabled: boolean = true;\r\n\r\n  constructor(\r\n    readonly _element: HTMLElement,\r\n    private _checker: InteractivityChecker,\r\n    readonly _ngZone: NgZone,\r\n    readonly _document: Document,\r\n    deferAnchors = false) {\r\n\r\n    if (!deferAnchors) {\r\n      this.attachAnchors();\r\n    }\r\n  }\r\n\r\n  /** Destroys the focus trap by cleaning up the anchors. */\r\n  destroy() {\r\n    const startAnchor = this._startAnchor;\r\n    const endAnchor = this._endAnchor;\r\n\r\n    if (startAnchor) {\r\n      startAnchor.removeEventListener('focus', this.startAnchorListener);\r\n\r\n      if (startAnchor.parentNode) {\r\n        startAnchor.parentNode.removeChild(startAnchor);\r\n      }\r\n    }\r\n\r\n    if (endAnchor) {\r\n      endAnchor.removeEventListener('focus', this.endAnchorListener);\r\n\r\n      if (endAnchor.parentNode) {\r\n        endAnchor.parentNode.removeChild(endAnchor);\r\n      }\r\n    }\r\n\r\n    this._startAnchor = this._endAnchor = null;\r\n    this._hasAttached = false;\r\n  }\r\n\r\n  /**\r\n   * Inserts the anchors into the DOM. This is usually done automatically\r\n   * in the constructor, but can be deferred for cases like directives with `*ngIf`.\r\n   * @returns Whether the focus trap managed to attach successfully. This may not be the case\r\n   * if the target element isn't currently in the DOM.\r\n   */\r\n  attachAnchors(): boolean {\r\n    // If we're not on the browser, there can be no focus to trap.\r\n    if (this._hasAttached) {\r\n      return true;\r\n    }\r\n\r\n    this._ngZone.runOutsideAngular(() => {\r\n      if (!this._startAnchor) {\r\n        this._startAnchor = this._createAnchor();\r\n        this._startAnchor!.addEventListener('focus', this.startAnchorListener);\r\n      }\r\n\r\n      if (!this._endAnchor) {\r\n        this._endAnchor = this._createAnchor();\r\n        this._endAnchor!.addEventListener('focus', this.endAnchorListener);\r\n      }\r\n    });\r\n\r\n    if (this._element.parentNode) {\r\n      this._element.parentNode.insertBefore(this._startAnchor!, this._element);\r\n      this._element.parentNode.insertBefore(this._endAnchor!, this._element.nextSibling);\r\n      this._hasAttached = true;\r\n    }\r\n\r\n    return this._hasAttached;\r\n  }\r\n\r\n  /**\r\n   * Waits for the zone to stabilize, then either focuses the first element that the\r\n   * user specified, or the first tabbable element.\r\n   * @returns Returns a promise that resolves with a boolean, depending\r\n   * on whether focus was moved successfully.\r\n   */\r\n  focusInitialElementWhenReady(): Promise<boolean> {\r\n    return new Promise<boolean>(resolve => {\r\n      this._executeOnStable(() => resolve(this.focusInitialElement()));\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Waits for the zone to stabilize, then focuses\r\n   * the first tabbable element within the focus trap region.\r\n   * @returns Returns a promise that resolves with a boolean, depending\r\n   * on whether focus was moved successfully.\r\n   */\r\n  focusFirstTabbableElementWhenReady(): Promise<boolean> {\r\n    return new Promise<boolean>(resolve => {\r\n      this._executeOnStable(() => resolve(this.focusFirstTabbableElement()));\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Waits for the zone to stabilize, then focuses\r\n   * the last tabbable element within the focus trap region.\r\n   * @returns Returns a promise that resolves with a boolean, depending\r\n   * on whether focus was moved successfully.\r\n   */\r\n  focusLastTabbableElementWhenReady(): Promise<boolean> {\r\n    return new Promise<boolean>(resolve => {\r\n      this._executeOnStable(() => resolve(this.focusLastTabbableElement()));\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Get the specified boundary element of the trapped region.\r\n   * @param bound The boundary to get (start or end of trapped region).\r\n   * @returns The boundary element.\r\n   */\r\n  private _getRegionBoundary(bound: 'start' | 'end'): HTMLElement | null {\r\n    // Contains the deprecated version of selector, for temporary backwards comparability.\r\n    let markers = this._element.querySelectorAll(`[cdk-focus-region-${bound}], ` +\r\n                                                 `[cdkFocusRegion${bound}], ` +\r\n                                                 `[cdk-focus-${bound}]`) as NodeListOf<HTMLElement>;\r\n\r\n    for (let i = 0; i < markers.length; i++) {\r\n      // @breaking-change 8.0.0\r\n      if (markers[i].hasAttribute(`cdk-focus-${bound}`)) {\r\n        console.warn(`Found use of deprecated attribute 'cdk-focus-${bound}', ` +\r\n                     `use 'cdkFocusRegion${bound}' instead. The deprecated ` +\r\n                     `attribute will be removed in 8.0.0.`, markers[i]);\r\n      } else if (markers[i].hasAttribute(`cdk-focus-region-${bound}`)) {\r\n        console.warn(`Found use of deprecated attribute 'cdk-focus-region-${bound}', ` +\r\n                     `use 'cdkFocusRegion${bound}' instead. The deprecated attribute ` +\r\n                     `will be removed in 8.0.0.`, markers[i]);\r\n      }\r\n    }\r\n\r\n    if (bound == 'start') {\r\n      return markers.length ? markers[0] : this._getFirstTabbableElement(this._element);\r\n    }\r\n    return markers.length ?\r\n        markers[markers.length - 1] : this._getLastTabbableElement(this._element);\r\n  }\r\n\r\n  /**\r\n   * Focuses the element that should be focused when the focus trap is initialized.\r\n   * @returns Whether focus was moved successfully.\r\n   */\r\n  focusInitialElement(): boolean {\r\n    // Contains the deprecated version of selector, for temporary backwards comparability.\r\n    const redirectToElement = this._element.querySelector(`[cdk-focus-initial], ` +\r\n                                                          `[cdkFocusInitial]`) as HTMLElement;\r\n\r\n    if (redirectToElement) {\r\n      // @breaking-change 8.0.0\r\n      if (redirectToElement.hasAttribute(`cdk-focus-initial`)) {\r\n        console.warn(`Found use of deprecated attribute 'cdk-focus-initial', ` +\r\n                    `use 'cdkFocusInitial' instead. The deprecated attribute ` +\r\n                    `will be removed in 8.0.0`, redirectToElement);\r\n      }\r\n\r\n      // Warn the consumer if the element they've pointed to\r\n      // isn't focusable, when not in production mode.\r\n      if ((typeof ngDevMode === 'undefined' || ngDevMode) &&\r\n        !this._checker.isFocusable(redirectToElement)) {\r\n        console.warn(`Element matching '[cdkFocusInitial]' is not focusable.`, redirectToElement);\r\n      }\r\n\r\n      if (!this._checker.isFocusable(redirectToElement)) {\r\n        const focusableChild = this._getFirstTabbableElement(redirectToElement) as HTMLElement;\r\n        focusableChild?.focus();\r\n        return !!focusableChild;\r\n      }\r\n\r\n      redirectToElement.focus();\r\n      return true;\r\n    }\r\n\r\n    return this.focusFirstTabbableElement();\r\n  }\r\n\r\n  /**\r\n   * Focuses the first tabbable element within the focus trap region.\r\n   * @returns Whether focus was moved successfully.\r\n   */\r\n  focusFirstTabbableElement(): boolean {\r\n    const redirectToElement = this._getRegionBoundary('start');\r\n\r\n    if (redirectToElement) {\r\n      redirectToElement.focus();\r\n    }\r\n\r\n    return !!redirectToElement;\r\n  }\r\n\r\n  /**\r\n   * Focuses the last tabbable element within the focus trap region.\r\n   * @returns Whether focus was moved successfully.\r\n   */\r\n  focusLastTabbableElement(): boolean {\r\n    const redirectToElement = this._getRegionBoundary('end');\r\n\r\n    if (redirectToElement) {\r\n      redirectToElement.focus();\r\n    }\r\n\r\n    return !!redirectToElement;\r\n  }\r\n\r\n  /**\r\n   * Checks whether the focus trap has successfully been attached.\r\n   */\r\n  hasAttached(): boolean {\r\n    return this._hasAttached;\r\n  }\r\n\r\n  /** Get the first tabbable element from a DOM subtree (inclusive). */\r\n  private _getFirstTabbableElement(root: HTMLElement): HTMLElement | null {\r\n    if (this._checker.isFocusable(root) && this._checker.isTabbable(root)) {\r\n      return root;\r\n    }\r\n\r\n    // Iterate in DOM order. Note that IE doesn't have `children` for SVG so we fall\r\n    // back to `childNodes` which includes text nodes, comments etc.\r\n    let children = root.children || root.childNodes;\r\n\r\n    for (let i = 0; i < children.length; i++) {\r\n      let tabbableChild = children[i].nodeType === this._document.ELEMENT_NODE ?\r\n        this._getFirstTabbableElement(children[i] as HTMLElement) :\r\n        null;\r\n\r\n      if (tabbableChild) {\r\n        return tabbableChild;\r\n      }\r\n    }\r\n\r\n    return null;\r\n  }\r\n\r\n  /** Get the last tabbable element from a DOM subtree (inclusive). */\r\n  private _getLastTabbableElement(root: HTMLElement): HTMLElement | null {\r\n    if (this._checker.isFocusable(root) && this._checker.isTabbable(root)) {\r\n      return root;\r\n    }\r\n\r\n    // Iterate in reverse DOM order.\r\n    let children = root.children || root.childNodes;\r\n\r\n    for (let i = children.length - 1; i >= 0; i--) {\r\n      let tabbableChild = children[i].nodeType === this._document.ELEMENT_NODE ?\r\n        this._getLastTabbableElement(children[i] as HTMLElement) :\r\n        null;\r\n\r\n      if (tabbableChild) {\r\n        return tabbableChild;\r\n      }\r\n    }\r\n\r\n    return null;\r\n  }\r\n\r\n  /** Creates an anchor element. */\r\n  private _createAnchor(): HTMLElement {\r\n    const anchor = this._document.createElement('div');\r\n    this._toggleAnchorTabIndex(this._enabled, anchor);\r\n    anchor.classList.add('cdk-visually-hidden');\r\n    anchor.classList.add('cdk-focus-trap-anchor');\r\n    anchor.setAttribute('aria-hidden', 'true');\r\n    return anchor;\r\n  }\r\n\r\n  /**\r\n   * Toggles the `tabindex` of an anchor, based on the enabled state of the focus trap.\r\n   * @param isEnabled Whether the focus trap is enabled.\r\n   * @param anchor Anchor on which to toggle the tabindex.\r\n   */\r\n  private _toggleAnchorTabIndex(isEnabled: boolean, anchor: HTMLElement) {\r\n    // Remove the tabindex completely, rather than setting it to -1, because if the\r\n    // element has a tabindex, the user might still hit it when navigating with the arrow keys.\r\n    isEnabled ? anchor.setAttribute('tabindex', '0') : anchor.removeAttribute('tabindex');\r\n  }\r\n\r\n  /**\r\n   * Toggles the`tabindex` of both anchors to either trap Tab focus or allow it to escape.\r\n   * @param enabled: Whether the anchors should trap Tab.\r\n   */\r\n  protected toggleAnchors(enabled: boolean) {\r\n    if (this._startAnchor && this._endAnchor) {\r\n      this._toggleAnchorTabIndex(enabled, this._startAnchor);\r\n      this._toggleAnchorTabIndex(enabled, this._endAnchor);\r\n    }\r\n  }\r\n\r\n  /** Executes a function when the zone is stable. */\r\n  private _executeOnStable(fn: () => any): void {\r\n    if (this._ngZone.isStable) {\r\n      fn();\r\n    } else {\r\n      this._ngZone.onStable.pipe(take(1)).subscribe(fn);\r\n    }\r\n  }\r\n}\r\n\r\n/**\r\n * Factory that allows easy instantiation of focus traps.\r\n * @deprecated Use `ConfigurableFocusTrapFactory` instead.\r\n * @breaking-change 11.0.0\r\n */\r\n@Injectable({providedIn: 'root'})\r\nexport class FocusTrapFactory {\r\n  private _document: Document;\r\n\r\n  constructor(\r\n      private _checker: InteractivityChecker,\r\n      private _ngZone: NgZone,\r\n      @Inject(DOCUMENT) _document: any) {\r\n\r\n    this._document = _document;\r\n  }\r\n\r\n  /**\r\n   * Creates a focus-trapped region around the given element.\r\n   * @param element The element around which focus will be trapped.\r\n   * @param deferCaptureElements Defers the creation of focus-capturing elements to be done\r\n   *     manually by the user.\r\n   * @returns The created focus trap instance.\r\n   */\r\n  create(element: HTMLElement, deferCaptureElements: boolean = false): FocusTrap {\r\n    return new FocusTrap(\r\n        element, this._checker, this._ngZone, this._document, deferCaptureElements);\r\n  }\r\n}\r\n\r\n/** Directive for trapping focus within a region. */\r\n@Directive({\r\n  selector: '[cdkTrapFocus]',\r\n  exportAs: 'cdkTrapFocus',\r\n})\r\nexport class CdkTrapFocus implements OnDestroy, AfterContentInit, OnChanges, DoCheck {\r\n  private _document: Document;\r\n\r\n  /** Underlying FocusTrap instance. */\r\n  focusTrap: FocusTrap;\r\n\r\n  /** Previously focused element to restore focus to upon destroy when using autoCapture. */\r\n  private _previouslyFocusedElement: HTMLElement | null = null;\r\n\r\n  /** Whether the focus trap is active. */\r\n  @Input('cdkTrapFocus')\r\n  get enabled(): boolean { return this.focusTrap.enabled; }\r\n  set enabled(value: boolean) { this.focusTrap.enabled = coerceBooleanProperty(value); }\r\n\r\n  /**\r\n   * Whether the directive should automatically move focus into the trapped region upon\r\n   * initialization and return focus to the previous activeElement upon destruction.\r\n   */\r\n  @Input('cdkTrapFocusAutoCapture')\r\n  get autoCapture(): boolean { return this._autoCapture; }\r\n  set autoCapture(value: boolean) { this._autoCapture = coerceBooleanProperty(value); }\r\n  private _autoCapture: boolean;\r\n\r\n  constructor(\r\n      private _elementRef: ElementRef<HTMLElement>,\r\n      private _focusTrapFactory: FocusTrapFactory,\r\n      @Inject(DOCUMENT) _document: any) {\r\n\r\n    this._document = _document;\r\n    this.focusTrap = this._focusTrapFactory.create(this._elementRef.nativeElement, true);\r\n  }\r\n\r\n  ngOnDestroy() {\r\n    this.focusTrap.destroy();\r\n\r\n    // If we stored a previously focused element when using autoCapture, return focus to that\r\n    // element now that the trapped region is being destroyed.\r\n    if (this._previouslyFocusedElement) {\r\n      this._previouslyFocusedElement.focus();\r\n      this._previouslyFocusedElement = null;\r\n    }\r\n  }\r\n\r\n  ngAfterContentInit() {\r\n    this.focusTrap.attachAnchors();\r\n\r\n    if (this.autoCapture) {\r\n      this._captureFocus();\r\n    }\r\n  }\r\n\r\n  ngDoCheck() {\r\n    if (!this.focusTrap.hasAttached()) {\r\n      this.focusTrap.attachAnchors();\r\n    }\r\n  }\r\n\r\n  ngOnChanges(changes: SimpleChanges) {\r\n    const autoCaptureChange = changes['autoCapture'];\r\n\r\n    if (autoCaptureChange && !autoCaptureChange.firstChange && this.autoCapture &&\r\n        this.focusTrap.hasAttached()) {\r\n      this._captureFocus();\r\n    }\r\n  }\r\n\r\n  private _captureFocus() {\r\n    this._previouslyFocusedElement = this._document.activeElement as HTMLElement;\r\n    this.focusTrap.focusInitialElementWhenReady();\r\n  }\r\n\r\n  static ngAcceptInputType_enabled: BooleanInput;\r\n  static ngAcceptInputType_autoCapture: BooleanInput;\r\n}\r\n","/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n\r\nimport {NgZone} from '@angular/core';\r\nimport {InteractivityChecker} from '../interactivity-checker/interactivity-checker';\r\nimport {FocusTrap} from './focus-trap';\r\nimport {FocusTrapManager, ManagedFocusTrap} from './focus-trap-manager';\r\nimport {FocusTrapInertStrategy} from './focus-trap-inert-strategy';\r\nimport {ConfigurableFocusTrapConfig} from './configurable-focus-trap-config';\r\n\r\n/**\r\n * Class that allows for trapping focus within a DOM element.\r\n *\r\n * This class uses a strategy pattern that determines how it traps focus.\r\n * See FocusTrapInertStrategy.\r\n */\r\nexport class ConfigurableFocusTrap extends FocusTrap implements ManagedFocusTrap {\r\n  /** Whether the FocusTrap is enabled. */\r\n  get enabled(): boolean { return this._enabled; }\r\n  set enabled(value: boolean) {\r\n    this._enabled = value;\r\n    if (this._enabled) {\r\n      this._focusTrapManager.register(this);\r\n    } else {\r\n      this._focusTrapManager.deregister(this);\r\n    }\r\n  }\r\n\r\n  constructor(\r\n    _element: HTMLElement,\r\n    _checker: InteractivityChecker,\r\n    _ngZone: NgZone,\r\n    _document: Document,\r\n    private _focusTrapManager: FocusTrapManager,\r\n    private _inertStrategy: FocusTrapInertStrategy,\r\n    config: ConfigurableFocusTrapConfig) {\r\n    super(_element, _checker, _ngZone, _document, config.defer);\r\n    this._focusTrapManager.register(this);\r\n  }\r\n\r\n  /** Notifies the FocusTrapManager that this FocusTrap will be destroyed. */\r\n  destroy() {\r\n    this._focusTrapManager.deregister(this);\r\n    super.destroy();\r\n  }\r\n\r\n  /** @docs-private Implemented as part of ManagedFocusTrap. */\r\n  _enable() {\r\n    this._inertStrategy.preventFocus(this);\r\n    this.toggleAnchors(true);\r\n  }\r\n\r\n  /** @docs-private Implemented as part of ManagedFocusTrap. */\r\n  _disable() {\r\n    this._inertStrategy.allowFocus(this);\r\n    this.toggleAnchors(false);\r\n  }\r\n}\r\n","/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n\r\n/** IE 11 compatible closest implementation that is able to start from non-Element Nodes. */\r\nexport function closest(element: EventTarget|Element|null|undefined, selector: string):\r\n    Element|null {\r\n  if (!(element instanceof Node)) { return null; }\r\n\r\n  let curr: Node|null = element;\r\n  while (curr != null && !(curr instanceof Element)) {\r\n    curr = curr.parentNode;\r\n  }\r\n\r\n  return curr && (hasNativeClosest ?\r\n      curr.closest(selector) : polyfillClosest(curr, selector)) as Element|null;\r\n}\r\n\r\n/** Polyfill for browsers without Element.closest. */\r\nfunction polyfillClosest(element: Element, selector: string): Element|null {\r\n  let curr: Node|null = element;\r\n  while (curr != null && !(curr instanceof Element && matches(curr, selector))) {\r\n    curr = curr.parentNode;\r\n  }\r\n\r\n  return (curr || null) as Element|null;\r\n}\r\n\r\nconst hasNativeClosest = typeof Element != 'undefined' && !!Element.prototype.closest;\r\n\r\n/** IE 11 compatible matches implementation. */\r\nfunction matches(element: Element, selector: string): boolean {\r\n  return element.matches ?\r\n      element.matches(selector) :\r\n      (element as any)['msMatchesSelector'](selector);\r\n}\r\n","/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n\r\nimport {FocusTrapInertStrategy} from './focus-trap-inert-strategy';\r\nimport {ConfigurableFocusTrap} from './configurable-focus-trap';\r\nimport {closest} from './polyfill';\r\n\r\n/**\r\n * Lightweight FocusTrapInertStrategy that adds a document focus event\r\n * listener to redirect focus back inside the FocusTrap.\r\n */\r\nexport class EventListenerFocusTrapInertStrategy implements FocusTrapInertStrategy {\r\n  /** Focus event handler. */\r\n  private _listener: ((e: FocusEvent) => void) | null = null;\r\n\r\n  /** Adds a document event listener that keeps focus inside the FocusTrap. */\r\n  preventFocus(focusTrap: ConfigurableFocusTrap): void {\r\n    // Ensure there's only one listener per document\r\n    if (this._listener) {\r\n      focusTrap._document.removeEventListener('focus', this._listener!, true);\r\n    }\r\n\r\n    this._listener = (e: FocusEvent) => this._trapFocus(focusTrap, e);\r\n    focusTrap._ngZone.runOutsideAngular(() => {\r\n      focusTrap._document.addEventListener('focus', this._listener!, true);\r\n    });\r\n  }\r\n\r\n  /** Removes the event listener added in preventFocus. */\r\n  allowFocus(focusTrap: ConfigurableFocusTrap): void {\r\n    if (!this._listener) {\r\n      return;\r\n    }\r\n    focusTrap._document.removeEventListener('focus', this._listener!, true);\r\n    this._listener = null;\r\n  }\r\n\r\n  /**\r\n   * Refocuses the first element in the FocusTrap if the focus event target was outside\r\n   * the FocusTrap.\r\n   *\r\n   * This is an event listener callback. The event listener is added in runOutsideAngular,\r\n   * so all this code runs outside Angular as well.\r\n   */\r\n  private _trapFocus(focusTrap: ConfigurableFocusTrap, event: FocusEvent) {\r\n    const target = event.target as HTMLElement;\r\n    const focusTrapRoot = focusTrap._element;\r\n\r\n    // Don't refocus if target was in an overlay, because the overlay might be associated\r\n    // with an element inside the FocusTrap, ex. mat-select.\r\n    if (!focusTrapRoot.contains(target) && closest(target, 'div.cdk-overlay-pane') === null) {\r\n        // Some legacy FocusTrap usages have logic that focuses some element on the page\r\n        // just before FocusTrap is destroyed. For backwards compatibility, wait\r\n        // to be sure FocusTrap is still enabled before refocusing.\r\n        setTimeout(() => {\r\n          // Check whether focus wasn't put back into the focus trap while the timeout was pending.\r\n          if (focusTrap.enabled && !focusTrapRoot.contains(focusTrap._document.activeElement)) {\r\n            focusTrap.focusFirstTabbableElement();\r\n          }\r\n        });\r\n      }\r\n  }\r\n}\r\n","/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n\r\n/**\r\n * Configuration for creating a ConfigurableFocusTrap.\r\n */\r\nexport class ConfigurableFocusTrapConfig {\r\n  /**\r\n   * Whether to defer the creation of FocusTrap elements to be\r\n   * done manually by the user. Default is to create them\r\n   * automatically.\r\n   */\r\n  defer: boolean = false;\r\n}\r\n","/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\nimport {\r\n  InjectionToken,\r\n} from '@angular/core';\r\nimport {FocusTrap} from './focus-trap';\r\n\r\n/** The injection token used to specify the inert strategy. */\r\nexport const FOCUS_TRAP_INERT_STRATEGY =\r\n  new InjectionToken<FocusTrapInertStrategy>('FOCUS_TRAP_INERT_STRATEGY');\r\n\r\n/**\r\n * A strategy that dictates how FocusTrap should prevent elements\r\n * outside of the FocusTrap from being focused.\r\n */\r\nexport interface FocusTrapInertStrategy {\r\n  /** Makes all elements outside focusTrap unfocusable. */\r\n  preventFocus(focusTrap: FocusTrap): void;\r\n  /** Reverts elements made unfocusable by preventFocus to their previous state. */\r\n  allowFocus(focusTrap: FocusTrap): void;\r\n}\r\n","/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n\r\nimport {Injectable} from '@angular/core';\r\n\r\n/**\r\n * A FocusTrap managed by FocusTrapManager.\r\n * Implemented by ConfigurableFocusTrap to avoid circular dependency.\r\n */\r\nexport interface ManagedFocusTrap {\r\n  _enable(): void;\r\n  _disable(): void;\r\n  focusInitialElementWhenReady(): Promise<boolean>;\r\n}\r\n\r\n/** Injectable that ensures only the most recently enabled FocusTrap is active. */\r\n@Injectable({providedIn: 'root'})\r\nexport class FocusTrapManager {\r\n  // A stack of the FocusTraps on the page. Only the FocusTrap at the\r\n  // top of the stack is active.\r\n  private _focusTrapStack: ManagedFocusTrap[] = [];\r\n\r\n  /**\r\n   * Disables the FocusTrap at the top of the stack, and then pushes\r\n   * the new FocusTrap onto the stack.\r\n   */\r\n  register(focusTrap: ManagedFocusTrap): void {\r\n    // Dedupe focusTraps that register multiple times.\r\n    this._focusTrapStack = this._focusTrapStack.filter((ft) => ft !== focusTrap);\r\n\r\n    let stack = this._focusTrapStack;\r\n\r\n    if (stack.length) {\r\n      stack[stack.length - 1]._disable();\r\n    }\r\n\r\n    stack.push(focusTrap);\r\n    focusTrap._enable();\r\n  }\r\n\r\n  /**\r\n   * Removes the FocusTrap from the stack, and activates the\r\n   * FocusTrap that is the new top of the stack.\r\n   */\r\n  deregister(focusTrap: ManagedFocusTrap): void {\r\n    focusTrap._disable();\r\n\r\n    const stack = this._focusTrapStack;\r\n\r\n    const i = stack.indexOf(focusTrap);\r\n    if (i !== -1) {\r\n      stack.splice(i, 1);\r\n      if (stack.length) {\r\n        stack[stack.length - 1]._enable();\r\n      }\r\n    }\r\n  }\r\n}\r\n","/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n\r\nimport {DOCUMENT} from '@angular/common';\r\nimport {\r\n  Inject,\r\n  Injectable,\r\n  Optional,\r\n  NgZone,\r\n} from '@angular/core';\r\nimport {InteractivityChecker} from '../interactivity-checker/interactivity-checker';\r\nimport {ConfigurableFocusTrap} from './configurable-focus-trap';\r\nimport {ConfigurableFocusTrapConfig} from './configurable-focus-trap-config';\r\nimport {FOCUS_TRAP_INERT_STRATEGY, FocusTrapInertStrategy} from './focus-trap-inert-strategy';\r\nimport {EventListenerFocusTrapInertStrategy} from './event-listener-inert-strategy';\r\nimport {FocusTrapManager} from './focus-trap-manager';\r\n\r\n/** Factory that allows easy instantiation of configurable focus traps. */\r\n@Injectable({providedIn: 'root'})\r\nexport class ConfigurableFocusTrapFactory {\r\n  private _document: Document;\r\n  private _inertStrategy: FocusTrapInertStrategy;\r\n\r\n  constructor(\r\n      private _checker: InteractivityChecker,\r\n      private _ngZone: NgZone,\r\n      private _focusTrapManager: FocusTrapManager,\r\n      @Inject(DOCUMENT) _document: any,\r\n      @Optional() @Inject(FOCUS_TRAP_INERT_STRATEGY) _inertStrategy?: FocusTrapInertStrategy) {\r\n\r\n    this._document = _document;\r\n    // TODO split up the strategies into different modules, similar to DateAdapter.\r\n    this._inertStrategy = _inertStrategy || new EventListenerFocusTrapInertStrategy();\r\n  }\r\n\r\n  /**\r\n   * Creates a focus-trapped region around the given element.\r\n   * @param element The element around which focus will be trapped.\r\n   * @param config The focus trap configuration.\r\n   * @returns The created focus trap instance.\r\n   */\r\n  create(element: HTMLElement, config?: ConfigurableFocusTrapConfig): ConfigurableFocusTrap;\r\n\r\n  /**\r\n   * @deprecated Pass a config object instead of the `deferCaptureElements` flag.\r\n   * @breaking-change 11.0.0\r\n   */\r\n  create(element: HTMLElement, deferCaptureElements: boolean): ConfigurableFocusTrap;\r\n\r\n  create(element: HTMLElement, config: ConfigurableFocusTrapConfig | boolean =\r\n    new ConfigurableFocusTrapConfig()): ConfigurableFocusTrap {\r\n    let configObject: ConfigurableFocusTrapConfig;\r\n    if (typeof config === 'boolean') {\r\n      configObject = new ConfigurableFocusTrapConfig();\r\n      configObject.defer = config;\r\n    } else {\r\n      configObject = config;\r\n    }\r\n    return new ConfigurableFocusTrap(\r\n        element, this._checker, this._ngZone, this._document, this._focusTrapManager,\r\n        this._inertStrategy, configObject);\r\n  }\r\n}\r\n","/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n\r\nimport {InjectionToken} from '@angular/core';\r\n\r\n// The tokens for the live announcer are defined in a separate file from LiveAnnouncer\r\n// as a workaround for https://github.com/angular/angular/issues/22559\r\n\r\n/** Possible politeness levels. */\r\nexport type AriaLivePoliteness = 'off' | 'polite' | 'assertive';\r\n\r\nexport const LIVE_ANNOUNCER_ELEMENT_TOKEN =\r\n    new InjectionToken<HTMLElement | null>('liveAnnouncerElement', {\r\n      providedIn: 'root',\r\n      factory: LIVE_ANNOUNCER_ELEMENT_TOKEN_FACTORY,\r\n    });\r\n\r\n/** @docs-private */\r\nexport function LIVE_ANNOUNCER_ELEMENT_TOKEN_FACTORY(): null {\r\n  return null;\r\n}\r\n\r\n/** Object that can be used to configure the default options for the LiveAnnouncer. */\r\nexport interface LiveAnnouncerDefaultOptions {\r\n  /** Default politeness for the announcements. */\r\n  politeness?: AriaLivePoliteness;\r\n\r\n  /** Default duration for the announcement messages. */\r\n  duration?: number;\r\n}\r\n\r\n/** Injection token that can be used to configure the default options for the LiveAnnouncer. */\r\nexport const LIVE_ANNOUNCER_DEFAULT_OPTIONS =\r\n    new InjectionToken<LiveAnnouncerDefaultOptions>('LIVE_ANNOUNCER_DEFAULT_OPTIONS');\r\n","/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n\r\nimport {ContentObserver} from '@angular/cdk/observers';\r\nimport {DOCUMENT} from '@angular/common';\r\nimport {\r\n  Directive,\r\n  ElementRef,\r\n  Inject,\r\n  Injectable,\r\n  Input,\r\n  NgZone,\r\n  OnDestroy,\r\n  Optional,\r\n} from '@angular/core';\r\nimport {Subscription} from 'rxjs';\r\nimport {\r\n  AriaLivePoliteness,\r\n  LiveAnnouncerDefaultOptions,\r\n  LIVE_ANNOUNCER_ELEMENT_TOKEN,\r\n  LIVE_ANNOUNCER_DEFAULT_OPTIONS,\r\n} from './live-announcer-tokens';\r\n\r\n\r\n@Injectable({providedIn: 'root'})\r\nexport class LiveAnnouncer implements OnDestroy {\r\n  private _liveElement: HTMLElement;\r\n  private _document: Document;\r\n  private _previousTimeout?: number;\r\n\r\n  constructor(\r\n      @Optional() @Inject(LIVE_ANNOUNCER_ELEMENT_TOKEN) elementToken: any,\r\n      private _ngZone: NgZone,\r\n      @Inject(DOCUMENT) _document: any,\r\n      @Optional() @Inject(LIVE_ANNOUNCER_DEFAULT_OPTIONS)\r\n      private _defaultOptions?: LiveAnnouncerDefaultOptions) {\r\n\r\n    // We inject the live element and document as `any` because the constructor signature cannot\r\n    // reference browser globals (HTMLElement, Document) on non-browser environments, since having\r\n    // a class decorator causes TypeScript to preserve the constructor signature types.\r\n    this._document = _document;\r\n    this._liveElement = elementToken || this._createLiveElement();\r\n  }\r\n\r\n  /**\r\n   * Announces a message to screenreaders.\r\n   * @param message Message to be announced to the screenreader.\r\n   * @returns Promise that will be resolved when the message is added to the DOM.\r\n   */\r\n  announce(message: string): Promise<void>;\r\n\r\n  /**\r\n   * Announces a message to screenreaders.\r\n   * @param message Message to be announced to the screenreader.\r\n   * @param politeness The politeness of the announcer element.\r\n   * @returns Promise that will be resolved when the message is added to the DOM.\r\n   */\r\n  announce(message: string, politeness?: AriaLivePoliteness): Promise<void>;\r\n\r\n  /**\r\n   * Announces a message to screenreaders.\r\n   * @param message Message to be announced to the screenreader.\r\n   * @param duration Time in milliseconds after which to clear out the announcer element. Note\r\n   *   that this takes effect after the message has been added to the DOM, which can be up to\r\n   *   100ms after `announce` has been called.\r\n   * @returns Promise that will be resolved when the message is added to the DOM.\r\n   */\r\n  announce(message: string, duration?: number): Promise<void>;\r\n\r\n  /**\r\n   * Announces a message to screenreaders.\r\n   * @param message Message to be announced to the screenreader.\r\n   * @param politeness The politeness of the announcer element.\r\n   * @param duration Time in milliseconds after which to clear out the announcer element. Note\r\n   *   that this takes effect after the message has been added to the DOM, which can be up to\r\n   *   100ms after `announce` has been called.\r\n   * @returns Promise that will be resolved when the message is added to the DOM.\r\n   */\r\n  announce(message: string, politeness?: AriaLivePoliteness, duration?: number): Promise<void>;\r\n\r\n  announce(message: string, ...args: any[]): Promise<void> {\r\n    const defaultOptions = this._defaultOptions;\r\n    let politeness: AriaLivePoliteness | undefined;\r\n    let duration: number | undefined;\r\n\r\n    if (args.length === 1 && typeof args[0] === 'number') {\r\n      duration = args[0];\r\n    } else {\r\n      [politeness, duration] = args;\r\n    }\r\n\r\n    this.clear();\r\n    clearTimeout(this._previousTimeout);\r\n\r\n    if (!politeness) {\r\n      politeness =\r\n          (defaultOptions && defaultOptions.politeness) ? defaultOptions.politeness : 'polite';\r\n    }\r\n\r\n    if (duration == null && defaultOptions) {\r\n      duration = defaultOptions.duration;\r\n    }\r\n\r\n    // TODO: ensure changing the politeness works on all environments we support.\r\n    this._liveElement.setAttribute('aria-live', politeness);\r\n\r\n    // This 100ms timeout is necessary for some browser + screen-reader combinations:\r\n    // - Both JAWS and NVDA over IE11 will not announce anything without a non-zero timeout.\r\n    // - With Chrome and IE11 with NVDA or JAWS, a repeated (identical) message won't be read a\r\n    //   second time without clearing and then using a non-zero delay.\r\n    // (using JAWS 17 at time of this writing).\r\n    return this._ngZone.runOutsideAngular(() => {\r\n      return new Promise(resolve => {\r\n        clearTimeout(this._previousTimeout);\r\n        this._previousTimeout = setTimeout(() => {\r\n          this._liveElement.textContent = message;\r\n          resolve();\r\n\r\n          if (typeof duration === 'number') {\r\n            this._previousTimeout = setTimeout(() => this.clear(), duration);\r\n          }\r\n        }, 100);\r\n      });\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Clears the current text from the announcer element. Can be used to prevent\r\n   * screen readers from reading the text out again while the user is going\r\n   * through the page landmarks.\r\n   */\r\n  clear() {\r\n    if (this._liveElement) {\r\n      this._liveElement.textContent = '';\r\n    }\r\n  }\r\n\r\n  ngOnDestroy() {\r\n    clearTimeout(this._previousTimeout);\r\n\r\n    if (this._liveElement && this._liveElement.parentNode) {\r\n      this._liveElement.parentNode.removeChild(this._liveElement);\r\n      this._liveElement = null!;\r\n    }\r\n  }\r\n\r\n  private _createLiveElement(): HTMLElement {\r\n    const elementClass = 'cdk-live-announcer-element';\r\n    const previousElements = this._document.getElementsByClassName(elementClass);\r\n    const liveEl = this._document.createElement('div');\r\n\r\n    // Remove any old containers. This can happen when coming in from a server-side-rendered page.\r\n    for (let i = 0; i < previousElements.length; i++) {\r\n      previousElements[i].parentNode!.removeChild(previousElements[i]);\r\n    }\r\n\r\n    liveEl.classList.add(elementClass);\r\n    liveEl.classList.add('cdk-visually-hidden');\r\n\r\n    liveEl.setAttribute('aria-atomic', 'true');\r\n    liveEl.setAttribute('aria-live', 'polite');\r\n\r\n    this._document.body.appendChild(liveEl);\r\n\r\n    return liveEl;\r\n  }\r\n\r\n}\r\n\r\n\r\n/**\r\n * A directive that works similarly to aria-live, but uses the LiveAnnouncer to ensure compatibility\r\n * with a wider range of browsers and screen readers.\r\n */\r\n@Directive({\r\n  selector: '[cdkAriaLive]',\r\n  exportAs: 'cdkAriaLive',\r\n})\r\nexport class CdkAriaLive implements OnDestroy {\r\n  /** The aria-live politeness level to use when announcing messages. */\r\n  @Input('cdkAriaLive')\r\n  get politeness(): AriaLivePoliteness { return this._politeness; }\r\n  set politeness(value: AriaLivePoliteness) {\r\n    this._politeness = value === 'off' || value === 'assertive' ? value : 'polite';\r\n    if (this._politeness === 'off') {\r\n      if (this._subscription) {\r\n        this._subscription.unsubscribe();\r\n        this._subscription = null;\r\n      }\r\n    } else if (!this._subscription) {\r\n      this._subscription = this._ngZone.runOutsideAngular(() => {\r\n        return this._contentObserver\r\n          .observe(this._elementRef)\r\n          .subscribe(() => {\r\n            // Note that we use textContent here, rather than innerText, in order to avoid a reflow.\r\n            const elementText = this._elementRef.nativeElement.textContent;\r\n\r\n            // The `MutationObserver` fires also for attribute\r\n            // changes which we don't want to announce.\r\n            if (elementText !== this._previousAnnouncedText) {\r\n              this._liveAnnouncer.announce(elementText, this._politeness);\r\n              this._previousAnnouncedText = elementText;\r\n            }\r\n          });\r\n      });\r\n    }\r\n  }\r\n  private _politeness: AriaLivePoliteness = 'polite';\r\n\r\n  private _previousAnnouncedText?: string;\r\n  private _subscription: Subscription | null;\r\n\r\n  constructor(private _elementRef: ElementRef, private _liveAnnouncer: LiveAnnouncer,\r\n              private _contentObserver: ContentObserver, private _ngZone: NgZone) {}\r\n\r\n  ngOnDestroy() {\r\n    if (this._subscription) {\r\n      this._subscription.unsubscribe();\r\n    }\r\n  }\r\n}\r\n","/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n\r\n/** Gets whether an event could be a faked `mousedown` event dispatched by a screen reader. */\r\nexport function isFakeMousedownFromScreenReader(event: MouseEvent): boolean {\r\n  // We can typically distinguish between these faked mousedown events and real mousedown events\r\n  // using the \"buttons\" property. While real mousedowns will indicate the mouse button that was\r\n  // pressed (e.g. \"1\" for the left mouse button), faked mousedowns will usually set the property\r\n  // value to 0.\r\n  return event.buttons === 0;\r\n}\r\n\r\n/** Gets whether an event could be a faked `touchstart` event dispatched by a screen reader. */\r\nexport function isFakeTouchstartFromScreenReader(event: TouchEvent): boolean {\r\n  const touch: Touch | undefined = (event.touches && event.touches[0]) ||\r\n                                   (event.changedTouches && event.changedTouches[0]);\r\n\r\n  // A fake `touchstart` can be distinguished from a real one by looking at the `identifier`\r\n  // which is typically >= 0 on a real device versus -1 from a screen reader. Just to be safe,\r\n  // we can also look at `radiusX` and `radiusY`. This behavior was observed against a Windows 10\r\n  // device with a touch screen running NVDA v2020.4 and Firefox 85 or Chrome 88.\r\n  return !!touch && touch.identifier === -1 && (touch.radiusX == null || touch.radiusX === 1) &&\r\n         (touch.radiusY == null || touch.radiusY === 1);\r\n}\r\n","/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n\r\nimport {Platform, normalizePassiveListenerOptions, _getShadowRoot} from '@angular/cdk/platform';\r\nimport {\r\n  Directive,\r\n  ElementRef,\r\n  EventEmitter,\r\n  Inject,\r\n  Injectable,\r\n  InjectionToken,\r\n  NgZone,\r\n  OnDestroy,\r\n  Optional,\r\n  Output,\r\n  AfterViewInit,\r\n} from '@angular/core';\r\nimport {Observable, of as observableOf, Subject, Subscription} from 'rxjs';\r\nimport {coerceElement} from '@angular/cdk/coercion';\r\nimport {DOCUMENT} from '@angular/common';\r\nimport {\r\n  isFakeMousedownFromScreenReader,\r\n  isFakeTouchstartFromScreenReader,\r\n} from '../fake-event-detection';\r\n\r\n\r\n// This is the value used by AngularJS Material. Through trial and error (on iPhone 6S) they found\r\n// that a value of around 650ms seems appropriate.\r\nexport const TOUCH_BUFFER_MS = 650;\r\n\r\n\r\nexport type FocusOrigin = 'touch' | 'mouse' | 'keyboard' | 'program' | null;\r\n\r\n/**\r\n * Corresponds to the options that can be passed to the native `focus` event.\r\n * via https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/focus\r\n */\r\nexport interface FocusOptions {\r\n  /** Whether the browser should scroll to the element when it is focused. */\r\n  preventScroll?: boolean;\r\n}\r\n\r\n/** Detection mode used for attributing the origin of a focus event. */\r\nexport const enum FocusMonitorDetectionMode {\r\n  /**\r\n   * Any mousedown, keydown, or touchstart event that happened in the previous\r\n   * tick or the current tick will be used to assign a focus event's origin (to\r\n   * either mouse, keyboard, or touch). This is the default option.\r\n   */\r\n  IMMEDIATE,\r\n  /**\r\n   * A focus event's origin is always attributed to the last corresponding\r\n   * mousedown, keydown, or touchstart event, no matter how long ago it occured.\r\n   */\r\n  EVENTUAL\r\n}\r\n\r\n/** Injectable service-level options for FocusMonitor. */\r\nexport interface FocusMonitorOptions {\r\n  detectionMode?: FocusMonitorDetectionMode;\r\n}\r\n\r\n/** InjectionToken for FocusMonitorOptions. */\r\nexport const FOCUS_MONITOR_DEFAULT_OPTIONS =\r\n    new InjectionToken<FocusMonitorOptions>('cdk-focus-monitor-default-options');\r\n\r\ntype MonitoredElementInfo = {\r\n  checkChildren: boolean,\r\n  subject: Subject<FocusOrigin>,\r\n  rootNode: HTMLElement|ShadowRoot|Document\r\n};\r\n\r\n/**\r\n * Event listener options that enable capturing and also\r\n * mark the listener as passive if the browser supports it.\r\n */\r\nconst captureEventListenerOptions = normalizePassiveListenerOptions({\r\n  passive: true,\r\n  capture: true\r\n});\r\n\r\n\r\n/** Monitors mouse and keyboard events to determine the cause of focus events. */\r\n@Injectable({providedIn: 'root'})\r\nexport class FocusMonitor implements OnDestroy {\r\n  /** The focus origin that the next focus event is a result of. */\r\n  private _origin: FocusOrigin = null;\r\n\r\n  /** The FocusOrigin of the last focus event tracked by the FocusMonitor. */\r\n  private _lastFocusOrigin: FocusOrigin;\r\n\r\n  /** Whether the window has just been focused. */\r\n  private _windowFocused = false;\r\n\r\n  /** The target of the last touch event. */\r\n  private _lastTouchTarget: EventTarget | null;\r\n\r\n  /** The timeout id of the touch timeout, used to cancel timeout later. */\r\n  private _touchTimeoutId: number;\r\n\r\n  /** The timeout id of the window focus timeout. */\r\n  private _windowFocusTimeoutId: number;\r\n\r\n  /** The timeout id of the origin clearing timeout. */\r\n  private _originTimeoutId: number;\r\n\r\n  /** Map of elements being monitored to their info. */\r\n  private _elementInfo = new Map<HTMLElement, MonitoredElementInfo>();\r\n\r\n  /** The number of elements currently being monitored. */\r\n  private _monitoredElementCount = 0;\r\n\r\n  /**\r\n   * Keeps track of the root nodes to which we've currently bound a focus/blur handler,\r\n   * as well as the number of monitored elements that they contain. We have to treat focus/blur\r\n   * handlers differently from the rest of the events, because the browser won't emit events\r\n   * to the document when focus moves inside of a shadow root.\r\n   */\r\n  private _rootNodeFocusListenerCount = new Map<HTMLElement|Document|ShadowRoot, number>();\r\n\r\n  /**\r\n   * The specified detection mode, used for attributing the origin of a focus\r\n   * event.\r\n   */\r\n  private readonly _detectionMode: FocusMonitorDetectionMode;\r\n\r\n  /**\r\n   * Event listener for `keydown` events on the document.\r\n   * Needs to be an arrow function in order to preserve the context when it gets bound.\r\n   */\r\n  private _documentKeydownListener = () => {\r\n    // On keydown record the origin and clear any touch event that may be in progress.\r\n    this._lastTouchTarget = null;\r\n    this._setOriginForCurrentEventQueue('keyboard');\r\n  }\r\n\r\n  /**\r\n   * Event listener for `mousedown` events on the document.\r\n   * Needs to be an arrow function in order to preserve the context when it gets bound.\r\n   */\r\n  private _documentMousedownListener = (event: MouseEvent) => {\r\n    // On mousedown record the origin only if there is not touch\r\n    // target, since a mousedown can happen as a result of a touch event.\r\n    if (!this._lastTouchTarget) {\r\n      // In some cases screen readers fire fake `mousedown` events instead of `keydown`.\r\n      // Resolve the focus source to `keyboard` if we detect one of them.\r\n      const source = isFakeMousedownFromScreenReader(event) ? 'keyboard' : 'mouse';\r\n      this._setOriginForCurrentEventQueue(source);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Event listener for `touchstart` events on the document.\r\n   * Needs to be an arrow function in order to preserve the context when it gets bound.\r\n   */\r\n  private _documentTouchstartListener = (event: TouchEvent) => {\r\n    // Some screen readers will fire a fake `touchstart` event if an element is activated using\r\n    // the keyboard while on a device with a touchsreen. Consider such events as keyboard focus.\r\n    if (!isFakeTouchstartFromScreenReader(event)) {\r\n      // When the touchstart event fires the focus event is not yet in the event queue. This means\r\n      // we can't rely on the trick used above (setting timeout of 1ms). Instead we wait 650ms to\r\n      // see if a focus happens.\r\n      if (this._touchTimeoutId != null) {\r\n        clearTimeout(this._touchTimeoutId);\r\n      }\r\n\r\n      this._lastTouchTarget = getTarget(event);\r\n      this._touchTimeoutId = setTimeout(() => this._lastTouchTarget = null, TOUCH_BUFFER_MS);\r\n    } else if (!this._lastTouchTarget) {\r\n      this._setOriginForCurrentEventQueue('keyboard');\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Event listener for `focus` events on the window.\r\n   * Needs to be an arrow function in order to preserve the context when it gets bound.\r\n   */\r\n  private _windowFocusListener = () => {\r\n    // Make a note of when the window regains focus, so we can\r\n    // restore the origin info for the focused element.\r\n    this._windowFocused = true;\r\n    this._windowFocusTimeoutId = setTimeout(() => this._windowFocused = false);\r\n  }\r\n\r\n  /** Used to reference correct document/window */\r\n  protected _document?: Document;\r\n\r\n  constructor(\r\n      private _ngZone: NgZone,\r\n      private _platform: Platform,\r\n      /** @breaking-change 11.0.0 make document required */\r\n      @Optional() @Inject(DOCUMENT) document: any|null,\r\n      @Optional() @Inject(FOCUS_MONITOR_DEFAULT_OPTIONS) options:\r\n          FocusMonitorOptions|null) {\r\n    this._document = document;\r\n    this._detectionMode = options?.detectionMode || FocusMonitorDetectionMode.IMMEDIATE;\r\n  }\r\n  /**\r\n   * Event listener for `focus` and 'blur' events on the document.\r\n   * Needs to be an arrow function in order to preserve the context when it gets bound.\r\n   */\r\n  private _rootNodeFocusAndBlurListener = (event: Event) => {\r\n    const target = getTarget(event);\r\n    const handler = event.type === 'focus' ? this._onFocus : this._onBlur;\r\n\r\n    // We need to walk up the ancestor chain in order to support `checkChildren`.\r\n    for (let element = target; element; element = element.parentElement) {\r\n      handler.call(this, event as FocusEvent, element);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Monitors focus on an element and applies appropriate CSS classes.\r\n   * @param element The element to monitor\r\n   * @param checkChildren Whether to count the element as focused when its children are focused.\r\n   * @returns An observable that emits when the focus state of the element changes.\r\n   *     When the element is blurred, null will be emitted.\r\n   */\r\n  monitor(element: HTMLElement, checkChildren?: boolean): Observable<FocusOrigin>;\r\n\r\n  /**\r\n   * Monitors focus on an element and applies appropriate CSS classes.\r\n   * @param element The element to monitor\r\n   * @param checkChildren Whether to count the element as focused when its children are focused.\r\n   * @returns An observable that emits when the focus state of the element changes.\r\n   *     When the element is blurred, null will be emitted.\r\n   */\r\n  monitor(element: ElementRef<HTMLElement>, checkChildren?: boolean): Observable<FocusOrigin>;\r\n\r\n  monitor(element: HTMLElement | ElementRef<HTMLElement>,\r\n          checkChildren: boolean = false): Observable<FocusOrigin> {\r\n    const nativeElement = coerceElement(element);\r\n\r\n    // Do nothing if we're not on the browser platform or the passed in node isn't an element.\r\n    if (!this._platform.isBrowser || nativeElement.nodeType !== 1) {\r\n      return observableOf(null);\r\n    }\r\n\r\n    // If the element is inside the shadow DOM, we need to bind our focus/blur listeners to\r\n    // the shadow root, rather than the `document`, because the browser won't emit focus events\r\n    // to the `document`, if focus is moving within the same shadow root.\r\n    const rootNode = _getShadowRoot(nativeElement) || this._getDocument();\r\n    const cachedInfo = this._elementInfo.get(nativeElement);\r\n\r\n    // Check if we're already monitoring this element.\r\n    if (cachedInfo) {\r\n      if (checkChildren) {\r\n        // TODO(COMP-318): this can be problematic, because it'll turn all non-checkChildren\r\n        // observers into ones that behave as if `checkChildren` was turned on. We need a more\r\n        // robust solution.\r\n        cachedInfo.checkChildren = true;\r\n      }\r\n\r\n      return cachedInfo.subject;\r\n    }\r\n\r\n    // Create monitored element info.\r\n    const info: MonitoredElementInfo = {\r\n      checkChildren: checkChildren,\r\n      subject: new Subject<FocusOrigin>(),\r\n      rootNode\r\n    };\r\n    this._elementInfo.set(nativeElement, info);\r\n    this._registerGlobalListeners(info);\r\n\r\n    return info.subject;\r\n  }\r\n\r\n  /**\r\n   * Stops monitoring an element and removes all focus classes.\r\n   * @param element The element to stop monitoring.\r\n   */\r\n  stopMonitoring(element: HTMLElement): void;\r\n\r\n  /**\r\n   * Stops monitoring an element and removes all focus classes.\r\n   * @param element The element to stop monitoring.\r\n   */\r\n  stopMonitoring(element: ElementRef<HTMLElement>): void;\r\n\r\n  stopMonitoring(element: HTMLElement | ElementRef<HTMLElement>): void {\r\n    const nativeElement = coerceElement(element);\r\n    const elementInfo = this._elementInfo.get(nativeElement);\r\n\r\n    if (elementInfo) {\r\n      elementInfo.subject.complete();\r\n\r\n      this._setClasses(nativeElement);\r\n      this._elementInfo.delete(nativeElement);\r\n      this._removeGlobalListeners(elementInfo);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Focuses the element via the specified focus origin.\r\n   * @param element Element to focus.\r\n   * @param origin Focus origin.\r\n   * @param options Options that can be used to configure the focus behavior.\r\n   */\r\n  focusVia(element: HTMLElement, origin: FocusOrigin, options?: FocusOptions): void;\r\n\r\n  /**\r\n   * Focuses the element via the specified focus origin.\r\n   * @param element Element to focus.\r\n   * @param origin Focus origin.\r\n   * @param options Options that can be used to configure the focus behavior.\r\n   */\r\n  focusVia(element: ElementRef<HTMLElement>, origin: FocusOrigin, options?: FocusOptions): void;\r\n\r\n  focusVia(element: HTMLElement | ElementRef<HTMLElement>,\r\n          origin: FocusOrigin,\r\n          options?: FocusOptions): void {\r\n\r\n    const nativeElement = coerceElement(element);\r\n    const focusedElement = this._getDocument().activeElement;\r\n\r\n    // If the element is focused already, calling `focus` again won't trigger the event listener\r\n    // which means that the focus classes won't be updated. If that's the case, update the classes\r\n    // directly without waiting for an event.\r\n    if (nativeElement === focusedElement) {\r\n      this._getClosestElementsInfo(nativeElement)\r\n        .forEach(([currentElement, info]) => this._originChanged(currentElement, origin, info));\r\n    } else {\r\n      this._setOriginForCurrentEventQueue(origin);\r\n\r\n      // `focus` isn't available on the server\r\n      if (typeof nativeElement.focus === 'function') {\r\n        nativeElement.focus(options);\r\n      }\r\n    }\r\n  }\r\n\r\n  ngOnDestroy() {\r\n    this._elementInfo.forEach((_info, element) => this.stopMonitoring(element));\r\n  }\r\n\r\n  /** Access injected document if available or fallback to global document reference */\r\n  private _getDocument(): Document {\r\n    return this._document || document;\r\n  }\r\n\r\n  /** Use defaultView of injected document if available or fallback to global window reference */\r\n  private _getWindow(): Window {\r\n    const doc = this._getDocument();\r\n    return doc.defaultView || window;\r\n  }\r\n\r\n  private _toggleClass(element: Element, className: string, shouldSet: boolean) {\r\n    if (shouldSet) {\r\n      element.classList.add(className);\r\n    } else {\r\n      element.classList.remove(className);\r\n    }\r\n  }\r\n\r\n  private _getFocusOrigin(event: FocusEvent): FocusOrigin {\r\n    // If we couldn't detect a cause for the focus event, it's due to one of three reasons:\r\n    // 1) The window has just regained focus, in which case we want to restore the focused state of\r\n    //    the element from before the window blurred.\r\n    // 2) It was caused by a touch event, in which case we mark the origin as 'touch'.\r\n    // 3) The element was programmatically focused, in which case we should mark the origin as\r\n    //    'program'.\r\n    if (this._origin) {\r\n      return this._origin;\r\n    }\r\n\r\n    if (this._windowFocused && this._lastFocusOrigin) {\r\n      return this._lastFocusOrigin;\r\n    } else if (this._wasCausedByTouch(event)) {\r\n      return 'touch';\r\n    } else {\r\n      return 'program';\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Sets the focus classes on the element based on the given focus origin.\r\n   * @param element The element to update the classes on.\r\n   * @param origin The focus origin.\r\n   */\r\n  private _setClasses(element: HTMLElement, origin?: FocusOrigin): void {\r\n    this._toggleClass(element, 'cdk-focused', !!origin);\r\n    this._toggleClass(element, 'cdk-touch-focused', origin === 'touch');\r\n    this._toggleClass(element, 'cdk-keyboard-focused', origin === 'keyboard');\r\n    this._toggleClass(element, 'cdk-mouse-focused', origin === 'mouse');\r\n    this._toggleClass(element, 'cdk-program-focused', origin === 'program');\r\n  }\r\n\r\n  /**\r\n   * Sets the origin and schedules an async function to clear it at the end of the event queue.\r\n   * If the detection mode is 'eventual', the origin is never cleared.\r\n   * @param origin The origin to set.\r\n   */\r\n  private _setOriginForCurrentEventQueue(origin: FocusOrigin): void {\r\n    this._ngZone.runOutsideAngular(() => {\r\n      this._origin = origin;\r\n\r\n      if (this._detectionMode === FocusMonitorDetectionMode.IMMEDIATE) {\r\n        // Sometimes the focus origin won't be valid in Firefox because Firefox seems to focus *one*\r\n        // tick after the interaction event fired. To ensure the focus origin is always correct,\r\n        // the focus origin will be determined at the beginning of the next tick.\r\n        this._originTimeoutId = setTimeout(() => this._origin = null, 1);\r\n      }\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Checks whether the given focus event was caused by a touchstart event.\r\n   * @param event The focus event to check.\r\n   * @returns Whether the event was caused by a touch.\r\n   */\r\n  private _wasCausedByTouch(event: FocusEvent): boolean {\r\n    // Note(mmalerba): This implementation is not quite perfect, there is a small edge case.\r\n    // Consider the following dom structure:\r\n    //\r\n    // <div #parent tabindex=\"0\" cdkFocusClasses>\r\n    //   <div #child (click)=\"#parent.focus()\"></div>\r\n    // </div>\r\n    //\r\n    // If the user touches the #child element and the #parent is programmatically focused as a\r\n    // result, this code will still consider it to have been caused by the touch event and will\r\n    // apply the cdk-touch-focused class rather than the cdk-program-focused class. This is a\r\n    // relatively small edge-case that can be worked around by using\r\n    // focusVia(parentEl, 'program') to focus the parent element.\r\n    //\r\n    // If we decide that we absolutely must handle this case correctly, we can do so by listening\r\n    // for the first focus event after the touchstart, and then the first blur event after that\r\n    // focus event. When that blur event fires we know that whatever follows is not a result of the\r\n    // touchstart.\r\n    const focusTarget = getTarget(event);\r\n    return this._lastTouchTarget instanceof Node && focusTarget instanceof Node &&\r\n        (focusTarget === this._lastTouchTarget || focusTarget.contains(this._lastTouchTarget));\r\n  }\r\n\r\n  /**\r\n   * Handles focus events on a registered element.\r\n   * @param event The focus event.\r\n   * @param element The monitored element.\r\n   */\r\n  private _onFocus(event: FocusEvent, element: HTMLElement) {\r\n    // NOTE(mmalerba): We currently set the classes based on the focus origin of the most recent\r\n    // focus event affecting the monitored element. If we want to use the origin of the first event\r\n    // instead we should check for the cdk-focused class here and return if the element already has\r\n    // it. (This only matters for elements that have includesChildren = true).\r\n\r\n    // If we are not counting child-element-focus as focused, make sure that the event target is the\r\n    // monitored element itself.\r\n    const elementInfo = this._elementInfo.get(element);\r\n    if (!elementInfo || (!elementInfo.checkChildren && element !== getTarget(event))) {\r\n      return;\r\n    }\r\n\r\n    this._originChanged(element, this._getFocusOrigin(event), elementInfo);\r\n  }\r\n\r\n  /**\r\n   * Handles blur events on a registered element.\r\n   * @param event The blur event.\r\n   * @param element The monitored element.\r\n   */\r\n  _onBlur(event: FocusEvent, element: HTMLElement) {\r\n    // If we are counting child-element-focus as focused, make sure that we aren't just blurring in\r\n    // order to focus another child of the monitored element.\r\n    const elementInfo = this._elementInfo.get(element);\r\n\r\n    if (!elementInfo || (elementInfo.checkChildren && event.relatedTarget instanceof Node &&\r\n        element.contains(event.relatedTarget))) {\r\n      return;\r\n    }\r\n\r\n    this._setClasses(element);\r\n    this._emitOrigin(elementInfo.subject, null);\r\n  }\r\n\r\n  private _emitOrigin(subject: Subject<FocusOrigin>, origin: FocusOrigin) {\r\n    this._ngZone.run(() => subject.next(origin));\r\n  }\r\n\r\n  private _registerGlobalListeners(elementInfo: MonitoredElementInfo) {\r\n    if (!this._platform.isBrowser) {\r\n      return;\r\n    }\r\n\r\n    const rootNode = elementInfo.rootNode;\r\n    const rootNodeFocusListeners = this._rootNodeFocusListenerCount.get(rootNode) || 0;\r\n\r\n    if (!rootNodeFocusListeners) {\r\n      this._ngZone.runOutsideAngular(() => {\r\n        rootNode.addEventListener('focus', this._rootNodeFocusAndBlurListener,\r\n          captureEventListenerOptions);\r\n        rootNode.addEventListener('blur', this._rootNodeFocusAndBlurListener,\r\n          captureEventListenerOptions);\r\n      });\r\n    }\r\n\r\n    this._rootNodeFocusListenerCount.set(rootNode, rootNodeFocusListeners + 1);\r\n\r\n    // Register global listeners when first element is monitored.\r\n    if (++this._monitoredElementCount === 1) {\r\n      // Note: we listen to events in the capture phase so we\r\n      // can detect them even if the user stops propagation.\r\n      this._ngZone.runOutsideAngular(() => {\r\n        const document = this._getDocument();\r\n        const window = this._getWindow();\r\n\r\n        document.addEventListener('keydown', this._documentKeydownListener,\r\n          captureEventListenerOptions);\r\n        document.addEventListener('mousedown', this._documentMousedownListener,\r\n          captureEventListenerOptions);\r\n        document.addEventListener('touchstart', this._documentTouchstartListener,\r\n          captureEventListenerOptions);\r\n        window.addEventListener('focus', this._windowFocusListener);\r\n      });\r\n    }\r\n  }\r\n\r\n  private _removeGlobalListeners(elementInfo: MonitoredElementInfo) {\r\n    const rootNode = elementInfo.rootNode;\r\n\r\n    if (this._rootNodeFocusListenerCount.has(rootNode)) {\r\n      const rootNodeFocusListeners = this._rootNodeFocusListenerCount.get(rootNode)!;\r\n\r\n      if (rootNodeFocusListeners > 1) {\r\n        this._rootNodeFocusListenerCount.set(rootNode, rootNodeFocusListeners - 1);\r\n      } else {\r\n        rootNode.removeEventListener('focus', this._rootNodeFocusAndBlurListener,\r\n          captureEventListenerOptions);\r\n        rootNode.removeEventListener('blur', this._rootNodeFocusAndBlurListener,\r\n          captureEventListenerOptions);\r\n        this._rootNodeFocusListenerCount.delete(rootNode);\r\n      }\r\n    }\r\n\r\n    // Unregister global listeners when last element is unmonitored.\r\n    if (!--this._monitoredElementCount) {\r\n      const document = this._getDocument();\r\n      const window = this._getWindow();\r\n\r\n      document.removeEventListener('keydown', this._documentKeydownListener,\r\n        captureEventListenerOptions);\r\n      document.removeEventListener('mousedown', this._documentMousedownListener,\r\n        captureEventListenerOptions);\r\n      document.removeEventListener('touchstart', this._documentTouchstartListener,\r\n        captureEventListenerOptions);\r\n      window.removeEventListener('focus', this._windowFocusListener);\r\n\r\n      // Clear timeouts for all potentially pending timeouts to prevent the leaks.\r\n      clearTimeout(this._windowFocusTimeoutId);\r\n      clearTimeout(this._touchTimeoutId);\r\n      clearTimeout(this._originTimeoutId);\r\n    }\r\n  }\r\n\r\n  /** Updates all the state on an element once its focus origin has changed. */\r\n  private _originChanged(element: HTMLElement, origin: FocusOrigin,\r\n                         elementInfo: MonitoredElementInfo) {\r\n    this._setClasses(element, origin);\r\n    this._emitOrigin(elementInfo.subject, origin);\r\n    this._lastFocusOrigin = origin;\r\n  }\r\n\r\n  /**\r\n   * Collects the `MonitoredElementInfo` of a particular element and\r\n   * all of its ancestors that have enabled `checkChildren`.\r\n   * @param element Element from which to start the search.\r\n   */\r\n  private _getClosestElementsInfo(element: HTMLElement): [HTMLElement, MonitoredElementInfo][] {\r\n    const results: [HTMLElement, MonitoredElementInfo][] = [];\r\n\r\n    this._elementInfo.forEach((info, currentElement) => {\r\n      if (currentElement === element || (info.checkChildren && currentElement.contains(element))) {\r\n        results.push([currentElement, info]);\r\n      }\r\n    });\r\n\r\n    return results;\r\n  }\r\n}\r\n\r\n/** Gets the target of an event, accounting for Shadow DOM. */\r\nfunction getTarget(event: Event): HTMLElement|null {\r\n  // If an event is bound outside the Shadow DOM, the `event.target` will\r\n  // point to the shadow root so we have to use `composedPath` instead.\r\n  return (event.composedPath ? event.composedPath()[0] : event.target) as HTMLElement | null;\r\n}\r\n\r\n\r\n/**\r\n * Directive that determines how a particular element was focused (via keyboard, mouse, touch, or\r\n * programmatically) and adds corresponding classes to the element.\r\n *\r\n * There are two variants of this directive:\r\n * 1) cdkMonitorElementFocus: does not consider an element to be focused if one of its children is\r\n *    focused.\r\n * 2) cdkMonitorSubtreeFocus: considers an element focused if it or any of its children are focused.\r\n */\r\n@Directive({\r\n  selector: '[cdkMonitorElementFocus], [cdkMonitorSubtreeFocus]',\r\n})\r\nexport class CdkMonitorFocus implements AfterViewInit, OnDestroy {\r\n  private _monitorSubscription: Subscription;\r\n  @Output() cdkFocusChange = new EventEmitter<FocusOrigin>();\r\n\r\n  constructor(private _elementRef: ElementRef<HTMLElement>, private _focusMonitor: FocusMonitor) {}\r\n\r\n  ngAfterViewInit() {\r\n    const element = this._elementRef.nativeElement;\r\n    this._monitorSubscription = this._focusMonitor.monitor(\r\n      element,\r\n      element.nodeType === 1 && element.hasAttribute('cdkMonitorSubtreeFocus'))\r\n    .subscribe(origin => this.cdkFocusChange.emit(origin));\r\n  }\r\n\r\n  ngOnDestroy() {\r\n    this._focusMonitor.stopMonitoring(this._elementRef);\r\n\r\n    if (this._monitorSubscription) {\r\n      this._monitorSubscription.unsubscribe();\r\n    }\r\n  }\r\n}\r\n","/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n\r\nimport {Platform} from '@angular/cdk/platform';\r\nimport {DOCUMENT} from '@angular/common';\r\nimport {Inject, Injectable} from '@angular/core';\r\n\r\n\r\n/** Set of possible high-contrast mode backgrounds. */\r\nexport const enum HighContrastMode {\r\n  NONE,\r\n  BLACK_ON_WHITE,\r\n  WHITE_ON_BLACK,\r\n}\r\n\r\n/** CSS class applied to the document body when in black-on-white high-contrast mode. */\r\nexport const BLACK_ON_WHITE_CSS_CLASS = 'cdk-high-contrast-black-on-white';\r\n\r\n/** CSS class applied to the document body when in white-on-black high-contrast mode. */\r\nexport const WHITE_ON_BLACK_CSS_CLASS = 'cdk-high-contrast-white-on-black';\r\n\r\n/** CSS class applied to the document body when in high-contrast mode. */\r\nexport const HIGH_CONTRAST_MODE_ACTIVE_CSS_CLASS = 'cdk-high-contrast-active';\r\n\r\n/**\r\n * Service to determine whether the browser is currently in a high-contrast-mode environment.\r\n *\r\n * Microsoft Windows supports an accessibility feature called \"High Contrast Mode\". This mode\r\n * changes the appearance of all applications, including web applications, to dramatically increase\r\n * contrast.\r\n *\r\n * IE, Edge, and Firefox currently support this mode. Chrome does not support Windows High Contrast\r\n * Mode. This service does not detect high-contrast mode as added by the Chrome \"High Contrast\"\r\n * browser extension.\r\n */\r\n@Injectable({providedIn: 'root'})\r\nexport class HighContrastModeDetector {\r\n  private _document: Document;\r\n\r\n  constructor(private _platform: Platform, @Inject(DOCUMENT) document: any) {\r\n    this._document = document;\r\n  }\r\n\r\n  /** Gets the current high-contrast-mode for the page. */\r\n  getHighContrastMode(): HighContrastMode {\r\n    if (!this._platform.isBrowser) {\r\n      return HighContrastMode.NONE;\r\n    }\r\n\r\n    // Create a test element with an arbitrary background-color that is neither black nor\r\n    // white; high-contrast mode will coerce the color to either black or white. Also ensure that\r\n    // appending the test element to the DOM does not affect layout by absolutely positioning it\r\n    const testElement = this._document.createElement('div');\r\n    testElement.style.backgroundColor = 'rgb(1,2,3)';\r\n    testElement.style.position = 'absolute';\r\n    this._document.body.appendChild(testElement);\r\n\r\n    // Get the computed style for the background color, collapsing spaces to normalize between\r\n    // browsers. Once we get this color, we no longer need the test element. Access the `window`\r\n    // via the document so we can fake it in tests. Note that we have extra null checks, because\r\n    // this logic will likely run during app bootstrap and throwing can break the entire app.\r\n    const documentWindow = this._document.defaultView || window;\r\n    const computedStyle = (documentWindow && documentWindow.getComputedStyle) ?\r\n        documentWindow.getComputedStyle(testElement) : null;\r\n    const computedColor =\r\n        (computedStyle && computedStyle.backgroundColor || '').replace(/ /g, '');\r\n    this._document.body.removeChild(testElement);\r\n\r\n    switch (computedColor) {\r\n      case 'rgb(0,0,0)': return HighContrastMode.WHITE_ON_BLACK;\r\n      case 'rgb(255,255,255)': return HighContrastMode.BLACK_ON_WHITE;\r\n    }\r\n    return HighContrastMode.NONE;\r\n  }\r\n\r\n  /** Applies CSS classes indicating high-contrast mode to document body (browser-only). */\r\n  _applyBodyHighContrastModeCssClasses(): void {\r\n    if (this._platform.isBrowser && this._document.body) {\r\n      const bodyClasses = this._document.body.classList;\r\n      // IE11 doesn't support `classList` operations with multiple arguments\r\n      bodyClasses.remove(HIGH_CONTRAST_MODE_ACTIVE_CSS_CLASS);\r\n      bodyClasses.remove(BLACK_ON_WHITE_CSS_CLASS);\r\n      bodyClasses.remove(WHITE_ON_BLACK_CSS_CLASS);\r\n\r\n      const mode = this.getHighContrastMode();\r\n      if (mode === HighContrastMode.BLACK_ON_WHITE) {\r\n        bodyClasses.add(HIGH_CONTRAST_MODE_ACTIVE_CSS_CLASS);\r\n        bodyClasses.add(BLACK_ON_WHITE_CSS_CLASS);\r\n      } else if (mode === HighContrastMode.WHITE_ON_BLACK) {\r\n        bodyClasses.add(HIGH_CONTRAST_MODE_ACTIVE_CSS_CLASS);\r\n        bodyClasses.add(WHITE_ON_BLACK_CSS_CLASS);\r\n      }\r\n    }\r\n  }\r\n}\r\n","/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n\r\nimport {ObserversModule} from '@angular/cdk/observers';\r\nimport {PlatformModule} from '@angular/cdk/platform';\r\nimport {NgModule} from '@angular/core';\r\nimport {CdkMonitorFocus} from './focus-monitor/focus-monitor';\r\nimport {CdkTrapFocus} from './focus-trap/focus-trap';\r\nimport {HighContrastModeDetector} from './high-contrast-mode/high-contrast-mode-detector';\r\nimport {CdkAriaLive} from './live-announcer/live-announcer';\r\n\r\n\r\n@NgModule({\r\n  imports: [PlatformModule, ObserversModule],\r\n  declarations: [CdkAriaLive, CdkTrapFocus, CdkMonitorFocus],\r\n  exports: [CdkAriaLive, CdkTrapFocus, CdkMonitorFocus],\r\n})\r\nexport class A11yModule {\r\n  constructor(highContrastModeDetector: HighContrastModeDetector) {\r\n    highContrastModeDetector._applyBodyHighContrastModeCssClasses();\r\n  }\r\n}\r\n","/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\nexport * from './aria-describer/aria-describer';\r\nexport * from './key-manager/activedescendant-key-manager';\r\nexport * from './key-manager/focus-key-manager';\r\nexport * from './key-manager/list-key-manager';\r\nexport * from './focus-trap/configurable-focus-trap';\r\nexport * from './focus-trap/event-listener-inert-strategy';\r\nexport * from './focus-trap/focus-trap';\r\nexport * from './focus-trap/configurable-focus-trap-factory';\r\nexport * from './focus-trap/focus-trap-inert-strategy';\r\nexport * from './interactivity-checker/interactivity-checker';\r\nexport * from './live-announcer/live-announcer';\r\nexport * from './live-announcer/live-announcer-tokens';\r\nexport * from './focus-monitor/focus-monitor';\r\nexport * from './fake-event-detection';\r\nexport * from './a11y-module';\r\nexport {\r\n  HighContrastModeDetector,\r\n  HighContrastMode,\r\n} from './high-contrast-mode/high-contrast-mode-detector';\r\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './public-api';\n\nexport {ConfigurableFocusTrapConfig as ɵangular_material_src_cdk_a11y_a11y_b} from './focus-trap/configurable-focus-trap-config';\nexport {FocusTrapManager as ɵangular_material_src_cdk_a11y_a11y_a} from './focus-trap/focus-trap-manager';"],"names":["observableOf"],"mappings":"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"}