{"version":3,"file":"cdk-observers.umd.js","sources":["../../../../../src/cdk/observers/observe-content.ts","../../../../../src/cdk/observers/public-api.ts","../../../../../src/cdk/observers/index.ts"],"sourcesContent":["/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n\r\nimport {\r\n  coerceBooleanProperty,\r\n  coerceNumberProperty,\r\n  coerceElement,\r\n  BooleanInput,\r\n  NumberInput\r\n} from '@angular/cdk/coercion';\r\nimport {\r\n  AfterContentInit,\r\n  Directive,\r\n  ElementRef,\r\n  EventEmitter,\r\n  Injectable,\r\n  Input,\r\n  NgModule,\r\n  NgZone,\r\n  OnDestroy,\r\n  Output,\r\n} from '@angular/core';\r\nimport {Observable, Subject, Subscription, Observer} from 'rxjs';\r\nimport {debounceTime} from 'rxjs/operators';\r\n\r\n/**\r\n * Factory that creates a new MutationObserver and allows us to stub it out in unit tests.\r\n * @docs-private\r\n */\r\n@Injectable({providedIn: 'root'})\r\nexport class MutationObserverFactory {\r\n  create(callback: MutationCallback): MutationObserver | null {\r\n    return typeof MutationObserver === 'undefined' ? null : new MutationObserver(callback);\r\n  }\r\n}\r\n\r\n\r\n/** An injectable service that allows watching elements for changes to their content. */\r\n@Injectable({providedIn: 'root'})\r\nexport class ContentObserver implements OnDestroy {\r\n  /** Keeps track of the existing MutationObservers so they can be reused. */\r\n  private _observedElements = new Map<Element, {\r\n    observer: MutationObserver | null,\r\n    stream: Subject<MutationRecord[]>,\r\n    count: number\r\n  }>();\r\n\r\n  constructor(private _mutationObserverFactory: MutationObserverFactory) {}\r\n\r\n  ngOnDestroy() {\r\n    this._observedElements.forEach((_, element) => this._cleanupObserver(element));\r\n  }\r\n\r\n  /**\r\n   * Observe content changes on an element.\r\n   * @param element The element to observe for content changes.\r\n   */\r\n  observe(element: Element): Observable<MutationRecord[]>;\r\n\r\n  /**\r\n   * Observe content changes on an element.\r\n   * @param element The element to observe for content changes.\r\n   */\r\n  observe(element: ElementRef<Element>): Observable<MutationRecord[]>;\r\n\r\n  observe(elementOrRef: Element | ElementRef<Element>): Observable<MutationRecord[]> {\r\n    const element = coerceElement(elementOrRef);\r\n\r\n    return new Observable((observer: Observer<MutationRecord[]>) => {\r\n      const stream = this._observeElement(element);\r\n      const subscription = stream.subscribe(observer);\r\n\r\n      return () => {\r\n        subscription.unsubscribe();\r\n        this._unobserveElement(element);\r\n      };\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Observes the given element by using the existing MutationObserver if available, or creating a\r\n   * new one if not.\r\n   */\r\n  private _observeElement(element: Element): Subject<MutationRecord[]> {\r\n    if (!this._observedElements.has(element)) {\r\n      const stream = new Subject<MutationRecord[]>();\r\n      const observer = this._mutationObserverFactory.create(mutations => stream.next(mutations));\r\n      if (observer) {\r\n        observer.observe(element, {\r\n          characterData: true,\r\n          childList: true,\r\n          subtree: true\r\n        });\r\n      }\r\n      this._observedElements.set(element, {observer, stream, count: 1});\r\n    } else {\r\n      this._observedElements.get(element)!.count++;\r\n    }\r\n    return this._observedElements.get(element)!.stream;\r\n  }\r\n\r\n  /**\r\n   * Un-observes the given element and cleans up the underlying MutationObserver if nobody else is\r\n   * observing this element.\r\n   */\r\n  private _unobserveElement(element: Element) {\r\n    if (this._observedElements.has(element)) {\r\n      this._observedElements.get(element)!.count--;\r\n      if (!this._observedElements.get(element)!.count) {\r\n        this._cleanupObserver(element);\r\n      }\r\n    }\r\n  }\r\n\r\n  /** Clean up the underlying MutationObserver for the specified element. */\r\n  private _cleanupObserver(element: Element) {\r\n    if (this._observedElements.has(element)) {\r\n      const {observer, stream} = this._observedElements.get(element)!;\r\n      if (observer) {\r\n        observer.disconnect();\r\n      }\r\n      stream.complete();\r\n      this._observedElements.delete(element);\r\n    }\r\n  }\r\n}\r\n\r\n\r\n/**\r\n * Directive that triggers a callback whenever the content of\r\n * its associated element has changed.\r\n */\r\n@Directive({\r\n  selector: '[cdkObserveContent]',\r\n  exportAs: 'cdkObserveContent',\r\n})\r\nexport class CdkObserveContent implements AfterContentInit, OnDestroy {\r\n  /** Event emitted for each change in the element's content. */\r\n  @Output('cdkObserveContent') event = new EventEmitter<MutationRecord[]>();\r\n\r\n  /**\r\n   * Whether observing content is disabled. This option can be used\r\n   * to disconnect the underlying MutationObserver until it is needed.\r\n   */\r\n  @Input('cdkObserveContentDisabled')\r\n  get disabled() { return this._disabled; }\r\n  set disabled(value: any) {\r\n    this._disabled = coerceBooleanProperty(value);\r\n    this._disabled ? this._unsubscribe() : this._subscribe();\r\n  }\r\n  private _disabled = false;\r\n\r\n  /** Debounce interval for emitting the changes. */\r\n  @Input()\r\n  get debounce(): number { return this._debounce; }\r\n  set debounce(value: number) {\r\n    this._debounce = coerceNumberProperty(value);\r\n    this._subscribe();\r\n  }\r\n  private _debounce: number;\r\n\r\n  private _currentSubscription: Subscription | null = null;\r\n\r\n  constructor(private _contentObserver: ContentObserver,\r\n              private _elementRef: ElementRef<HTMLElement>,\r\n              private _ngZone: NgZone) {}\r\n\r\n  ngAfterContentInit() {\r\n    if (!this._currentSubscription && !this.disabled) {\r\n      this._subscribe();\r\n    }\r\n  }\r\n\r\n  ngOnDestroy() {\r\n    this._unsubscribe();\r\n  }\r\n\r\n  private _subscribe() {\r\n    this._unsubscribe();\r\n    const stream = this._contentObserver.observe(this._elementRef);\r\n\r\n    // TODO(mmalerba): We shouldn't be emitting on this @Output() outside the zone.\r\n    // Consider brining it back inside the zone next time we're making breaking changes.\r\n    // Bringing it back inside can cause things like infinite change detection loops and changed\r\n    // after checked errors if people's code isn't handling it properly.\r\n    this._ngZone.runOutsideAngular(() => {\r\n      this._currentSubscription =\r\n          (this.debounce ? stream.pipe(debounceTime(this.debounce)) : stream).subscribe(this.event);\r\n    });\r\n  }\r\n\r\n  private _unsubscribe() {\r\n    this._currentSubscription?.unsubscribe();\r\n  }\r\n\r\n  static ngAcceptInputType_disabled: BooleanInput;\r\n  static ngAcceptInputType_debounce: NumberInput;\r\n}\r\n\r\n\r\n@NgModule({\r\n  exports: [CdkObserveContent],\r\n  declarations: [CdkObserveContent],\r\n  providers: [MutationObserverFactory]\r\n})\r\nexport class ObserversModule {}\r\n","/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n\r\nexport * from './observe-content';\r\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './public-api';\n"],"names":["Injectable","coerceElement","Observable","Subject","EventEmitter","coerceBooleanProperty","coerceNumberProperty","debounceTime","Directive","ElementRef","NgZone","Output","Input","NgModule"],"mappings":"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"}