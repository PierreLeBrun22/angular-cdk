{"version":3,"file":"cdk-clipboard.umd.js","sources":["../../../../../src/cdk/clipboard/pending-copy.ts","../../../../../src/cdk/clipboard/clipboard.ts","../../../../../src/cdk/clipboard/copy-to-clipboard.ts","../../../../../src/cdk/clipboard/clipboard-module.ts","../../../../../src/cdk/clipboard/public-api.ts","../../../../../src/cdk/clipboard/index.ts"],"sourcesContent":["/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n\r\n/**\r\n * A pending copy-to-clipboard operation.\r\n *\r\n * The implementation of copying text to the clipboard modifies the DOM and\r\n * forces a relayout. This relayout can take too long if the string is large,\r\n * causing the execCommand('copy') to happen too long after the user clicked.\r\n * This results in the browser refusing to copy. This object lets the\r\n * relayout happen in a separate tick from copying by providing a copy function\r\n * that can be called later.\r\n *\r\n * Destroy must be called when no longer in use, regardless of whether `copy` is\r\n * called.\r\n */\r\nexport class PendingCopy {\r\n  private _textarea: HTMLTextAreaElement|undefined;\r\n\r\n  constructor(text: string, private readonly _document: Document) {\r\n    const textarea = this._textarea = this._document.createElement('textarea');\r\n    const styles = textarea.style;\r\n\r\n    // Hide the element for display and accessibility. Set a fixed position so the page layout\r\n    // isn't affected. We use `fixed` with `top: 0`, because focus is moved into the textarea\r\n    // for a split second and if it's off-screen, some browsers will attempt to scroll it into view.\r\n    styles.position = 'fixed';\r\n    styles.top = styles.opacity = '0';\r\n    styles.left = '-999em';\r\n    textarea.setAttribute('aria-hidden', 'true');\r\n    textarea.value = text;\r\n    this._document.body.appendChild(textarea);\r\n  }\r\n\r\n  /** Finishes copying the text. */\r\n  copy(): boolean {\r\n    const textarea = this._textarea;\r\n    let successful = false;\r\n\r\n    try {  // Older browsers could throw if copy is not supported.\r\n      if (textarea) {\r\n        const currentFocus = this._document.activeElement as HTMLOrSVGElement | null;\r\n\r\n        textarea.select();\r\n        textarea.setSelectionRange(0, textarea.value.length);\r\n        successful = this._document.execCommand('copy');\r\n\r\n        if (currentFocus) {\r\n          currentFocus.focus();\r\n        }\r\n      }\r\n    } catch {\r\n      // Discard error.\r\n      // Initial setting of {@code successful} will represent failure here.\r\n    }\r\n\r\n    return successful;\r\n  }\r\n\r\n  /** Cleans up DOM changes used to perform the copy operation. */\r\n  destroy() {\r\n    const textarea = this._textarea;\r\n\r\n    if (textarea) {\r\n      if (textarea.parentNode) {\r\n        textarea.parentNode.removeChild(textarea);\r\n      }\r\n\r\n      this._textarea = undefined;\r\n    }\r\n  }\r\n}\r\n","/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n\r\nimport {DOCUMENT} from '@angular/common';\r\nimport {Inject, Injectable} from '@angular/core';\r\nimport {PendingCopy} from './pending-copy';\r\n\r\n\r\n/**\r\n * A service for copying text to the clipboard.\r\n */\r\n@Injectable({providedIn: 'root'})\r\nexport class Clipboard {\r\n  private readonly _document: Document;\r\n\r\n  constructor(@Inject(DOCUMENT) document: any) {\r\n    this._document = document;\r\n  }\r\n\r\n  /**\r\n   * Copies the provided text into the user's clipboard.\r\n   *\r\n   * @param text The string to copy.\r\n   * @returns Whether the operation was successful.\r\n   */\r\n  copy(text: string): boolean {\r\n    const pendingCopy = this.beginCopy(text);\r\n    const successful = pendingCopy.copy();\r\n    pendingCopy.destroy();\r\n\r\n    return successful;\r\n  }\r\n\r\n  /**\r\n   * Prepares a string to be copied later. This is useful for large strings\r\n   * which take too long to successfully render and be copied in the same tick.\r\n   *\r\n   * The caller must call `destroy` on the returned `PendingCopy`.\r\n   *\r\n   * @param text The string to copy.\r\n   * @returns the pending copy operation.\r\n   */\r\n  beginCopy(text: string): PendingCopy {\r\n    return new PendingCopy(text, this._document);\r\n  }\r\n}\r\n","/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n\r\nimport {\r\n  Directive,\r\n  EventEmitter,\r\n  Input,\r\n  Output,\r\n  NgZone,\r\n  InjectionToken,\r\n  Inject,\r\n  Optional,\r\n  OnDestroy,\r\n} from '@angular/core';\r\nimport {Clipboard} from './clipboard';\r\nimport {PendingCopy} from './pending-copy';\r\n\r\n/** Object that can be used to configure the default options for `CdkCopyToClipboard`. */\r\nexport interface CdkCopyToClipboardConfig {\r\n  /** Default number of attempts to make when copying text to the clipboard. */\r\n  attempts?: number;\r\n}\r\n\r\n/** Injection token that can be used to provide the default options to `CdkCopyToClipboard`. */\r\nexport const CDK_COPY_TO_CLIPBOARD_CONFIG =\r\n    new InjectionToken<CdkCopyToClipboardConfig>('CDK_COPY_TO_CLIPBOARD_CONFIG');\r\n\r\n/**\r\n * @deprecated Use `CDK_COPY_TO_CLIPBOARD_CONFIG` instead.\r\n * @breaking-change 13.0.0\r\n */\r\nexport const CKD_COPY_TO_CLIPBOARD_CONFIG = CDK_COPY_TO_CLIPBOARD_CONFIG;\r\n\r\n/**\r\n * Provides behavior for a button that when clicked copies content into user's\r\n * clipboard.\r\n */\r\n@Directive({\r\n  selector: '[cdkCopyToClipboard]',\r\n  host: {\r\n    '(click)': 'copy()',\r\n  }\r\n})\r\nexport class CdkCopyToClipboard implements OnDestroy {\r\n  /** Content to be copied. */\r\n  @Input('cdkCopyToClipboard') text: string = '';\r\n\r\n  /**\r\n   * How many times to attempt to copy the text. This may be necessary for longer text, because\r\n   * the browser needs time to fill an intermediate textarea element and copy the content.\r\n   */\r\n  @Input('cdkCopyToClipboardAttempts') attempts: number = 1;\r\n\r\n  /**\r\n   * Emits when some text is copied to the clipboard. The\r\n   * emitted value indicates whether copying was successful.\r\n   */\r\n  @Output('cdkCopyToClipboardCopied') copied = new EventEmitter<boolean>();\r\n\r\n  /** Copies that are currently being attempted. */\r\n  private _pending = new Set<PendingCopy>();\r\n\r\n  /** Whether the directive has been destroyed. */\r\n  private _destroyed: boolean;\r\n\r\n  /** Timeout for the current copy attempt. */\r\n  private _currentTimeout: any;\r\n\r\n  constructor(\r\n    private _clipboard: Clipboard,\r\n    private _ngZone: NgZone,\r\n    @Optional() @Inject(CKD_COPY_TO_CLIPBOARD_CONFIG) config?: CdkCopyToClipboardConfig) {\r\n\r\n    if (config && config.attempts != null) {\r\n      this.attempts = config.attempts;\r\n    }\r\n  }\r\n\r\n  /** Copies the current text to the clipboard. */\r\n  copy(attempts: number = this.attempts): void {\r\n    if (attempts > 1) {\r\n      let remainingAttempts = attempts;\r\n      const pending = this._clipboard.beginCopy(this.text);\r\n      this._pending.add(pending);\r\n\r\n      const attempt = () => {\r\n        const successful = pending.copy();\r\n        if (!successful && --remainingAttempts && !this._destroyed) {\r\n          // We use 1 for the timeout since it's more predictable when flushing in unit tests.\r\n          this._currentTimeout = this._ngZone.runOutsideAngular(() => setTimeout(attempt, 1));\r\n        } else {\r\n          this._currentTimeout = null;\r\n          this._pending.delete(pending);\r\n          pending.destroy();\r\n          this.copied.emit(successful);\r\n        }\r\n      };\r\n      attempt();\r\n    } else {\r\n      this.copied.emit(this._clipboard.copy(this.text));\r\n    }\r\n  }\r\n\r\n  ngOnDestroy() {\r\n    if (this._currentTimeout) {\r\n      clearTimeout(this._currentTimeout);\r\n    }\r\n\r\n    this._pending.forEach(copy => copy.destroy());\r\n    this._pending.clear();\r\n    this._destroyed = true;\r\n  }\r\n}\r\n","/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n\r\nimport {NgModule} from '@angular/core';\r\n\r\nimport {CdkCopyToClipboard} from './copy-to-clipboard';\r\n\r\n@NgModule({\r\n  declarations: [CdkCopyToClipboard],\r\n  exports: [CdkCopyToClipboard],\r\n})\r\nexport class ClipboardModule {\r\n}\r\n","/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n\r\nexport * from './clipboard';\r\nexport * from './clipboard-module';\r\nexport * from './copy-to-clipboard';\r\nexport * from './pending-copy';\r\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './public-api';\n"],"names":["Injectable","Inject","DOCUMENT","InjectionToken","EventEmitter","Directive","NgZone","Optional","Input","Output","NgModule"],"mappings":"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"}