{"version":3,"file":"cdk-overlay.umd.js","sources":["../../../../../external/npm/node_modules/tslib/tslib.es6.js","../../../../../src/cdk/overlay/scroll/block-scroll-strategy.ts","../../../../../src/cdk/overlay/scroll/scroll-strategy.ts","../../../../../src/cdk/overlay/scroll/close-scroll-strategy.ts","../../../../../src/cdk/overlay/scroll/noop-scroll-strategy.ts","../../../../../src/cdk/overlay/position/scroll-clip.ts","../../../../../src/cdk/overlay/scroll/reposition-scroll-strategy.ts","../../../../../src/cdk/overlay/scroll/scroll-strategy-options.ts","../../../../../src/cdk/overlay/scroll/index.ts","../../../../../src/cdk/overlay/overlay-config.ts","../../../../../src/cdk/overlay/position/connected-position.ts","../../../../../src/cdk/overlay/dispatchers/base-overlay-dispatcher.ts","../../../../../src/cdk/overlay/dispatchers/overlay-keyboard-dispatcher.ts","../../../../../src/cdk/overlay/dispatchers/overlay-outside-click-dispatcher.ts","../../../../../src/cdk/overlay/overlay-container.ts","../../../../../src/cdk/overlay/overlay-ref.ts","../../../../../src/cdk/overlay/position/flexible-connected-position-strategy.ts","../../../../../src/cdk/overlay/position/connected-position-strategy.ts","../../../../../src/cdk/overlay/position/global-position-strategy.ts","../../../../../src/cdk/overlay/position/overlay-position-builder.ts","../../../../../src/cdk/overlay/overlay.ts","../../../../../src/cdk/overlay/overlay-directives.ts","../../../../../src/cdk/overlay/overlay-module.ts","../../../../../src/cdk/overlay/dispatchers/index.ts","../../../../../src/cdk/overlay/fullscreen-overlay-container.ts","../../../../../src/cdk/overlay/public-api.ts","../../../../../src/cdk/overlay/index.ts"],"sourcesContent":["/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation.\r\n\r\nPermission to use, copy, modify, and/or distribute this software for any\r\npurpose with or without fee is hereby granted.\r\n\r\nTHE SOFTWARE IS PROVIDED \"AS IS\" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH\r\nREGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY\r\nAND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,\r\nINDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM\r\nLOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR\r\nOTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR\r\nPERFORMANCE OF THIS SOFTWARE.\r\n***************************************************************************** */\r\n/* global Reflect, Promise */\r\n\r\nvar extendStatics = function(d, b) {\r\n    extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };\r\n    return extendStatics(d, b);\r\n};\r\n\r\nexport function __extends(d, b) {\r\n    if (typeof b !== \"function\" && b !== null)\r\n        throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\r\n    extendStatics(d, b);\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n}\r\n\r\nexport var __assign = function() {\r\n    __assign = Object.assign || function __assign(t) {\r\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n            s = arguments[i];\r\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n        }\r\n        return t;\r\n    }\r\n    return __assign.apply(this, arguments);\r\n}\r\n\r\nexport function __rest(s, e) {\r\n    var t = {};\r\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n        t[p] = s[p];\r\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\r\n            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))\r\n                t[p[i]] = s[p[i]];\r\n        }\r\n    return t;\r\n}\r\n\r\nexport function __decorate(decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n}\r\n\r\nexport function __param(paramIndex, decorator) {\r\n    return function (target, key) { decorator(target, key, paramIndex); }\r\n}\r\n\r\nexport function __metadata(metadataKey, metadataValue) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\r\n}\r\n\r\nexport function __awaiter(thisArg, _arguments, P, generator) {\r\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n}\r\n\r\nexport function __generator(thisArg, body) {\r\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n    function verb(n) { return function (v) { return step([n, v]); }; }\r\n    function step(op) {\r\n        if (f) throw new TypeError(\"Generator is already executing.\");\r\n        while (_) try {\r\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\r\n            if (y = 0, t) op = [op[0] & 2, t.value];\r\n            switch (op[0]) {\r\n                case 0: case 1: t = op; break;\r\n                case 4: _.label++; return { value: op[1], done: false };\r\n                case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                default:\r\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                    if (t[2]) _.ops.pop();\r\n                    _.trys.pop(); continue;\r\n            }\r\n            op = body.call(thisArg, _);\r\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n    }\r\n}\r\n\r\nexport var __createBinding = Object.create ? (function(o, m, k, k2) {\r\n    if (k2 === undefined) k2 = k;\r\n    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });\r\n}) : (function(o, m, k, k2) {\r\n    if (k2 === undefined) k2 = k;\r\n    o[k2] = m[k];\r\n});\r\n\r\nexport function __exportStar(m, o) {\r\n    for (var p in m) if (p !== \"default\" && !Object.prototype.hasOwnProperty.call(o, p)) __createBinding(o, m, p);\r\n}\r\n\r\nexport function __values(o) {\r\n    var s = typeof Symbol === \"function\" && Symbol.iterator, m = s && o[s], i = 0;\r\n    if (m) return m.call(o);\r\n    if (o && typeof o.length === \"number\") return {\r\n        next: function () {\r\n            if (o && i >= o.length) o = void 0;\r\n            return { value: o && o[i++], done: !o };\r\n        }\r\n    };\r\n    throw new TypeError(s ? \"Object is not iterable.\" : \"Symbol.iterator is not defined.\");\r\n}\r\n\r\nexport function __read(o, n) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\r\n    if (!m) return o;\r\n    var i = m.call(o), r, ar = [], e;\r\n    try {\r\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\r\n    }\r\n    catch (error) { e = { error: error }; }\r\n    finally {\r\n        try {\r\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\r\n        }\r\n        finally { if (e) throw e.error; }\r\n    }\r\n    return ar;\r\n}\r\n\r\n/** @deprecated */\r\nexport function __spread() {\r\n    for (var ar = [], i = 0; i < arguments.length; i++)\r\n        ar = ar.concat(__read(arguments[i]));\r\n    return ar;\r\n}\r\n\r\n/** @deprecated */\r\nexport function __spreadArrays() {\r\n    for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;\r\n    for (var r = Array(s), k = 0, i = 0; i < il; i++)\r\n        for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)\r\n            r[k] = a[j];\r\n    return r;\r\n}\r\n\r\nexport function __spreadArray(to, from) {\r\n    for (var i = 0, il = from.length, j = to.length; i < il; i++, j++)\r\n        to[j] = from[i];\r\n    return to;\r\n}\r\n\r\nexport function __await(v) {\r\n    return this instanceof __await ? (this.v = v, this) : new __await(v);\r\n}\r\n\r\nexport function __asyncGenerator(thisArg, _arguments, generator) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var g = generator.apply(thisArg, _arguments || []), i, q = [];\r\n    return i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i;\r\n    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }\r\n    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\r\n    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }\r\n    function fulfill(value) { resume(\"next\", value); }\r\n    function reject(value) { resume(\"throw\", value); }\r\n    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\r\n}\r\n\r\nexport function __asyncDelegator(o) {\r\n    var i, p;\r\n    return i = {}, verb(\"next\"), verb(\"throw\", function (e) { throw e; }), verb(\"return\"), i[Symbol.iterator] = function () { return this; }, i;\r\n    function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === \"return\" } : f ? f(v) : v; } : f; }\r\n}\r\n\r\nexport function __asyncValues(o) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var m = o[Symbol.asyncIterator], i;\r\n    return m ? m.call(o) : (o = typeof __values === \"function\" ? __values(o) : o[Symbol.iterator](), i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i);\r\n    function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }\r\n    function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }\r\n}\r\n\r\nexport function __makeTemplateObject(cooked, raw) {\r\n    if (Object.defineProperty) { Object.defineProperty(cooked, \"raw\", { value: raw }); } else { cooked.raw = raw; }\r\n    return cooked;\r\n};\r\n\r\nvar __setModuleDefault = Object.create ? (function(o, v) {\r\n    Object.defineProperty(o, \"default\", { enumerable: true, value: v });\r\n}) : function(o, v) {\r\n    o[\"default\"] = v;\r\n};\r\n\r\nexport function __importStar(mod) {\r\n    if (mod && mod.__esModule) return mod;\r\n    var result = {};\r\n    if (mod != null) for (var k in mod) if (k !== \"default\" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\r\n    __setModuleDefault(result, mod);\r\n    return result;\r\n}\r\n\r\nexport function __importDefault(mod) {\r\n    return (mod && mod.__esModule) ? mod : { default: mod };\r\n}\r\n\r\nexport function __classPrivateFieldGet(receiver, privateMap) {\r\n    if (!privateMap.has(receiver)) {\r\n        throw new TypeError(\"attempted to get private field on non-instance\");\r\n    }\r\n    return privateMap.get(receiver);\r\n}\r\n\r\nexport function __classPrivateFieldSet(receiver, privateMap, value) {\r\n    if (!privateMap.has(receiver)) {\r\n        throw new TypeError(\"attempted to set private field on non-instance\");\r\n    }\r\n    privateMap.set(receiver, value);\r\n    return value;\r\n}\r\n","/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n\r\nimport {ScrollStrategy} from './scroll-strategy';\r\nimport {ViewportRuler} from '@angular/cdk/scrolling';\r\nimport {coerceCssPixelValue} from '@angular/cdk/coercion';\r\nimport {supportsScrollBehavior} from '@angular/cdk/platform';\r\n\r\nconst scrollBehaviorSupported = supportsScrollBehavior();\r\n\r\n/**\r\n * Strategy that will prevent the user from scrolling while the overlay is visible.\r\n */\r\nexport class BlockScrollStrategy implements ScrollStrategy {\r\n  private _previousHTMLStyles = {top: '', left: ''};\r\n  private _previousScrollPosition: {top: number, left: number};\r\n  private _isEnabled = false;\r\n  private _document: Document;\r\n\r\n  constructor(private _viewportRuler: ViewportRuler, document: any) {\r\n    this._document = document;\r\n  }\r\n\r\n  /** Attaches this scroll strategy to an overlay. */\r\n  attach() {}\r\n\r\n  /** Blocks page-level scroll while the attached overlay is open. */\r\n  enable() {\r\n    if (this._canBeEnabled()) {\r\n      const root = this._document.documentElement!;\r\n\r\n      this._previousScrollPosition = this._viewportRuler.getViewportScrollPosition();\r\n\r\n      // Cache the previous inline styles in case the user had set them.\r\n      this._previousHTMLStyles.left = root.style.left || '';\r\n      this._previousHTMLStyles.top = root.style.top || '';\r\n\r\n      // Note: we're using the `html` node, instead of the `body`, because the `body` may\r\n      // have the user agent margin, whereas the `html` is guaranteed not to have one.\r\n      root.style.left = coerceCssPixelValue(-this._previousScrollPosition.left);\r\n      root.style.top = coerceCssPixelValue(-this._previousScrollPosition.top);\r\n      root.classList.add('cdk-global-scrollblock');\r\n      this._isEnabled = true;\r\n    }\r\n  }\r\n\r\n  /** Unblocks page-level scroll while the attached overlay is open. */\r\n  disable() {\r\n    if (this._isEnabled) {\r\n      const html = this._document.documentElement!;\r\n      const body = this._document.body!;\r\n      const htmlStyle = html.style;\r\n      const bodyStyle = body.style;\r\n      const previousHtmlScrollBehavior = htmlStyle.scrollBehavior || '';\r\n      const previousBodyScrollBehavior = bodyStyle.scrollBehavior || '';\r\n\r\n      this._isEnabled = false;\r\n\r\n      htmlStyle.left = this._previousHTMLStyles.left;\r\n      htmlStyle.top = this._previousHTMLStyles.top;\r\n      html.classList.remove('cdk-global-scrollblock');\r\n\r\n      // Disable user-defined smooth scrolling temporarily while we restore the scroll position.\r\n      // See https://developer.mozilla.org/en-US/docs/Web/CSS/scroll-behavior\r\n      // Note that we don't mutate the property if the browser doesn't support `scroll-behavior`,\r\n      // because it can throw off feature detections in `supportsScrollBehavior` which\r\n      // checks for `'scrollBehavior' in documentElement.style`.\r\n      if (scrollBehaviorSupported) {\r\n        htmlStyle.scrollBehavior = bodyStyle.scrollBehavior = 'auto';\r\n      }\r\n\r\n      window.scroll(this._previousScrollPosition.left, this._previousScrollPosition.top);\r\n\r\n      if (scrollBehaviorSupported) {\r\n        htmlStyle.scrollBehavior = previousHtmlScrollBehavior;\r\n        bodyStyle.scrollBehavior = previousBodyScrollBehavior;\r\n      }\r\n    }\r\n  }\r\n\r\n  private _canBeEnabled(): boolean {\r\n    // Since the scroll strategies can't be singletons, we have to use a global CSS class\r\n    // (`cdk-global-scrollblock`) to make sure that we don't try to disable global\r\n    // scrolling multiple times.\r\n    const html = this._document.documentElement!;\r\n\r\n    if (html.classList.contains('cdk-global-scrollblock') || this._isEnabled) {\r\n      return false;\r\n    }\r\n\r\n    const body = this._document.body;\r\n    const viewport = this._viewportRuler.getViewportSize();\r\n    return body.scrollHeight > viewport.height || body.scrollWidth > viewport.width;\r\n  }\r\n}\r\n","/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n\r\nimport {OverlayReference} from '../overlay-reference';\r\n\r\n/**\r\n * Describes a strategy that will be used by an overlay to handle scroll events while it is open.\r\n */\r\nexport interface ScrollStrategy {\r\n  /** Enable this scroll strategy (called when the attached overlay is attached to a portal). */\r\n  enable: () => void;\r\n\r\n  /** Disable this scroll strategy (called when the attached overlay is detached from a portal). */\r\n  disable: () => void;\r\n\r\n  /** Attaches this `ScrollStrategy` to an overlay. */\r\n  attach: (overlayRef: OverlayReference) => void;\r\n\r\n  /** Detaches the scroll strategy from the current overlay. */\r\n  detach?: () => void;\r\n}\r\n\r\n/**\r\n * Returns an error to be thrown when attempting to attach an already-attached scroll strategy.\r\n */\r\nexport function getMatScrollStrategyAlreadyAttachedError(): Error {\r\n  return Error(`Scroll strategy has already been attached.`);\r\n}\r\n","/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\nimport {NgZone} from '@angular/core';\r\nimport {ScrollStrategy, getMatScrollStrategyAlreadyAttachedError} from './scroll-strategy';\r\nimport {OverlayReference} from '../overlay-reference';\r\nimport {Subscription} from 'rxjs';\r\nimport {ScrollDispatcher, ViewportRuler} from '@angular/cdk/scrolling';\r\n\r\n/**\r\n * Config options for the CloseScrollStrategy.\r\n */\r\nexport interface CloseScrollStrategyConfig {\r\n  /** Amount of pixels the user has to scroll before the overlay is closed. */\r\n  threshold?: number;\r\n}\r\n\r\n/**\r\n * Strategy that will close the overlay as soon as the user starts scrolling.\r\n */\r\nexport class CloseScrollStrategy implements ScrollStrategy {\r\n  private _scrollSubscription: Subscription|null = null;\r\n  private _overlayRef: OverlayReference;\r\n  private _initialScrollPosition: number;\r\n\r\n  constructor(\r\n    private _scrollDispatcher: ScrollDispatcher,\r\n    private _ngZone: NgZone,\r\n    private _viewportRuler: ViewportRuler,\r\n    private _config?: CloseScrollStrategyConfig) {}\r\n\r\n  /** Attaches this scroll strategy to an overlay. */\r\n  attach(overlayRef: OverlayReference) {\r\n    if (this._overlayRef && (typeof ngDevMode === 'undefined' || ngDevMode)) {\r\n      throw getMatScrollStrategyAlreadyAttachedError();\r\n    }\r\n\r\n    this._overlayRef = overlayRef;\r\n  }\r\n\r\n  /** Enables the closing of the attached overlay on scroll. */\r\n  enable() {\r\n    if (this._scrollSubscription) {\r\n      return;\r\n    }\r\n\r\n    const stream = this._scrollDispatcher.scrolled(0);\r\n\r\n    if (this._config && this._config.threshold && this._config.threshold > 1) {\r\n      this._initialScrollPosition = this._viewportRuler.getViewportScrollPosition().top;\r\n\r\n      this._scrollSubscription = stream.subscribe(() => {\r\n        const scrollPosition = this._viewportRuler.getViewportScrollPosition().top;\r\n\r\n        if (Math.abs(scrollPosition - this._initialScrollPosition) > this._config!.threshold!) {\r\n          this._detach();\r\n        } else {\r\n          this._overlayRef.updatePosition();\r\n        }\r\n      });\r\n    } else {\r\n      this._scrollSubscription = stream.subscribe(this._detach);\r\n    }\r\n  }\r\n\r\n  /** Disables the closing the attached overlay on scroll. */\r\n  disable() {\r\n    if (this._scrollSubscription) {\r\n      this._scrollSubscription.unsubscribe();\r\n      this._scrollSubscription = null;\r\n    }\r\n  }\r\n\r\n  detach() {\r\n    this.disable();\r\n    this._overlayRef = null!;\r\n  }\r\n\r\n  /** Detaches the overlay ref and disables the scroll strategy. */\r\n  private _detach = () => {\r\n    this.disable();\r\n\r\n    if (this._overlayRef.hasAttached()) {\r\n      this._ngZone.run(() => this._overlayRef.detach());\r\n    }\r\n  }\r\n}\r\n","/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n\r\nimport {ScrollStrategy} from './scroll-strategy';\r\n\r\n/** Scroll strategy that doesn't do anything. */\r\nexport class NoopScrollStrategy implements ScrollStrategy {\r\n  /** Does nothing, as this scroll strategy is a no-op. */\r\n  enable() { }\r\n  /** Does nothing, as this scroll strategy is a no-op. */\r\n  disable() { }\r\n  /** Does nothing, as this scroll strategy is a no-op. */\r\n  attach() { }\r\n}\r\n","/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n\r\n// TODO(jelbourn): move this to live with the rest of the scrolling code\r\n// TODO(jelbourn): someday replace this with IntersectionObservers\r\n\r\n/**\r\n * Gets whether an element is scrolled outside of view by any of its parent scrolling containers.\r\n * @param element Dimensions of the element (from getBoundingClientRect)\r\n * @param scrollContainers Dimensions of element's scrolling containers (from getBoundingClientRect)\r\n * @returns Whether the element is scrolled out of view\r\n * @docs-private\r\n */\r\nexport function isElementScrolledOutsideView(element: ClientRect, scrollContainers: ClientRect[]) {\r\n  return scrollContainers.some(containerBounds => {\r\n    const outsideAbove = element.bottom < containerBounds.top;\r\n    const outsideBelow = element.top > containerBounds.bottom;\r\n    const outsideLeft = element.right < containerBounds.left;\r\n    const outsideRight = element.left > containerBounds.right;\r\n\r\n    return outsideAbove || outsideBelow || outsideLeft || outsideRight;\r\n  });\r\n}\r\n\r\n\r\n/**\r\n * Gets whether an element is clipped by any of its scrolling containers.\r\n * @param element Dimensions of the element (from getBoundingClientRect)\r\n * @param scrollContainers Dimensions of element's scrolling containers (from getBoundingClientRect)\r\n * @returns Whether the element is clipped\r\n * @docs-private\r\n */\r\nexport function isElementClippedByScrolling(element: ClientRect, scrollContainers: ClientRect[]) {\r\n  return scrollContainers.some(scrollContainerRect => {\r\n    const clippedAbove = element.top < scrollContainerRect.top;\r\n    const clippedBelow = element.bottom > scrollContainerRect.bottom;\r\n    const clippedLeft = element.left < scrollContainerRect.left;\r\n    const clippedRight = element.right > scrollContainerRect.right;\r\n\r\n    return clippedAbove || clippedBelow || clippedLeft || clippedRight;\r\n  });\r\n}\r\n","/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n\r\nimport {NgZone} from '@angular/core';\r\nimport {Subscription} from 'rxjs';\r\nimport {ScrollStrategy, getMatScrollStrategyAlreadyAttachedError} from './scroll-strategy';\r\nimport {OverlayReference} from '../overlay-reference';\r\nimport {ScrollDispatcher, ViewportRuler} from '@angular/cdk/scrolling';\r\nimport {isElementScrolledOutsideView} from '../position/scroll-clip';\r\n\r\n/**\r\n * Config options for the RepositionScrollStrategy.\r\n */\r\nexport interface RepositionScrollStrategyConfig {\r\n  /** Time in milliseconds to throttle the scroll events. */\r\n  scrollThrottle?: number;\r\n\r\n  /** Whether to close the overlay once the user has scrolled away completely. */\r\n  autoClose?: boolean;\r\n}\r\n\r\n/**\r\n * Strategy that will update the element position as the user is scrolling.\r\n */\r\nexport class RepositionScrollStrategy implements ScrollStrategy {\r\n  private _scrollSubscription: Subscription|null = null;\r\n  private _overlayRef: OverlayReference;\r\n\r\n  constructor(\r\n    private _scrollDispatcher: ScrollDispatcher,\r\n    private _viewportRuler: ViewportRuler,\r\n    private _ngZone: NgZone,\r\n    private _config?: RepositionScrollStrategyConfig) { }\r\n\r\n  /** Attaches this scroll strategy to an overlay. */\r\n  attach(overlayRef: OverlayReference) {\r\n    if (this._overlayRef && (typeof ngDevMode === 'undefined' || ngDevMode)) {\r\n      throw getMatScrollStrategyAlreadyAttachedError();\r\n    }\r\n\r\n    this._overlayRef = overlayRef;\r\n  }\r\n\r\n  /** Enables repositioning of the attached overlay on scroll. */\r\n  enable() {\r\n    if (!this._scrollSubscription) {\r\n      const throttle = this._config ? this._config.scrollThrottle : 0;\r\n\r\n      this._scrollSubscription = this._scrollDispatcher.scrolled(throttle).subscribe(() => {\r\n        this._overlayRef.updatePosition();\r\n\r\n        // TODO(crisbeto): make `close` on by default once all components can handle it.\r\n        if (this._config && this._config.autoClose) {\r\n          const overlayRect = this._overlayRef.overlayElement.getBoundingClientRect();\r\n          const {width, height} = this._viewportRuler.getViewportSize();\r\n\r\n          // TODO(crisbeto): include all ancestor scroll containers here once\r\n          // we have a way of exposing the trigger element to the scroll strategy.\r\n          const parentRects = [{width, height, bottom: height, right: width, top: 0, left: 0}];\r\n\r\n          if (isElementScrolledOutsideView(overlayRect, parentRects)) {\r\n            this.disable();\r\n            this._ngZone.run(() => this._overlayRef.detach());\r\n          }\r\n        }\r\n      });\r\n    }\r\n  }\r\n\r\n  /** Disables repositioning of the attached overlay on scroll. */\r\n  disable() {\r\n    if (this._scrollSubscription) {\r\n      this._scrollSubscription.unsubscribe();\r\n      this._scrollSubscription = null;\r\n    }\r\n  }\r\n\r\n  detach() {\r\n    this.disable();\r\n    this._overlayRef = null!;\r\n  }\r\n}\r\n","/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n\r\nimport {ScrollDispatcher, ViewportRuler} from '@angular/cdk/scrolling';\r\nimport {DOCUMENT} from '@angular/common';\r\nimport {Inject, Injectable, NgZone} from '@angular/core';\r\nimport {BlockScrollStrategy} from './block-scroll-strategy';\r\nimport {CloseScrollStrategy, CloseScrollStrategyConfig} from './close-scroll-strategy';\r\nimport {NoopScrollStrategy} from './noop-scroll-strategy';\r\nimport {\r\n  RepositionScrollStrategy,\r\n  RepositionScrollStrategyConfig,\r\n} from './reposition-scroll-strategy';\r\n\r\n\r\n/**\r\n * Options for how an overlay will handle scrolling.\r\n *\r\n * Users can provide a custom value for `ScrollStrategyOptions` to replace the default\r\n * behaviors. This class primarily acts as a factory for ScrollStrategy instances.\r\n */\r\n@Injectable({providedIn: 'root'})\r\nexport class ScrollStrategyOptions {\r\n  private _document: Document;\r\n\r\n  constructor(\r\n    private _scrollDispatcher: ScrollDispatcher,\r\n    private _viewportRuler: ViewportRuler,\r\n    private _ngZone: NgZone,\r\n    @Inject(DOCUMENT) document: any) {\r\n      this._document = document;\r\n    }\r\n\r\n  /** Do nothing on scroll. */\r\n  noop = () => new NoopScrollStrategy();\r\n\r\n  /**\r\n   * Close the overlay as soon as the user scrolls.\r\n   * @param config Configuration to be used inside the scroll strategy.\r\n   */\r\n  close = (config?: CloseScrollStrategyConfig) => new CloseScrollStrategy(this._scrollDispatcher,\r\n      this._ngZone, this._viewportRuler, config)\r\n\r\n  /** Block scrolling. */\r\n  block = () => new BlockScrollStrategy(this._viewportRuler, this._document);\r\n\r\n  /**\r\n   * Update the overlay's position on scroll.\r\n   * @param config Configuration to be used inside the scroll strategy.\r\n   * Allows debouncing the reposition calls.\r\n   */\r\n  reposition = (config?: RepositionScrollStrategyConfig) => new RepositionScrollStrategy(\r\n      this._scrollDispatcher, this._viewportRuler, this._ngZone, config)\r\n}\r\n","/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n\r\nexport {CdkScrollable, ScrollDispatcher} from '@angular/cdk/scrolling';\r\n\r\n// Export pre-defined scroll strategies and interface to build custom ones.\r\nexport {ScrollStrategy} from './scroll-strategy';\r\nexport {ScrollStrategyOptions} from './scroll-strategy-options';\r\nexport {\r\n  RepositionScrollStrategy,\r\n  RepositionScrollStrategyConfig\r\n} from './reposition-scroll-strategy';\r\nexport {CloseScrollStrategy} from './close-scroll-strategy';\r\nexport {NoopScrollStrategy} from './noop-scroll-strategy';\r\nexport {BlockScrollStrategy} from './block-scroll-strategy';\r\n","/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n\r\nimport {PositionStrategy} from './position/position-strategy';\r\nimport {Direction, Directionality} from '@angular/cdk/bidi';\r\nimport {ScrollStrategy, NoopScrollStrategy} from './scroll/index';\r\n\r\n\r\n/** Initial configuration used when creating an overlay. */\r\nexport class OverlayConfig {\r\n  /** Strategy with which to position the overlay. */\r\n  positionStrategy?: PositionStrategy;\r\n\r\n  /** Strategy to be used when handling scroll events while the overlay is open. */\r\n  scrollStrategy?: ScrollStrategy = new NoopScrollStrategy();\r\n\r\n  /** Custom class to add to the overlay pane. */\r\n  panelClass?: string | string[] = '';\r\n\r\n  /** Whether the overlay has a backdrop. */\r\n  hasBackdrop?: boolean = false;\r\n\r\n  /** Custom class to add to the backdrop */\r\n  backdropClass?: string | string[] = 'cdk-overlay-dark-backdrop';\r\n\r\n  /** The width of the overlay panel. If a number is provided, pixel units are assumed. */\r\n  width?: number | string;\r\n\r\n  /** The height of the overlay panel. If a number is provided, pixel units are assumed. */\r\n  height?: number | string;\r\n\r\n  /** The min-width of the overlay panel. If a number is provided, pixel units are assumed. */\r\n  minWidth?: number | string;\r\n\r\n  /** The min-height of the overlay panel. If a number is provided, pixel units are assumed. */\r\n  minHeight?: number | string;\r\n\r\n  /** The max-width of the overlay panel. If a number is provided, pixel units are assumed. */\r\n  maxWidth?: number | string;\r\n\r\n  /** The max-height of the overlay panel. If a number is provided, pixel units are assumed. */\r\n  maxHeight?: number | string;\r\n\r\n  /**\r\n   * Direction of the text in the overlay panel. If a `Directionality` instance\r\n   * is passed in, the overlay will handle changes to its value automatically.\r\n   */\r\n  direction?: Direction | Directionality;\r\n\r\n  /**\r\n   * Whether the overlay should be disposed of when the user goes backwards/forwards in history.\r\n   * Note that this usually doesn't include clicking on links (unless the user is using\r\n   * the `HashLocationStrategy`).\r\n   */\r\n  disposeOnNavigation?: boolean = false;\r\n\r\n  constructor(config?: OverlayConfig) {\r\n    if (config) {\r\n      // Use `Iterable` instead of `Array` because TypeScript, as of 3.6.3,\r\n      // loses the array generic type in the `for of`. But we *also* have to use `Array` because\r\n      // typescript won't iterate over an `Iterable` unless you compile with `--downlevelIteration`\r\n      const configKeys =\r\n          Object.keys(config) as Iterable<keyof OverlayConfig> & (keyof OverlayConfig)[];\r\n      for (const key of configKeys) {\r\n        if (config[key] !== undefined) {\r\n          // TypeScript, as of version 3.5, sees the left-hand-side of this expression\r\n          // as \"I don't know *which* key this is, so the only valid value is the intersection\r\n          // of all the posible values.\" In this case, that happens to be `undefined`. TypeScript\r\n          // is not smart enough to see that the right-hand-side is actually an access of the same\r\n          // exact type with the same exact key, meaning that the value type must be identical.\r\n          // So we use `any` to work around this.\r\n          this[key] = config[key] as any;\r\n        }\r\n      }\r\n    }\r\n  }\r\n}\r\n","/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n\r\n/** Horizontal dimension of a connection point on the perimeter of the origin or overlay element. */\r\nimport {Optional} from '@angular/core';\r\nexport type HorizontalConnectionPos = 'start' | 'center' | 'end';\r\n\r\n/** Vertical dimension of a connection point on the perimeter of the origin or overlay element. */\r\nexport type VerticalConnectionPos = 'top' | 'center' | 'bottom';\r\n\r\n\r\n/** A connection point on the origin element. */\r\nexport interface OriginConnectionPosition {\r\n  originX: HorizontalConnectionPos;\r\n  originY: VerticalConnectionPos;\r\n}\r\n\r\n/** A connection point on the overlay element. */\r\nexport interface OverlayConnectionPosition {\r\n  overlayX: HorizontalConnectionPos;\r\n  overlayY: VerticalConnectionPos;\r\n}\r\n\r\n/** The points of the origin element and the overlay element to connect. */\r\nexport class ConnectionPositionPair {\r\n  /** X-axis attachment point for connected overlay origin. Can be 'start', 'end', or 'center'. */\r\n  originX: HorizontalConnectionPos;\r\n  /** Y-axis attachment point for connected overlay origin. Can be 'top', 'bottom', or 'center'. */\r\n  originY: VerticalConnectionPos;\r\n  /** X-axis attachment point for connected overlay. Can be 'start', 'end', or 'center'. */\r\n  overlayX: HorizontalConnectionPos;\r\n  /** Y-axis attachment point for connected overlay. Can be 'top', 'bottom', or 'center'. */\r\n  overlayY: VerticalConnectionPos;\r\n\r\n  constructor(\r\n    origin: OriginConnectionPosition,\r\n    overlay: OverlayConnectionPosition,\r\n    /** Offset along the X axis. */\r\n    public offsetX?: number,\r\n    /** Offset along the Y axis. */\r\n    public offsetY?: number,\r\n    /** Class(es) to be applied to the panel while this position is active. */\r\n    public panelClass?: string | string[]) {\r\n\r\n    this.originX = origin.originX;\r\n    this.originY = origin.originY;\r\n    this.overlayX = overlay.overlayX;\r\n    this.overlayY = overlay.overlayY;\r\n  }\r\n}\r\n\r\n/**\r\n * Set of properties regarding the position of the origin and overlay relative to the viewport\r\n * with respect to the containing Scrollable elements.\r\n *\r\n * The overlay and origin are clipped if any part of their bounding client rectangle exceeds the\r\n * bounds of any one of the strategy's Scrollable's bounding client rectangle.\r\n *\r\n * The overlay and origin are outside view if there is no overlap between their bounding client\r\n * rectangle and any one of the strategy's Scrollable's bounding client rectangle.\r\n *\r\n *       -----------                    -----------\r\n *       | outside |                    | clipped |\r\n *       |  view   |              --------------------------\r\n *       |         |              |     |         |        |\r\n *       ----------               |     -----------        |\r\n *  --------------------------    |                        |\r\n *  |                        |    |      Scrollable        |\r\n *  |                        |    |                        |\r\n *  |                        |     --------------------------\r\n *  |      Scrollable        |\r\n *  |                        |\r\n *  --------------------------\r\n *\r\n *  @docs-private\r\n */\r\nexport class ScrollingVisibility {\r\n  isOriginClipped: boolean;\r\n  isOriginOutsideView: boolean;\r\n  isOverlayClipped: boolean;\r\n  isOverlayOutsideView: boolean;\r\n}\r\n\r\n/** The change event emitted by the strategy when a fallback position is used. */\r\nexport class ConnectedOverlayPositionChange {\r\n  constructor(\r\n      /** The position used as a result of this change. */\r\n      public connectionPair: ConnectionPositionPair,\r\n      /** @docs-private */\r\n      @Optional() public scrollableViewProperties: ScrollingVisibility) {}\r\n}\r\n\r\n/**\r\n * Validates whether a vertical position property matches the expected values.\r\n * @param property Name of the property being validated.\r\n * @param value Value of the property being validated.\r\n * @docs-private\r\n */\r\nexport function validateVerticalPosition(property: string, value: VerticalConnectionPos) {\r\n  if (value !== 'top' && value !== 'bottom' && value !== 'center') {\r\n    throw Error(`ConnectedPosition: Invalid ${property} \"${value}\". ` +\r\n                `Expected \"top\", \"bottom\" or \"center\".`);\r\n  }\r\n}\r\n\r\n/**\r\n * Validates whether a horizontal position property matches the expected values.\r\n * @param property Name of the property being validated.\r\n * @param value Value of the property being validated.\r\n * @docs-private\r\n */\r\nexport function validateHorizontalPosition(property: string, value: HorizontalConnectionPos) {\r\n  if (value !== 'start' && value !== 'end' && value !== 'center') {\r\n    throw Error(`ConnectedPosition: Invalid ${property} \"${value}\". ` +\r\n                `Expected \"start\", \"end\" or \"center\".`);\r\n  }\r\n}\r\n","/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n\r\nimport {DOCUMENT} from '@angular/common';\r\nimport {Inject, Injectable, OnDestroy} from '@angular/core';\r\nimport {OverlayReference} from '../overlay-reference';\r\n\r\n\r\n/**\r\n * Service for dispatching events that land on the body to appropriate overlay ref,\r\n * if any. It maintains a list of attached overlays to determine best suited overlay based\r\n * on event target and order of overlay opens.\r\n */\r\n@Injectable({providedIn: 'root'})\r\nexport abstract class BaseOverlayDispatcher implements OnDestroy {\r\n\r\n  /** Currently attached overlays in the order they were attached. */\r\n  _attachedOverlays: OverlayReference[] = [];\r\n\r\n  protected _document: Document;\r\n  protected _isAttached: boolean;\r\n\r\n  constructor(@Inject(DOCUMENT) document: any) {\r\n    this._document = document;\r\n  }\r\n\r\n  ngOnDestroy(): void {\r\n    this.detach();\r\n  }\r\n\r\n  /** Add a new overlay to the list of attached overlay refs. */\r\n  add(overlayRef: OverlayReference): void {\r\n    // Ensure that we don't get the same overlay multiple times.\r\n    this.remove(overlayRef);\r\n    this._attachedOverlays.push(overlayRef);\r\n  }\r\n\r\n  /** Remove an overlay from the list of attached overlay refs. */\r\n  remove(overlayRef: OverlayReference): void {\r\n    const index = this._attachedOverlays.indexOf(overlayRef);\r\n\r\n    if (index > -1) {\r\n      this._attachedOverlays.splice(index, 1);\r\n    }\r\n\r\n    // Remove the global listener once there are no more overlays.\r\n    if (this._attachedOverlays.length === 0) {\r\n      this.detach();\r\n    }\r\n  }\r\n\r\n  /** Detaches the global event listener. */\r\n  protected abstract detach(): void;\r\n}\r\n","/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n\r\nimport {DOCUMENT} from '@angular/common';\r\nimport {Inject, Injectable} from '@angular/core';\r\nimport {OverlayReference} from '../overlay-reference';\r\nimport {BaseOverlayDispatcher} from './base-overlay-dispatcher';\r\n\r\n\r\n/**\r\n * Service for dispatching keyboard events that land on the body to appropriate overlay ref,\r\n * if any. It maintains a list of attached overlays to determine best suited overlay based\r\n * on event target and order of overlay opens.\r\n */\r\n@Injectable({providedIn: 'root'})\r\nexport class OverlayKeyboardDispatcher extends BaseOverlayDispatcher {\r\n\r\n  constructor(@Inject(DOCUMENT) document: any) {\r\n    super(document);\r\n  }\r\n\r\n  /** Add a new overlay to the list of attached overlay refs. */\r\n  add(overlayRef: OverlayReference): void {\r\n    super.add(overlayRef);\r\n\r\n    // Lazily start dispatcher once first overlay is added\r\n    if (!this._isAttached) {\r\n      this._document.body.addEventListener('keydown', this._keydownListener);\r\n      this._isAttached = true;\r\n    }\r\n  }\r\n\r\n  /** Detaches the global keyboard event listener. */\r\n  protected detach() {\r\n    if (this._isAttached) {\r\n      this._document.body.removeEventListener('keydown', this._keydownListener);\r\n      this._isAttached = false;\r\n    }\r\n  }\r\n\r\n  /** Keyboard event listener that will be attached to the body. */\r\n  private _keydownListener = (event: KeyboardEvent) => {\r\n    const overlays = this._attachedOverlays;\r\n\r\n    for (let i = overlays.length - 1; i > -1; i--) {\r\n      // Dispatch the keydown event to the top overlay which has subscribers to its keydown events.\r\n      // We want to target the most recent overlay, rather than trying to match where the event came\r\n      // from, because some components might open an overlay, but keep focus on a trigger element\r\n      // (e.g. for select and autocomplete). We skip overlays without keydown event subscriptions,\r\n      // because we don't want overlays that don't handle keyboard events to block the ones below\r\n      // them that do.\r\n      if (overlays[i]._keydownEvents.observers.length > 0) {\r\n        overlays[i]._keydownEvents.next(event);\r\n        break;\r\n      }\r\n    }\r\n  }\r\n}\r\n","/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n\r\nimport {DOCUMENT} from '@angular/common';\r\nimport {Inject, Injectable} from '@angular/core';\r\nimport {OverlayReference} from '../overlay-reference';\r\nimport {Platform} from '@angular/cdk/platform';\r\nimport {BaseOverlayDispatcher} from './base-overlay-dispatcher';\r\n\r\n/**\r\n * Service for dispatching mouse click events that land on the body to appropriate overlay ref,\r\n * if any. It maintains a list of attached overlays to determine best suited overlay based\r\n * on event target and order of overlay opens.\r\n */\r\n@Injectable({providedIn: 'root'})\r\nexport class OverlayOutsideClickDispatcher extends BaseOverlayDispatcher {\r\n  private _cursorOriginalValue: string;\r\n  private _cursorStyleIsSet = false;\r\n\r\n  constructor(@Inject(DOCUMENT) document: any, private _platform: Platform) {\r\n    super(document);\r\n  }\r\n\r\n  /** Add a new overlay to the list of attached overlay refs. */\r\n  add(overlayRef: OverlayReference): void {\r\n    super.add(overlayRef);\r\n\r\n    // tslint:disable: max-line-length\r\n    // Safari on iOS does not generate click events for non-interactive\r\n    // elements. However, we want to receive a click for any element outside\r\n    // the overlay. We can force a \"clickable\" state by setting\r\n    // `cursor: pointer` on the document body.\r\n    // See https://developer.mozilla.org/en-US/docs/Web/API/Element/click_event#Safari_Mobile\r\n    // and https://developer.apple.com/library/archive/documentation/AppleApplications/Reference/SafariWebContent/HandlingEvents/HandlingEvents.html\r\n    // tslint:enable: max-line-length\r\n    if (!this._isAttached) {\r\n      this._document.body.addEventListener('click', this._clickListener, true);\r\n      this._document.body.addEventListener('contextmenu', this._clickListener, true);\r\n\r\n      // click event is not fired on iOS. To make element \"clickable\" we are\r\n      // setting the cursor to pointer\r\n      if (this._platform.IOS && !this._cursorStyleIsSet) {\r\n        this._cursorOriginalValue = this._document.body.style.cursor;\r\n        this._document.body.style.cursor = 'pointer';\r\n        this._cursorStyleIsSet = true;\r\n      }\r\n\r\n      this._isAttached = true;\r\n    }\r\n  }\r\n\r\n  /** Detaches the global keyboard event listener. */\r\n  protected detach() {\r\n    if (this._isAttached) {\r\n      this._document.body.removeEventListener('click', this._clickListener, true);\r\n      this._document.body.removeEventListener('contextmenu', this._clickListener, true);\r\n      if (this._platform.IOS && this._cursorStyleIsSet) {\r\n        this._document.body.style.cursor = this._cursorOriginalValue;\r\n        this._cursorStyleIsSet = false;\r\n      }\r\n      this._isAttached = false;\r\n    }\r\n  }\r\n\r\n  /** Click event listener that will be attached to the body propagate phase. */\r\n  private _clickListener = (event: MouseEvent) => {\r\n    // Get the target through the `composedPath` if possible to account for shadow DOM.\r\n    const target = event.composedPath ? event.composedPath()[0] : event.target;\r\n    // We copy the array because the original may be modified asynchronously if the\r\n    // outsidePointerEvents listener decides to detach overlays resulting in index errors inside\r\n    // the for loop.\r\n    const overlays = this._attachedOverlays.slice();\r\n\r\n    // Dispatch the mouse event to the top overlay which has subscribers to its mouse events.\r\n    // We want to target all overlays for which the click could be considered as outside click.\r\n    // As soon as we reach an overlay for which the click is not outside click we break off\r\n    // the loop.\r\n    for (let i = overlays.length - 1; i > -1; i--) {\r\n      const overlayRef = overlays[i];\r\n      if (overlayRef._outsidePointerEvents.observers.length < 1 || !overlayRef.hasAttached()) {\r\n        continue;\r\n      }\r\n\r\n      // If it's a click inside the overlay, just break - we should do nothing\r\n      // If it's an outside click dispatch the mouse event, and proceed with the next overlay\r\n      if (overlayRef.overlayElement.contains(target as Node)) {\r\n        break;\r\n      }\r\n\r\n      overlayRef._outsidePointerEvents.next(event);\r\n    }\r\n  }\r\n}\r\n","/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n\r\nimport {DOCUMENT} from '@angular/common';\r\nimport {Inject, Injectable, OnDestroy} from '@angular/core';\r\nimport {Platform} from '@angular/cdk/platform';\r\n\r\n/**\r\n * Whether we're in a testing environment.\r\n * TODO(crisbeto): remove this once we have an overlay testing module.\r\n */\r\nconst isTestEnvironment: boolean = typeof window !== 'undefined' && !!window &&\r\n  !!((window as any).__karma__ || (window as any).jasmine);\r\n\r\n/** Container inside which all overlays will render. */\r\n@Injectable({providedIn: 'root'})\r\nexport class OverlayContainer implements OnDestroy {\r\n  protected _containerElement: HTMLElement;\r\n  protected _document: Document;\r\n\r\n  constructor(@Inject(DOCUMENT) document: any, protected _platform: Platform) {\r\n    this._document = document;\r\n  }\r\n\r\n  ngOnDestroy() {\r\n    const container = this._containerElement;\r\n\r\n    if (container && container.parentNode) {\r\n      container.parentNode.removeChild(container);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * This method returns the overlay container element. It will lazily\r\n   * create the element the first time  it is called to facilitate using\r\n   * the container in non-browser environments.\r\n   * @returns the container element\r\n   */\r\n  getContainerElement(): HTMLElement {\r\n    if (!this._containerElement) {\r\n      this._createContainer();\r\n    }\r\n\r\n    return this._containerElement;\r\n  }\r\n\r\n  /**\r\n   * Create the overlay container element, which is simply a div\r\n   * with the 'cdk-overlay-container' class on the document body.\r\n   */\r\n  protected _createContainer(): void {\r\n    const containerClass = 'cdk-overlay-container';\r\n\r\n    if (this._platform.isBrowser || isTestEnvironment) {\r\n      const oppositePlatformContainers =\r\n          this._document.querySelectorAll(`.${containerClass}[platform=\"server\"], ` +\r\n                                          `.${containerClass}[platform=\"test\"]`);\r\n\r\n      // Remove any old containers from the opposite platform.\r\n      // This can happen when transitioning from the server to the client.\r\n      for (let i = 0; i < oppositePlatformContainers.length; i++) {\r\n        oppositePlatformContainers[i].parentNode!.removeChild(oppositePlatformContainers[i]);\r\n      }\r\n    }\r\n\r\n    const container = this._document.createElement('div');\r\n    container.classList.add(containerClass);\r\n\r\n    // A long time ago we kept adding new overlay containers whenever a new app was instantiated,\r\n    // but at some point we added logic which clears the duplicate ones in order to avoid leaks.\r\n    // The new logic was a little too aggressive since it was breaking some legitimate use cases.\r\n    // To mitigate the problem we made it so that only containers from a different platform are\r\n    // cleared, but the side-effect was that people started depending on the overly-aggressive\r\n    // logic to clean up their tests for them. Until we can introduce an overlay-specific testing\r\n    // module which does the cleanup, we try to detect that we're in a test environment and we\r\n    // always clear the container. See #17006.\r\n    // TODO(crisbeto): remove the test environment check once we have an overlay testing module.\r\n    if (isTestEnvironment) {\r\n      container.setAttribute('platform', 'test');\r\n    } else if (!this._platform.isBrowser) {\r\n      container.setAttribute('platform', 'server');\r\n    }\r\n\r\n    this._document.body.appendChild(container);\r\n    this._containerElement = container;\r\n  }\r\n}\r\n","/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n\r\nimport {Direction, Directionality} from '@angular/cdk/bidi';\r\nimport {ComponentPortal, Portal, PortalOutlet, TemplatePortal} from '@angular/cdk/portal';\r\nimport {ComponentRef, EmbeddedViewRef, NgZone} from '@angular/core';\r\nimport {Location} from '@angular/common';\r\nimport {Observable, Subject, merge, SubscriptionLike, Subscription} from 'rxjs';\r\nimport {take, takeUntil} from 'rxjs/operators';\r\nimport {OverlayKeyboardDispatcher} from './dispatchers/overlay-keyboard-dispatcher';\r\nimport {OverlayOutsideClickDispatcher} from './dispatchers/overlay-outside-click-dispatcher';\r\nimport {OverlayConfig} from './overlay-config';\r\nimport {coerceCssPixelValue, coerceArray} from '@angular/cdk/coercion';\r\nimport {OverlayReference} from './overlay-reference';\r\nimport {PositionStrategy} from './position/position-strategy';\r\nimport {ScrollStrategy} from './scroll';\r\n\r\n\r\n/** An object where all of its properties cannot be written. */\r\nexport type ImmutableObject<T> = {\r\n  readonly [P in keyof T]: T[P];\r\n};\r\n\r\n/**\r\n * Reference to an overlay that has been created with the Overlay service.\r\n * Used to manipulate or dispose of said overlay.\r\n */\r\nexport class OverlayRef implements PortalOutlet, OverlayReference {\r\n  private _backdropElement: HTMLElement | null = null;\r\n  private _backdropClick: Subject<MouseEvent> = new Subject();\r\n  private _attachments = new Subject<void>();\r\n  private _detachments = new Subject<void>();\r\n  private _positionStrategy: PositionStrategy | undefined;\r\n  private _scrollStrategy: ScrollStrategy | undefined;\r\n  private _locationChanges: SubscriptionLike = Subscription.EMPTY;\r\n  private _backdropClickHandler = (event: MouseEvent) => this._backdropClick.next(event);\r\n\r\n  /**\r\n   * Reference to the parent of the `_host` at the time it was detached. Used to restore\r\n   * the `_host` to its original position in the DOM when it gets re-attached.\r\n   */\r\n  private _previousHostParent: HTMLElement;\r\n\r\n  /** Stream of keydown events dispatched to this overlay. */\r\n  _keydownEvents = new Subject<KeyboardEvent>();\r\n\r\n  /** Stream of mouse outside events dispatched to this overlay. */\r\n  _outsidePointerEvents = new Subject<MouseEvent>();\r\n\r\n  constructor(\r\n      private _portalOutlet: PortalOutlet,\r\n      private _host: HTMLElement,\r\n      private _pane: HTMLElement,\r\n      private _config: ImmutableObject<OverlayConfig>,\r\n      private _ngZone: NgZone,\r\n      private _keyboardDispatcher: OverlayKeyboardDispatcher,\r\n      private _document: Document,\r\n      private _location: Location,\r\n      private _outsideClickDispatcher: OverlayOutsideClickDispatcher) {\r\n\r\n    if (_config.scrollStrategy) {\r\n      this._scrollStrategy = _config.scrollStrategy;\r\n      this._scrollStrategy.attach(this);\r\n    }\r\n\r\n    this._positionStrategy = _config.positionStrategy;\r\n  }\r\n\r\n  /** The overlay's HTML element */\r\n  get overlayElement(): HTMLElement {\r\n    return this._pane;\r\n  }\r\n\r\n  /** The overlay's backdrop HTML element. */\r\n  get backdropElement(): HTMLElement | null {\r\n    return this._backdropElement;\r\n  }\r\n\r\n  /**\r\n   * Wrapper around the panel element. Can be used for advanced\r\n   * positioning where a wrapper with specific styling is\r\n   * required around the overlay pane.\r\n   */\r\n  get hostElement(): HTMLElement {\r\n    return this._host;\r\n  }\r\n\r\n  attach<T>(portal: ComponentPortal<T>): ComponentRef<T>;\r\n  attach<T>(portal: TemplatePortal<T>): EmbeddedViewRef<T>;\r\n  attach(portal: any): any;\r\n\r\n  /**\r\n   * Attaches content, given via a Portal, to the overlay.\r\n   * If the overlay is configured to have a backdrop, it will be created.\r\n   *\r\n   * @param portal Portal instance to which to attach the overlay.\r\n   * @returns The portal attachment result.\r\n   */\r\n  attach(portal: Portal<any>): any {\r\n    let attachResult = this._portalOutlet.attach(portal);\r\n\r\n    // Update the pane element with the given configuration.\r\n    if (!this._host.parentElement && this._previousHostParent) {\r\n      this._previousHostParent.appendChild(this._host);\r\n    }\r\n\r\n    if (this._positionStrategy) {\r\n      this._positionStrategy.attach(this);\r\n    }\r\n\r\n    this._updateStackingOrder();\r\n    this._updateElementSize();\r\n    this._updateElementDirection();\r\n\r\n    if (this._scrollStrategy) {\r\n      this._scrollStrategy.enable();\r\n    }\r\n\r\n    // Update the position once the zone is stable so that the overlay will be fully rendered\r\n    // before attempting to position it, as the position may depend on the size of the rendered\r\n    // content.\r\n    this._ngZone.onStable\r\n      .pipe(take(1))\r\n      .subscribe(() => {\r\n        // The overlay could've been detached before the zone has stabilized.\r\n        if (this.hasAttached()) {\r\n          this.updatePosition();\r\n        }\r\n      });\r\n\r\n    // Enable pointer events for the overlay pane element.\r\n    this._togglePointerEvents(true);\r\n\r\n    if (this._config.hasBackdrop) {\r\n      this._attachBackdrop();\r\n    }\r\n\r\n    if (this._config.panelClass) {\r\n      this._toggleClasses(this._pane, this._config.panelClass, true);\r\n    }\r\n\r\n    // Only emit the `attachments` event once all other setup is done.\r\n    this._attachments.next();\r\n\r\n    // Track this overlay by the keyboard dispatcher\r\n    this._keyboardDispatcher.add(this);\r\n\r\n    if (this._config.disposeOnNavigation) {\r\n      this._locationChanges = this._location.subscribe(() => this.dispose());\r\n    }\r\n\r\n    this._outsideClickDispatcher.add(this);\r\n    return attachResult;\r\n  }\r\n\r\n  /**\r\n   * Detaches an overlay from a portal.\r\n   * @returns The portal detachment result.\r\n   */\r\n  detach(): any {\r\n    if (!this.hasAttached()) {\r\n      return;\r\n    }\r\n\r\n    this.detachBackdrop();\r\n\r\n    // When the overlay is detached, the pane element should disable pointer events.\r\n    // This is necessary because otherwise the pane element will cover the page and disable\r\n    // pointer events therefore. Depends on the position strategy and the applied pane boundaries.\r\n    this._togglePointerEvents(false);\r\n\r\n    if (this._positionStrategy && this._positionStrategy.detach) {\r\n      this._positionStrategy.detach();\r\n    }\r\n\r\n    if (this._scrollStrategy) {\r\n      this._scrollStrategy.disable();\r\n    }\r\n\r\n    const detachmentResult = this._portalOutlet.detach();\r\n\r\n    // Only emit after everything is detached.\r\n    this._detachments.next();\r\n\r\n    // Remove this overlay from keyboard dispatcher tracking.\r\n    this._keyboardDispatcher.remove(this);\r\n\r\n    // Keeping the host element in the DOM can cause scroll jank, because it still gets\r\n    // rendered, even though it's transparent and unclickable which is why we remove it.\r\n    this._detachContentWhenStable();\r\n    this._locationChanges.unsubscribe();\r\n    this._outsideClickDispatcher.remove(this);\r\n    return detachmentResult;\r\n  }\r\n\r\n  /** Cleans up the overlay from the DOM. */\r\n  dispose(): void {\r\n    const isAttached = this.hasAttached();\r\n\r\n    if (this._positionStrategy) {\r\n      this._positionStrategy.dispose();\r\n    }\r\n\r\n    this._disposeScrollStrategy();\r\n    this.detachBackdrop();\r\n    this._locationChanges.unsubscribe();\r\n    this._keyboardDispatcher.remove(this);\r\n    this._portalOutlet.dispose();\r\n    this._attachments.complete();\r\n    this._backdropClick.complete();\r\n    this._keydownEvents.complete();\r\n    this._outsidePointerEvents.complete();\r\n    this._outsideClickDispatcher.remove(this);\r\n\r\n    if (this._host && this._host.parentNode) {\r\n      this._host.parentNode.removeChild(this._host);\r\n      this._host = null!;\r\n    }\r\n\r\n    this._previousHostParent = this._pane = null!;\r\n\r\n    if (isAttached) {\r\n      this._detachments.next();\r\n    }\r\n\r\n    this._detachments.complete();\r\n  }\r\n\r\n  /** Whether the overlay has attached content. */\r\n  hasAttached(): boolean {\r\n    return this._portalOutlet.hasAttached();\r\n  }\r\n\r\n  /** Gets an observable that emits when the backdrop has been clicked. */\r\n  backdropClick(): Observable<MouseEvent> {\r\n    return this._backdropClick;\r\n  }\r\n\r\n  /** Gets an observable that emits when the overlay has been attached. */\r\n  attachments(): Observable<void> {\r\n    return this._attachments;\r\n  }\r\n\r\n  /** Gets an observable that emits when the overlay has been detached. */\r\n  detachments(): Observable<void> {\r\n    return this._detachments;\r\n  }\r\n\r\n  /** Gets an observable of keydown events targeted to this overlay. */\r\n  keydownEvents(): Observable<KeyboardEvent> {\r\n    return this._keydownEvents;\r\n  }\r\n\r\n  /** Gets an observable of pointer events targeted outside this overlay. */\r\n  outsidePointerEvents(): Observable<MouseEvent> {\r\n    return this._outsidePointerEvents;\r\n  }\r\n\r\n  /** Gets the current overlay configuration, which is immutable. */\r\n  getConfig(): OverlayConfig {\r\n    return this._config;\r\n  }\r\n\r\n  /** Updates the position of the overlay based on the position strategy. */\r\n  updatePosition(): void {\r\n    if (this._positionStrategy) {\r\n      this._positionStrategy.apply();\r\n    }\r\n  }\r\n\r\n  /** Switches to a new position strategy and updates the overlay position. */\r\n  updatePositionStrategy(strategy: PositionStrategy): void {\r\n    if (strategy === this._positionStrategy) {\r\n      return;\r\n    }\r\n\r\n    if (this._positionStrategy) {\r\n      this._positionStrategy.dispose();\r\n    }\r\n\r\n    this._positionStrategy = strategy;\r\n\r\n    if (this.hasAttached()) {\r\n      strategy.attach(this);\r\n      this.updatePosition();\r\n    }\r\n  }\r\n\r\n  /** Update the size properties of the overlay. */\r\n  updateSize(sizeConfig: OverlaySizeConfig): void {\r\n    this._config = {...this._config, ...sizeConfig};\r\n    this._updateElementSize();\r\n  }\r\n\r\n  /** Sets the LTR/RTL direction for the overlay. */\r\n  setDirection(dir: Direction | Directionality): void {\r\n    this._config = {...this._config, direction: dir};\r\n    this._updateElementDirection();\r\n  }\r\n\r\n  /** Add a CSS class or an array of classes to the overlay pane. */\r\n  addPanelClass(classes: string | string[]): void {\r\n    if (this._pane) {\r\n      this._toggleClasses(this._pane, classes, true);\r\n    }\r\n  }\r\n\r\n  /** Remove a CSS class or an array of classes from the overlay pane. */\r\n  removePanelClass(classes: string | string[]): void {\r\n    if (this._pane) {\r\n      this._toggleClasses(this._pane, classes, false);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Returns the layout direction of the overlay panel.\r\n   */\r\n  getDirection(): Direction {\r\n    const direction = this._config.direction;\r\n\r\n    if (!direction) {\r\n      return 'ltr';\r\n    }\r\n\r\n    return typeof direction === 'string' ? direction : direction.value;\r\n  }\r\n\r\n  /** Switches to a new scroll strategy. */\r\n  updateScrollStrategy(strategy: ScrollStrategy): void {\r\n    if (strategy === this._scrollStrategy) {\r\n      return;\r\n    }\r\n\r\n    this._disposeScrollStrategy();\r\n    this._scrollStrategy = strategy;\r\n\r\n    if (this.hasAttached()) {\r\n      strategy.attach(this);\r\n      strategy.enable();\r\n    }\r\n  }\r\n\r\n  /** Updates the text direction of the overlay panel. */\r\n  private _updateElementDirection() {\r\n    this._host.setAttribute('dir', this.getDirection());\r\n  }\r\n\r\n  /** Updates the size of the overlay element based on the overlay config. */\r\n  private _updateElementSize() {\r\n    if (!this._pane) {\r\n      return;\r\n    }\r\n\r\n    const style = this._pane.style;\r\n\r\n    style.width = coerceCssPixelValue(this._config.width);\r\n    style.height = coerceCssPixelValue(this._config.height);\r\n    style.minWidth = coerceCssPixelValue(this._config.minWidth);\r\n    style.minHeight = coerceCssPixelValue(this._config.minHeight);\r\n    style.maxWidth = coerceCssPixelValue(this._config.maxWidth);\r\n    style.maxHeight = coerceCssPixelValue(this._config.maxHeight);\r\n  }\r\n\r\n  /** Toggles the pointer events for the overlay pane element. */\r\n  private _togglePointerEvents(enablePointer: boolean) {\r\n    this._pane.style.pointerEvents = enablePointer ? '' : 'none';\r\n  }\r\n\r\n  /** Attaches a backdrop for this overlay. */\r\n  private _attachBackdrop() {\r\n    const showingClass = 'cdk-overlay-backdrop-showing';\r\n\r\n    this._backdropElement = this._document.createElement('div');\r\n    this._backdropElement.classList.add('cdk-overlay-backdrop');\r\n\r\n    if (this._config.backdropClass) {\r\n      this._toggleClasses(this._backdropElement, this._config.backdropClass, true);\r\n    }\r\n\r\n    // Insert the backdrop before the pane in the DOM order,\r\n    // in order to handle stacked overlays properly.\r\n    this._host.parentElement!.insertBefore(this._backdropElement, this._host);\r\n\r\n    // Forward backdrop clicks such that the consumer of the overlay can perform whatever\r\n    // action desired when such a click occurs (usually closing the overlay).\r\n    this._backdropElement.addEventListener('click', this._backdropClickHandler);\r\n\r\n    // Add class to fade-in the backdrop after one frame.\r\n    if (typeof requestAnimationFrame !== 'undefined') {\r\n      this._ngZone.runOutsideAngular(() => {\r\n        requestAnimationFrame(() => {\r\n          if (this._backdropElement) {\r\n            this._backdropElement.classList.add(showingClass);\r\n          }\r\n        });\r\n      });\r\n    } else {\r\n      this._backdropElement.classList.add(showingClass);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Updates the stacking order of the element, moving it to the top if necessary.\r\n   * This is required in cases where one overlay was detached, while another one,\r\n   * that should be behind it, was destroyed. The next time both of them are opened,\r\n   * the stacking will be wrong, because the detached element's pane will still be\r\n   * in its original DOM position.\r\n   */\r\n  private _updateStackingOrder() {\r\n    if (this._host.nextSibling) {\r\n      this._host.parentNode!.appendChild(this._host);\r\n    }\r\n  }\r\n\r\n  /** Detaches the backdrop (if any) associated with the overlay. */\r\n  detachBackdrop(): void {\r\n    let backdropToDetach = this._backdropElement;\r\n\r\n    if (!backdropToDetach) {\r\n      return;\r\n    }\r\n\r\n    let timeoutId: number;\r\n    let finishDetach = () => {\r\n      // It may not be attached to anything in certain cases (e.g. unit tests).\r\n      if (backdropToDetach) {\r\n        backdropToDetach.removeEventListener('click', this._backdropClickHandler);\r\n        backdropToDetach.removeEventListener('transitionend', finishDetach);\r\n\r\n        if (backdropToDetach.parentNode) {\r\n          backdropToDetach.parentNode.removeChild(backdropToDetach);\r\n        }\r\n      }\r\n\r\n      // It is possible that a new portal has been attached to this overlay since we started\r\n      // removing the backdrop. If that is the case, only clear the backdrop reference if it\r\n      // is still the same instance that we started to remove.\r\n      if (this._backdropElement == backdropToDetach) {\r\n        this._backdropElement = null;\r\n      }\r\n\r\n      if (this._config.backdropClass) {\r\n        this._toggleClasses(backdropToDetach!, this._config.backdropClass, false);\r\n      }\r\n\r\n      clearTimeout(timeoutId);\r\n    };\r\n\r\n    backdropToDetach.classList.remove('cdk-overlay-backdrop-showing');\r\n\r\n    this._ngZone.runOutsideAngular(() => {\r\n      backdropToDetach!.addEventListener('transitionend', finishDetach);\r\n    });\r\n\r\n    // If the backdrop doesn't have a transition, the `transitionend` event won't fire.\r\n    // In this case we make it unclickable and we try to remove it after a delay.\r\n    backdropToDetach.style.pointerEvents = 'none';\r\n\r\n    // Run this outside the Angular zone because there's nothing that Angular cares about.\r\n    // If it were to run inside the Angular zone, every test that used Overlay would have to be\r\n    // either async or fakeAsync.\r\n    timeoutId = this._ngZone.runOutsideAngular(() => setTimeout(finishDetach, 500));\r\n  }\r\n\r\n  /** Toggles a single CSS class or an array of classes on an element. */\r\n  private _toggleClasses(element: HTMLElement, cssClasses: string | string[], isAdd: boolean) {\r\n    const classList = element.classList;\r\n\r\n    coerceArray(cssClasses).forEach(cssClass => {\r\n      // We can't do a spread here, because IE doesn't support setting multiple classes.\r\n      // Also trying to add an empty string to a DOMTokenList will throw.\r\n      if (cssClass) {\r\n        isAdd ? classList.add(cssClass) : classList.remove(cssClass);\r\n      }\r\n    });\r\n  }\r\n\r\n  /** Detaches the overlay content next time the zone stabilizes. */\r\n  private _detachContentWhenStable() {\r\n    // Normally we wouldn't have to explicitly run this outside the `NgZone`, however\r\n    // if the consumer is using `zone-patch-rxjs`, the `Subscription.unsubscribe` call will\r\n    // be patched to run inside the zone, which will throw us into an infinite loop.\r\n    this._ngZone.runOutsideAngular(() => {\r\n      // We can't remove the host here immediately, because the overlay pane's content\r\n      // might still be animating. This stream helps us avoid interrupting the animation\r\n      // by waiting for the pane to become empty.\r\n      const subscription = this._ngZone.onStable\r\n        .pipe(takeUntil(merge(this._attachments, this._detachments)))\r\n        .subscribe(() => {\r\n          // Needs a couple of checks for the pane and host, because\r\n          // they may have been removed by the time the zone stabilizes.\r\n          if (!this._pane || !this._host || this._pane.children.length === 0) {\r\n            if (this._pane && this._config.panelClass) {\r\n              this._toggleClasses(this._pane, this._config.panelClass, false);\r\n            }\r\n\r\n            if (this._host && this._host.parentElement) {\r\n              this._previousHostParent = this._host.parentElement;\r\n              this._previousHostParent.removeChild(this._host);\r\n            }\r\n\r\n            subscription.unsubscribe();\r\n          }\r\n        });\r\n    });\r\n  }\r\n\r\n  /** Disposes of a scroll strategy. */\r\n  private _disposeScrollStrategy() {\r\n    const scrollStrategy = this._scrollStrategy;\r\n\r\n    if (scrollStrategy) {\r\n      scrollStrategy.disable();\r\n\r\n      if (scrollStrategy.detach) {\r\n        scrollStrategy.detach();\r\n      }\r\n    }\r\n  }\r\n}\r\n\r\n\r\n/** Size properties for an overlay. */\r\nexport interface OverlaySizeConfig {\r\n  width?: number | string;\r\n  height?: number | string;\r\n  minWidth?: number | string;\r\n  minHeight?: number | string;\r\n  maxWidth?: number | string;\r\n  maxHeight?: number | string;\r\n}\r\n","/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n\r\nimport {PositionStrategy} from './position-strategy';\r\nimport {ElementRef} from '@angular/core';\r\nimport {ViewportRuler, CdkScrollable, ViewportScrollPosition} from '@angular/cdk/scrolling';\r\nimport {\r\n  ConnectedOverlayPositionChange,\r\n  ConnectionPositionPair,\r\n  ScrollingVisibility,\r\n  validateHorizontalPosition,\r\n  validateVerticalPosition,\r\n} from './connected-position';\r\nimport {Observable, Subscription, Subject} from 'rxjs';\r\nimport {OverlayReference} from '../overlay-reference';\r\nimport {isElementScrolledOutsideView, isElementClippedByScrolling} from './scroll-clip';\r\nimport {coerceCssPixelValue, coerceArray} from '@angular/cdk/coercion';\r\nimport {Platform} from '@angular/cdk/platform';\r\nimport {OverlayContainer} from '../overlay-container';\r\n\r\n// TODO: refactor clipping detection into a separate thing (part of scrolling module)\r\n// TODO: doesn't handle both flexible width and height when it has to scroll along both axis.\r\n\r\n/** Class to be added to the overlay bounding box. */\r\nconst boundingBoxClass = 'cdk-overlay-connected-position-bounding-box';\r\n\r\n/** Regex used to split a string on its CSS units. */\r\nconst cssUnitPattern = /([A-Za-z%]+)$/;\r\n\r\n/** Possible values that can be set as the origin of a FlexibleConnectedPositionStrategy. */\r\nexport type FlexibleConnectedPositionStrategyOrigin = ElementRef | Element | Point & {\r\n  width?: number;\r\n  height?: number;\r\n};\r\n\r\n/**\r\n * A strategy for positioning overlays. Using this strategy, an overlay is given an\r\n * implicit position relative some origin element. The relative position is defined in terms of\r\n * a point on the origin element that is connected to a point on the overlay element. For example,\r\n * a basic dropdown is connecting the bottom-left corner of the origin to the top-left corner\r\n * of the overlay.\r\n */\r\nexport class FlexibleConnectedPositionStrategy implements PositionStrategy {\r\n  /** The overlay to which this strategy is attached. */\r\n  private _overlayRef: OverlayReference;\r\n\r\n  /** Whether we're performing the very first positioning of the overlay. */\r\n  private _isInitialRender: boolean;\r\n\r\n  /** Last size used for the bounding box. Used to avoid resizing the overlay after open. */\r\n  private _lastBoundingBoxSize = {width: 0, height: 0};\r\n\r\n  /** Whether the overlay was pushed in a previous positioning. */\r\n  private _isPushed = false;\r\n\r\n  /** Whether the overlay can be pushed on-screen on the initial open. */\r\n  private _canPush = true;\r\n\r\n  /** Whether the overlay can grow via flexible width/height after the initial open. */\r\n  private _growAfterOpen = false;\r\n\r\n  /** Whether the overlay's width and height can be constrained to fit within the viewport. */\r\n  private _hasFlexibleDimensions = true;\r\n\r\n  /** Whether the overlay position is locked. */\r\n  private _positionLocked = false;\r\n\r\n  /** Cached origin dimensions */\r\n  private _originRect: ClientRect;\r\n\r\n  /** Cached overlay dimensions */\r\n  private _overlayRect: ClientRect;\r\n\r\n  /** Cached viewport dimensions */\r\n  private _viewportRect: ClientRect;\r\n\r\n  /** Amount of space that must be maintained between the overlay and the edge of the viewport. */\r\n  private _viewportMargin = 0;\r\n\r\n  /** The Scrollable containers used to check scrollable view properties on position change. */\r\n  private _scrollables: CdkScrollable[] = [];\r\n\r\n  /** Ordered list of preferred positions, from most to least desirable. */\r\n  _preferredPositions: ConnectionPositionPair[] = [];\r\n\r\n  /** The origin element against which the overlay will be positioned. */\r\n  private _origin: FlexibleConnectedPositionStrategyOrigin;\r\n\r\n  /** The overlay pane element. */\r\n  private _pane: HTMLElement;\r\n\r\n  /** Whether the strategy has been disposed of already. */\r\n  private _isDisposed: boolean;\r\n\r\n  /**\r\n   * Parent element for the overlay panel used to constrain the overlay panel's size to fit\r\n   * within the viewport.\r\n   */\r\n  private _boundingBox: HTMLElement | null;\r\n\r\n  /** The last position to have been calculated as the best fit position. */\r\n  private _lastPosition: ConnectedPosition | null;\r\n\r\n  /** Subject that emits whenever the position changes. */\r\n  private _positionChanges = new Subject<ConnectedOverlayPositionChange>();\r\n\r\n  /** Subscription to viewport size changes. */\r\n  private _resizeSubscription = Subscription.EMPTY;\r\n\r\n  /** Default offset for the overlay along the x axis. */\r\n  private _offsetX = 0;\r\n\r\n  /** Default offset for the overlay along the y axis. */\r\n  private _offsetY = 0;\r\n\r\n  /** Selector to be used when finding the elements on which to set the transform origin. */\r\n  private _transformOriginSelector: string;\r\n\r\n  /** Keeps track of the CSS classes that the position strategy has applied on the overlay panel. */\r\n  private _appliedPanelClasses: string[] = [];\r\n\r\n  /** Amount by which the overlay was pushed in each axis during the last time it was positioned. */\r\n  private _previousPushAmount: {x: number, y: number} | null;\r\n\r\n  /** Observable sequence of position changes. */\r\n  positionChanges: Observable<ConnectedOverlayPositionChange> = this._positionChanges;\r\n\r\n  /** Ordered list of preferred positions, from most to least desirable. */\r\n  get positions(): ConnectionPositionPair[] {\r\n    return this._preferredPositions;\r\n  }\r\n\r\n  constructor(\r\n      connectedTo: FlexibleConnectedPositionStrategyOrigin, private _viewportRuler: ViewportRuler,\r\n      private _document: Document, private _platform: Platform,\r\n      private _overlayContainer: OverlayContainer) {\r\n    this.setOrigin(connectedTo);\r\n  }\r\n\r\n  /** Attaches this position strategy to an overlay. */\r\n  attach(overlayRef: OverlayReference): void {\r\n    if (this._overlayRef && overlayRef !== this._overlayRef &&\r\n      (typeof ngDevMode === 'undefined' || ngDevMode)) {\r\n      throw Error('This position strategy is already attached to an overlay');\r\n    }\r\n\r\n    this._validatePositions();\r\n\r\n    overlayRef.hostElement.classList.add(boundingBoxClass);\r\n\r\n    this._overlayRef = overlayRef;\r\n    this._boundingBox = overlayRef.hostElement;\r\n    this._pane = overlayRef.overlayElement;\r\n    this._isDisposed = false;\r\n    this._isInitialRender = true;\r\n    this._lastPosition = null;\r\n    this._resizeSubscription.unsubscribe();\r\n    this._resizeSubscription = this._viewportRuler.change().subscribe(() => {\r\n      // When the window is resized, we want to trigger the next reposition as if it\r\n      // was an initial render, in order for the strategy to pick a new optimal position,\r\n      // otherwise position locking will cause it to stay at the old one.\r\n      this._isInitialRender = true;\r\n      this.apply();\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Updates the position of the overlay element, using whichever preferred position relative\r\n   * to the origin best fits on-screen.\r\n   *\r\n   * The selection of a position goes as follows:\r\n   *  - If any positions fit completely within the viewport as-is,\r\n   *      choose the first position that does so.\r\n   *  - If flexible dimensions are enabled and at least one satifies the given minimum width/height,\r\n   *      choose the position with the greatest available size modified by the positions' weight.\r\n   *  - If pushing is enabled, take the position that went off-screen the least and push it\r\n   *      on-screen.\r\n   *  - If none of the previous criteria were met, use the position that goes off-screen the least.\r\n   * @docs-private\r\n   */\r\n  apply(): void {\r\n    // We shouldn't do anything if the strategy was disposed or we're on the server.\r\n    if (this._isDisposed || !this._platform.isBrowser) {\r\n      return;\r\n    }\r\n\r\n    // If the position has been applied already (e.g. when the overlay was opened) and the\r\n    // consumer opted into locking in the position, re-use the old position, in order to\r\n    // prevent the overlay from jumping around.\r\n    if (!this._isInitialRender && this._positionLocked && this._lastPosition) {\r\n      this.reapplyLastPosition();\r\n      return;\r\n    }\r\n\r\n    this._clearPanelClasses();\r\n    this._resetOverlayElementStyles();\r\n    this._resetBoundingBoxStyles();\r\n\r\n    // We need the bounding rects for the origin and the overlay to determine how to position\r\n    // the overlay relative to the origin.\r\n    // We use the viewport rect to determine whether a position would go off-screen.\r\n    this._viewportRect = this._getNarrowedViewportRect();\r\n    this._originRect = this._getOriginRect();\r\n    this._overlayRect = this._pane.getBoundingClientRect();\r\n\r\n    const originRect = this._originRect;\r\n    const overlayRect = this._overlayRect;\r\n    const viewportRect = this._viewportRect;\r\n\r\n    // Positions where the overlay will fit with flexible dimensions.\r\n    const flexibleFits: FlexibleFit[] = [];\r\n\r\n    // Fallback if none of the preferred positions fit within the viewport.\r\n    let fallback: FallbackPosition | undefined;\r\n\r\n    // Go through each of the preferred positions looking for a good fit.\r\n    // If a good fit is found, it will be applied immediately.\r\n    for (let pos of this._preferredPositions) {\r\n      // Get the exact (x, y) coordinate for the point-of-origin on the origin element.\r\n      let originPoint = this._getOriginPoint(originRect, pos);\r\n\r\n      // From that point-of-origin, get the exact (x, y) coordinate for the top-left corner of the\r\n      // overlay in this position. We use the top-left corner for calculations and later translate\r\n      // this into an appropriate (top, left, bottom, right) style.\r\n      let overlayPoint = this._getOverlayPoint(originPoint, overlayRect, pos);\r\n\r\n      // Calculate how well the overlay would fit into the viewport with this point.\r\n      let overlayFit = this._getOverlayFit(overlayPoint, overlayRect, viewportRect, pos);\r\n\r\n      // If the overlay, without any further work, fits into the viewport, use this position.\r\n      if (overlayFit.isCompletelyWithinViewport) {\r\n        this._isPushed = false;\r\n        this._applyPosition(pos, originPoint);\r\n        return;\r\n      }\r\n\r\n      // If the overlay has flexible dimensions, we can use this position\r\n      // so long as there's enough space for the minimum dimensions.\r\n      if (this._canFitWithFlexibleDimensions(overlayFit, overlayPoint, viewportRect)) {\r\n        // Save positions where the overlay will fit with flexible dimensions. We will use these\r\n        // if none of the positions fit *without* flexible dimensions.\r\n        flexibleFits.push({\r\n          position: pos,\r\n          origin: originPoint,\r\n          overlayRect,\r\n          boundingBoxRect: this._calculateBoundingBoxRect(originPoint, pos)\r\n        });\r\n\r\n        continue;\r\n      }\r\n\r\n      // If the current preferred position does not fit on the screen, remember the position\r\n      // if it has more visible area on-screen than we've seen and move onto the next preferred\r\n      // position.\r\n      if (!fallback || fallback.overlayFit.visibleArea < overlayFit.visibleArea) {\r\n        fallback = {overlayFit, overlayPoint, originPoint, position: pos, overlayRect};\r\n      }\r\n    }\r\n\r\n    // If there are any positions where the overlay would fit with flexible dimensions, choose the\r\n    // one that has the greatest area available modified by the position's weight\r\n    if (flexibleFits.length) {\r\n      let bestFit: FlexibleFit | null = null;\r\n      let bestScore = -1;\r\n      for (const fit of flexibleFits) {\r\n        const score =\r\n            fit.boundingBoxRect.width * fit.boundingBoxRect.height * (fit.position.weight || 1);\r\n        if (score > bestScore) {\r\n          bestScore = score;\r\n          bestFit = fit;\r\n        }\r\n      }\r\n\r\n      this._isPushed = false;\r\n      this._applyPosition(bestFit!.position, bestFit!.origin);\r\n      return;\r\n    }\r\n\r\n    // When none of the preferred positions fit within the viewport, take the position\r\n    // that went off-screen the least and attempt to push it on-screen.\r\n    if (this._canPush) {\r\n      // TODO(jelbourn): after pushing, the opening \"direction\" of the overlay might not make sense.\r\n      this._isPushed = true;\r\n      this._applyPosition(fallback!.position, fallback!.originPoint);\r\n      return;\r\n    }\r\n\r\n    // All options for getting the overlay within the viewport have been exhausted, so go with the\r\n    // position that went off-screen the least.\r\n    this._applyPosition(fallback!.position, fallback!.originPoint);\r\n  }\r\n\r\n  detach(): void {\r\n    this._clearPanelClasses();\r\n    this._lastPosition = null;\r\n    this._previousPushAmount = null;\r\n    this._resizeSubscription.unsubscribe();\r\n  }\r\n\r\n  /** Cleanup after the element gets destroyed. */\r\n  dispose(): void {\r\n    if (this._isDisposed) {\r\n      return;\r\n    }\r\n\r\n    // We can't use `_resetBoundingBoxStyles` here, because it resets\r\n    // some properties to zero, rather than removing them.\r\n    if (this._boundingBox) {\r\n      extendStyles(this._boundingBox.style, {\r\n        top: '',\r\n        left: '',\r\n        right: '',\r\n        bottom: '',\r\n        height: '',\r\n        width: '',\r\n        alignItems: '',\r\n        justifyContent: '',\r\n      } as CSSStyleDeclaration);\r\n    }\r\n\r\n    if (this._pane) {\r\n      this._resetOverlayElementStyles();\r\n    }\r\n\r\n    if (this._overlayRef) {\r\n      this._overlayRef.hostElement.classList.remove(boundingBoxClass);\r\n    }\r\n\r\n    this.detach();\r\n    this._positionChanges.complete();\r\n    this._overlayRef = this._boundingBox = null!;\r\n    this._isDisposed = true;\r\n  }\r\n\r\n  /**\r\n   * This re-aligns the overlay element with the trigger in its last calculated position,\r\n   * even if a position higher in the \"preferred positions\" list would now fit. This\r\n   * allows one to re-align the panel without changing the orientation of the panel.\r\n   */\r\n  reapplyLastPosition(): void {\r\n    if (!this._isDisposed && (!this._platform || this._platform.isBrowser)) {\r\n      this._originRect = this._getOriginRect();\r\n      this._overlayRect = this._pane.getBoundingClientRect();\r\n      this._viewportRect = this._getNarrowedViewportRect();\r\n\r\n      const lastPosition = this._lastPosition || this._preferredPositions[0];\r\n      const originPoint = this._getOriginPoint(this._originRect, lastPosition);\r\n\r\n      this._applyPosition(lastPosition, originPoint);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Sets the list of Scrollable containers that host the origin element so that\r\n   * on reposition we can evaluate if it or the overlay has been clipped or outside view. Every\r\n   * Scrollable must be an ancestor element of the strategy's origin element.\r\n   */\r\n  withScrollableContainers(scrollables: CdkScrollable[]): this {\r\n    this._scrollables = scrollables;\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * Adds new preferred positions.\r\n   * @param positions List of positions options for this overlay.\r\n   */\r\n  withPositions(positions: ConnectedPosition[]): this {\r\n    this._preferredPositions = positions;\r\n\r\n    // If the last calculated position object isn't part of the positions anymore, clear\r\n    // it in order to avoid it being picked up if the consumer tries to re-apply.\r\n    if (positions.indexOf(this._lastPosition!) === -1) {\r\n      this._lastPosition = null;\r\n    }\r\n\r\n    this._validatePositions();\r\n\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * Sets a minimum distance the overlay may be positioned to the edge of the viewport.\r\n   * @param margin Required margin between the overlay and the viewport edge in pixels.\r\n   */\r\n  withViewportMargin(margin: number): this {\r\n    this._viewportMargin = margin;\r\n    return this;\r\n  }\r\n\r\n  /** Sets whether the overlay's width and height can be constrained to fit within the viewport. */\r\n  withFlexibleDimensions(flexibleDimensions = true): this {\r\n    this._hasFlexibleDimensions = flexibleDimensions;\r\n    return this;\r\n  }\r\n\r\n  /** Sets whether the overlay can grow after the initial open via flexible width/height. */\r\n  withGrowAfterOpen(growAfterOpen = true): this {\r\n    this._growAfterOpen = growAfterOpen;\r\n    return this;\r\n  }\r\n\r\n  /** Sets whether the overlay can be pushed on-screen if none of the provided positions fit. */\r\n  withPush(canPush = true): this {\r\n    this._canPush = canPush;\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * Sets whether the overlay's position should be locked in after it is positioned\r\n   * initially. When an overlay is locked in, it won't attempt to reposition itself\r\n   * when the position is re-applied (e.g. when the user scrolls away).\r\n   * @param isLocked Whether the overlay should locked in.\r\n   */\r\n  withLockedPosition(isLocked = true): this {\r\n    this._positionLocked = isLocked;\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * Sets the origin, relative to which to position the overlay.\r\n   * Using an element origin is useful for building components that need to be positioned\r\n   * relatively to a trigger (e.g. dropdown menus or tooltips), whereas using a point can be\r\n   * used for cases like contextual menus which open relative to the user's pointer.\r\n   * @param origin Reference to the new origin.\r\n   */\r\n  setOrigin(origin: FlexibleConnectedPositionStrategyOrigin): this {\r\n    this._origin = origin;\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * Sets the default offset for the overlay's connection point on the x-axis.\r\n   * @param offset New offset in the X axis.\r\n   */\r\n  withDefaultOffsetX(offset: number): this {\r\n    this._offsetX = offset;\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * Sets the default offset for the overlay's connection point on the y-axis.\r\n   * @param offset New offset in the Y axis.\r\n   */\r\n  withDefaultOffsetY(offset: number): this {\r\n    this._offsetY = offset;\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * Configures that the position strategy should set a `transform-origin` on some elements\r\n   * inside the overlay, depending on the current position that is being applied. This is\r\n   * useful for the cases where the origin of an animation can change depending on the\r\n   * alignment of the overlay.\r\n   * @param selector CSS selector that will be used to find the target\r\n   *    elements onto which to set the transform origin.\r\n   */\r\n  withTransformOriginOn(selector: string): this {\r\n    this._transformOriginSelector = selector;\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * Gets the (x, y) coordinate of a connection point on the origin based on a relative position.\r\n   */\r\n  private _getOriginPoint(originRect: ClientRect, pos: ConnectedPosition): Point {\r\n    let x: number;\r\n    if (pos.originX == 'center') {\r\n      // Note: when centering we should always use the `left`\r\n      // offset, otherwise the position will be wrong in RTL.\r\n      x = originRect.left + (originRect.width / 2);\r\n    } else {\r\n      const startX = this._isRtl() ? originRect.right : originRect.left;\r\n      const endX = this._isRtl() ? originRect.left : originRect.right;\r\n      x = pos.originX == 'start' ? startX : endX;\r\n    }\r\n\r\n    let y: number;\r\n    if (pos.originY == 'center') {\r\n      y = originRect.top + (originRect.height / 2);\r\n    } else {\r\n      y = pos.originY == 'top' ? originRect.top : originRect.bottom;\r\n    }\r\n\r\n    return {x, y};\r\n  }\r\n\r\n\r\n  /**\r\n   * Gets the (x, y) coordinate of the top-left corner of the overlay given a given position and\r\n   * origin point to which the overlay should be connected.\r\n   */\r\n  private _getOverlayPoint(\r\n      originPoint: Point,\r\n      overlayRect: ClientRect,\r\n      pos: ConnectedPosition): Point {\r\n\r\n    // Calculate the (overlayStartX, overlayStartY), the start of the\r\n    // potential overlay position relative to the origin point.\r\n    let overlayStartX: number;\r\n    if (pos.overlayX == 'center') {\r\n      overlayStartX = -overlayRect.width / 2;\r\n    } else if (pos.overlayX === 'start') {\r\n      overlayStartX = this._isRtl() ? -overlayRect.width : 0;\r\n    } else {\r\n      overlayStartX = this._isRtl() ? 0 : -overlayRect.width;\r\n    }\r\n\r\n    let overlayStartY: number;\r\n    if (pos.overlayY == 'center') {\r\n      overlayStartY = -overlayRect.height / 2;\r\n    } else {\r\n      overlayStartY = pos.overlayY == 'top' ? 0 : -overlayRect.height;\r\n    }\r\n\r\n    // The (x, y) coordinates of the overlay.\r\n    return {\r\n      x: originPoint.x + overlayStartX,\r\n      y: originPoint.y + overlayStartY,\r\n    };\r\n  }\r\n\r\n  /** Gets how well an overlay at the given point will fit within the viewport. */\r\n  private _getOverlayFit(point: Point, rawOverlayRect: ClientRect, viewport: ClientRect,\r\n    position: ConnectedPosition): OverlayFit {\r\n\r\n    // Round the overlay rect when comparing against the\r\n    // viewport, because the viewport is always rounded.\r\n    const overlay = getRoundedBoundingClientRect(rawOverlayRect);\r\n    let {x, y} = point;\r\n    let offsetX = this._getOffset(position, 'x');\r\n    let offsetY = this._getOffset(position, 'y');\r\n\r\n    // Account for the offsets since they could push the overlay out of the viewport.\r\n    if (offsetX) {\r\n      x += offsetX;\r\n    }\r\n\r\n    if (offsetY) {\r\n      y += offsetY;\r\n    }\r\n\r\n    // How much the overlay would overflow at this position, on each side.\r\n    let leftOverflow = 0 - x;\r\n    let rightOverflow = (x + overlay.width) - viewport.width;\r\n    let topOverflow = 0 - y;\r\n    let bottomOverflow = (y + overlay.height) - viewport.height;\r\n\r\n    // Visible parts of the element on each axis.\r\n    let visibleWidth = this._subtractOverflows(overlay.width, leftOverflow, rightOverflow);\r\n    let visibleHeight = this._subtractOverflows(overlay.height, topOverflow, bottomOverflow);\r\n    let visibleArea = visibleWidth * visibleHeight;\r\n\r\n    return {\r\n      visibleArea,\r\n      isCompletelyWithinViewport: (overlay.width * overlay.height) === visibleArea,\r\n      fitsInViewportVertically: visibleHeight === overlay.height,\r\n      fitsInViewportHorizontally: visibleWidth == overlay.width,\r\n    };\r\n  }\r\n\r\n  /**\r\n   * Whether the overlay can fit within the viewport when it may resize either its width or height.\r\n   * @param fit How well the overlay fits in the viewport at some position.\r\n   * @param point The (x, y) coordinates of the overlat at some position.\r\n   * @param viewport The geometry of the viewport.\r\n   */\r\n  private _canFitWithFlexibleDimensions(fit: OverlayFit, point: Point, viewport: ClientRect) {\r\n    if (this._hasFlexibleDimensions) {\r\n      const availableHeight = viewport.bottom - point.y;\r\n      const availableWidth = viewport.right - point.x;\r\n      const minHeight = getPixelValue(this._overlayRef.getConfig().minHeight);\r\n      const minWidth = getPixelValue(this._overlayRef.getConfig().minWidth);\r\n\r\n      const verticalFit = fit.fitsInViewportVertically ||\r\n          (minHeight != null && minHeight <= availableHeight);\r\n      const horizontalFit = fit.fitsInViewportHorizontally ||\r\n          (minWidth != null && minWidth <= availableWidth);\r\n\r\n      return verticalFit && horizontalFit;\r\n    }\r\n    return false;\r\n  }\r\n\r\n  /**\r\n   * Gets the point at which the overlay can be \"pushed\" on-screen. If the overlay is larger than\r\n   * the viewport, the top-left corner will be pushed on-screen (with overflow occuring on the\r\n   * right and bottom).\r\n   *\r\n   * @param start Starting point from which the overlay is pushed.\r\n   * @param overlay Dimensions of the overlay.\r\n   * @param scrollPosition Current viewport scroll position.\r\n   * @returns The point at which to position the overlay after pushing. This is effectively a new\r\n   *     originPoint.\r\n   */\r\n  private _pushOverlayOnScreen(start: Point,\r\n                               rawOverlayRect: ClientRect,\r\n                               scrollPosition: ViewportScrollPosition): Point {\r\n    // If the position is locked and we've pushed the overlay already, reuse the previous push\r\n    // amount, rather than pushing it again. If we were to continue pushing, the element would\r\n    // remain in the viewport, which goes against the expectations when position locking is enabled.\r\n    if (this._previousPushAmount && this._positionLocked) {\r\n      return {\r\n        x: start.x + this._previousPushAmount.x,\r\n        y: start.y + this._previousPushAmount.y\r\n      };\r\n    }\r\n\r\n    // Round the overlay rect when comparing against the\r\n    // viewport, because the viewport is always rounded.\r\n    const overlay = getRoundedBoundingClientRect(rawOverlayRect);\r\n    const viewport = this._viewportRect;\r\n\r\n    // Determine how much the overlay goes outside the viewport on each\r\n    // side, which we'll use to decide which direction to push it.\r\n    const overflowRight = Math.max(start.x + overlay.width - viewport.width, 0);\r\n    const overflowBottom = Math.max(start.y + overlay.height - viewport.height, 0);\r\n    const overflowTop = Math.max(viewport.top - scrollPosition.top - start.y, 0);\r\n    const overflowLeft = Math.max(viewport.left - scrollPosition.left - start.x, 0);\r\n\r\n    // Amount by which to push the overlay in each axis such that it remains on-screen.\r\n    let pushX = 0;\r\n    let pushY = 0;\r\n\r\n    // If the overlay fits completely within the bounds of the viewport, push it from whichever\r\n    // direction is goes off-screen. Otherwise, push the top-left corner such that its in the\r\n    // viewport and allow for the trailing end of the overlay to go out of bounds.\r\n    if (overlay.width <= viewport.width) {\r\n      pushX = overflowLeft || -overflowRight;\r\n    } else {\r\n      pushX = start.x < this._viewportMargin ? (viewport.left - scrollPosition.left) - start.x : 0;\r\n    }\r\n\r\n    if (overlay.height <= viewport.height) {\r\n      pushY = overflowTop || -overflowBottom;\r\n    } else {\r\n      pushY = start.y < this._viewportMargin ? (viewport.top - scrollPosition.top) - start.y : 0;\r\n    }\r\n\r\n    this._previousPushAmount = {x: pushX, y: pushY};\r\n\r\n    return {\r\n      x: start.x + pushX,\r\n      y: start.y + pushY,\r\n    };\r\n  }\r\n\r\n  /**\r\n   * Applies a computed position to the overlay and emits a position change.\r\n   * @param position The position preference\r\n   * @param originPoint The point on the origin element where the overlay is connected.\r\n   */\r\n  private _applyPosition(position: ConnectedPosition, originPoint: Point) {\r\n    this._setTransformOrigin(position);\r\n    this._setOverlayElementStyles(originPoint, position);\r\n    this._setBoundingBoxStyles(originPoint, position);\r\n\r\n    if (position.panelClass) {\r\n      this._addPanelClasses(position.panelClass);\r\n    }\r\n\r\n    // Save the last connected position in case the position needs to be re-calculated.\r\n    this._lastPosition = position;\r\n\r\n    // Notify that the position has been changed along with its change properties.\r\n    // We only emit if we've got any subscriptions, because the scroll visibility\r\n    // calculcations can be somewhat expensive.\r\n    if (this._positionChanges.observers.length) {\r\n      const scrollableViewProperties = this._getScrollVisibility();\r\n      const changeEvent = new ConnectedOverlayPositionChange(position, scrollableViewProperties);\r\n      this._positionChanges.next(changeEvent);\r\n    }\r\n\r\n    this._isInitialRender = false;\r\n  }\r\n\r\n  /** Sets the transform origin based on the configured selector and the passed-in position.  */\r\n  private _setTransformOrigin(position: ConnectedPosition) {\r\n    if (!this._transformOriginSelector) {\r\n      return;\r\n    }\r\n\r\n    const elements: NodeListOf<HTMLElement> =\r\n        this._boundingBox!.querySelectorAll(this._transformOriginSelector);\r\n    let xOrigin: 'left' | 'right' | 'center';\r\n    let yOrigin: 'top' | 'bottom' | 'center' = position.overlayY;\r\n\r\n    if (position.overlayX === 'center') {\r\n      xOrigin = 'center';\r\n    } else if (this._isRtl()) {\r\n      xOrigin = position.overlayX === 'start' ? 'right' : 'left';\r\n    } else {\r\n      xOrigin = position.overlayX === 'start' ? 'left' : 'right';\r\n    }\r\n\r\n    for (let i = 0; i < elements.length; i++) {\r\n      elements[i].style.transformOrigin = `${xOrigin} ${yOrigin}`;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Gets the position and size of the overlay's sizing container.\r\n   *\r\n   * This method does no measuring and applies no styles so that we can cheaply compute the\r\n   * bounds for all positions and choose the best fit based on these results.\r\n   */\r\n  private _calculateBoundingBoxRect(origin: Point, position: ConnectedPosition): BoundingBoxRect {\r\n    const viewport = this._viewportRect;\r\n    const isRtl = this._isRtl();\r\n    let height: number, top: number, bottom: number;\r\n\r\n    if (position.overlayY === 'top') {\r\n      // Overlay is opening \"downward\" and thus is bound by the bottom viewport edge.\r\n      top = origin.y;\r\n      height = viewport.height - top + this._viewportMargin;\r\n    } else if (position.overlayY === 'bottom') {\r\n      // Overlay is opening \"upward\" and thus is bound by the top viewport edge. We need to add\r\n      // the viewport margin back in, because the viewport rect is narrowed down to remove the\r\n      // margin, whereas the `origin` position is calculated based on its `ClientRect`.\r\n      bottom = viewport.height - origin.y + this._viewportMargin * 2;\r\n      height = viewport.height - bottom + this._viewportMargin;\r\n    } else {\r\n      // If neither top nor bottom, it means that the overlay is vertically centered on the\r\n      // origin point. Note that we want the position relative to the viewport, rather than\r\n      // the page, which is why we don't use something like `viewport.bottom - origin.y` and\r\n      // `origin.y - viewport.top`.\r\n      const smallestDistanceToViewportEdge =\r\n          Math.min(viewport.bottom - origin.y + viewport.top, origin.y);\r\n\r\n      const previousHeight = this._lastBoundingBoxSize.height;\r\n\r\n      height = smallestDistanceToViewportEdge * 2;\r\n      top = origin.y - smallestDistanceToViewportEdge;\r\n\r\n      if (height > previousHeight && !this._isInitialRender && !this._growAfterOpen) {\r\n        top = origin.y - (previousHeight / 2);\r\n      }\r\n    }\r\n\r\n    // The overlay is opening 'right-ward' (the content flows to the right).\r\n    const isBoundedByRightViewportEdge =\r\n        (position.overlayX === 'start' && !isRtl) ||\r\n        (position.overlayX === 'end' && isRtl);\r\n\r\n    // The overlay is opening 'left-ward' (the content flows to the left).\r\n    const isBoundedByLeftViewportEdge =\r\n        (position.overlayX === 'end' && !isRtl) ||\r\n        (position.overlayX === 'start' && isRtl);\r\n\r\n    let width: number, left: number, right: number;\r\n\r\n    if (isBoundedByLeftViewportEdge) {\r\n      right = viewport.width - origin.x + this._viewportMargin;\r\n      width = origin.x - this._viewportMargin;\r\n    } else if (isBoundedByRightViewportEdge) {\r\n      left = origin.x;\r\n      width = viewport.right - origin.x;\r\n    } else {\r\n      // If neither start nor end, it means that the overlay is horizontally centered on the\r\n      // origin point. Note that we want the position relative to the viewport, rather than\r\n      // the page, which is why we don't use something like `viewport.right - origin.x` and\r\n      // `origin.x - viewport.left`.\r\n      const smallestDistanceToViewportEdge =\r\n          Math.min(viewport.right - origin.x + viewport.left, origin.x);\r\n      const previousWidth = this._lastBoundingBoxSize.width;\r\n\r\n      width = smallestDistanceToViewportEdge * 2;\r\n      left = origin.x - smallestDistanceToViewportEdge;\r\n\r\n      if (width > previousWidth && !this._isInitialRender && !this._growAfterOpen) {\r\n        left = origin.x - (previousWidth / 2);\r\n      }\r\n    }\r\n\r\n    return {top: top!, left: left!, bottom: bottom!, right: right!, width, height};\r\n  }\r\n\r\n  /**\r\n   * Sets the position and size of the overlay's sizing wrapper. The wrapper is positioned on the\r\n   * origin's connection point and stetches to the bounds of the viewport.\r\n   *\r\n   * @param origin The point on the origin element where the overlay is connected.\r\n   * @param position The position preference\r\n   */\r\n  private _setBoundingBoxStyles(origin: Point, position: ConnectedPosition): void {\r\n    const boundingBoxRect = this._calculateBoundingBoxRect(origin, position);\r\n\r\n    // It's weird if the overlay *grows* while scrolling, so we take the last size into account\r\n    // when applying a new size.\r\n    if (!this._isInitialRender && !this._growAfterOpen) {\r\n      boundingBoxRect.height = Math.min(boundingBoxRect.height, this._lastBoundingBoxSize.height);\r\n      boundingBoxRect.width = Math.min(boundingBoxRect.width, this._lastBoundingBoxSize.width);\r\n    }\r\n\r\n    const styles = {} as CSSStyleDeclaration;\r\n\r\n    if (this._hasExactPosition()) {\r\n      styles.top = styles.left = '0';\r\n      styles.bottom = styles.right = styles.maxHeight = styles.maxWidth = '';\r\n      styles.width = styles.height = '100%';\r\n    } else {\r\n      const maxHeight = this._overlayRef.getConfig().maxHeight;\r\n      const maxWidth = this._overlayRef.getConfig().maxWidth;\r\n\r\n      styles.height = coerceCssPixelValue(boundingBoxRect.height);\r\n      styles.top = coerceCssPixelValue(boundingBoxRect.top);\r\n      styles.bottom = coerceCssPixelValue(boundingBoxRect.bottom);\r\n      styles.width = coerceCssPixelValue(boundingBoxRect.width);\r\n      styles.left = coerceCssPixelValue(boundingBoxRect.left);\r\n      styles.right = coerceCssPixelValue(boundingBoxRect.right);\r\n\r\n      // Push the pane content towards the proper direction.\r\n      if (position.overlayX === 'center') {\r\n        styles.alignItems = 'center';\r\n      } else {\r\n        styles.alignItems = position.overlayX === 'end' ? 'flex-end' : 'flex-start';\r\n      }\r\n\r\n      if (position.overlayY === 'center') {\r\n        styles.justifyContent = 'center';\r\n      } else {\r\n        styles.justifyContent = position.overlayY === 'bottom' ? 'flex-end' : 'flex-start';\r\n      }\r\n\r\n      if (maxHeight) {\r\n        styles.maxHeight = coerceCssPixelValue(maxHeight);\r\n      }\r\n\r\n      if (maxWidth) {\r\n        styles.maxWidth = coerceCssPixelValue(maxWidth);\r\n      }\r\n    }\r\n\r\n    this._lastBoundingBoxSize = boundingBoxRect;\r\n\r\n    extendStyles(this._boundingBox!.style, styles);\r\n  }\r\n\r\n  /** Resets the styles for the bounding box so that a new positioning can be computed. */\r\n  private _resetBoundingBoxStyles() {\r\n    extendStyles(this._boundingBox!.style, {\r\n      top: '0',\r\n      left: '0',\r\n      right: '0',\r\n      bottom: '0',\r\n      height: '',\r\n      width: '',\r\n      alignItems: '',\r\n      justifyContent: '',\r\n    } as CSSStyleDeclaration);\r\n  }\r\n\r\n  /** Resets the styles for the overlay pane so that a new positioning can be computed. */\r\n  private _resetOverlayElementStyles() {\r\n    extendStyles(this._pane.style, {\r\n      top: '',\r\n      left: '',\r\n      bottom: '',\r\n      right: '',\r\n      position: '',\r\n      transform: '',\r\n    } as CSSStyleDeclaration);\r\n  }\r\n\r\n  /** Sets positioning styles to the overlay element. */\r\n  private _setOverlayElementStyles(originPoint: Point, position: ConnectedPosition): void {\r\n    const styles = {} as CSSStyleDeclaration;\r\n    const hasExactPosition = this._hasExactPosition();\r\n    const hasFlexibleDimensions = this._hasFlexibleDimensions;\r\n    const config = this._overlayRef.getConfig();\r\n\r\n    if (hasExactPosition) {\r\n      const scrollPosition = this._viewportRuler.getViewportScrollPosition();\r\n      extendStyles(styles, this._getExactOverlayY(position, originPoint, scrollPosition));\r\n      extendStyles(styles, this._getExactOverlayX(position, originPoint, scrollPosition));\r\n    } else {\r\n      styles.position = 'static';\r\n    }\r\n\r\n    // Use a transform to apply the offsets. We do this because the `center` positions rely on\r\n    // being in the normal flex flow and setting a `top` / `left` at all will completely throw\r\n    // off the position. We also can't use margins, because they won't have an effect in some\r\n    // cases where the element doesn't have anything to \"push off of\". Finally, this works\r\n    // better both with flexible and non-flexible positioning.\r\n    let transformString = '';\r\n    let offsetX = this._getOffset(position, 'x');\r\n    let offsetY = this._getOffset(position, 'y');\r\n\r\n    if (offsetX) {\r\n      transformString += `translateX(${offsetX}px) `;\r\n    }\r\n\r\n    if (offsetY) {\r\n      transformString += `translateY(${offsetY}px)`;\r\n    }\r\n\r\n    styles.transform = transformString.trim();\r\n\r\n    // If a maxWidth or maxHeight is specified on the overlay, we remove them. We do this because\r\n    // we need these values to both be set to \"100%\" for the automatic flexible sizing to work.\r\n    // The maxHeight and maxWidth are set on the boundingBox in order to enforce the constraint.\r\n    // Note that this doesn't apply when we have an exact position, in which case we do want to\r\n    // apply them because they'll be cleared from the bounding box.\r\n    if (config.maxHeight) {\r\n      if (hasExactPosition) {\r\n        styles.maxHeight = coerceCssPixelValue(config.maxHeight);\r\n      } else if (hasFlexibleDimensions) {\r\n        styles.maxHeight = '';\r\n      }\r\n    }\r\n\r\n    if (config.maxWidth) {\r\n      if (hasExactPosition) {\r\n        styles.maxWidth = coerceCssPixelValue(config.maxWidth);\r\n      } else if (hasFlexibleDimensions) {\r\n        styles.maxWidth = '';\r\n      }\r\n    }\r\n\r\n    extendStyles(this._pane.style, styles);\r\n  }\r\n\r\n  /** Gets the exact top/bottom for the overlay when not using flexible sizing or when pushing. */\r\n  private _getExactOverlayY(position: ConnectedPosition,\r\n                            originPoint: Point,\r\n                            scrollPosition: ViewportScrollPosition) {\r\n    // Reset any existing styles. This is necessary in case the\r\n    // preferred position has changed since the last `apply`.\r\n    let styles = {top: '', bottom: ''} as CSSStyleDeclaration;\r\n    let overlayPoint = this._getOverlayPoint(originPoint, this._overlayRect, position);\r\n\r\n    if (this._isPushed) {\r\n      overlayPoint = this._pushOverlayOnScreen(overlayPoint, this._overlayRect, scrollPosition);\r\n    }\r\n\r\n    let virtualKeyboardOffset =\r\n        this._overlayContainer.getContainerElement().getBoundingClientRect().top;\r\n\r\n    // Normally this would be zero, however when the overlay is attached to an input (e.g. in an\r\n    // autocomplete), mobile browsers will shift everything in order to put the input in the middle\r\n    // of the screen and to make space for the virtual keyboard. We need to account for this offset,\r\n    // otherwise our positioning will be thrown off.\r\n    overlayPoint.y -= virtualKeyboardOffset;\r\n\r\n    // We want to set either `top` or `bottom` based on whether the overlay wants to appear\r\n    // above or below the origin and the direction in which the element will expand.\r\n    if (position.overlayY === 'bottom') {\r\n      // When using `bottom`, we adjust the y position such that it is the distance\r\n      // from the bottom of the viewport rather than the top.\r\n      const documentHeight = this._document.documentElement!.clientHeight;\r\n      styles.bottom = `${documentHeight - (overlayPoint.y + this._overlayRect.height)}px`;\r\n    } else {\r\n      styles.top = coerceCssPixelValue(overlayPoint.y);\r\n    }\r\n\r\n    return styles;\r\n  }\r\n\r\n  /** Gets the exact left/right for the overlay when not using flexible sizing or when pushing. */\r\n  private _getExactOverlayX(position: ConnectedPosition,\r\n                            originPoint: Point,\r\n                            scrollPosition: ViewportScrollPosition) {\r\n    // Reset any existing styles. This is necessary in case the preferred position has\r\n    // changed since the last `apply`.\r\n    let styles = {left: '', right: ''} as CSSStyleDeclaration;\r\n    let overlayPoint = this._getOverlayPoint(originPoint, this._overlayRect, position);\r\n\r\n    if (this._isPushed) {\r\n      overlayPoint = this._pushOverlayOnScreen(overlayPoint, this._overlayRect, scrollPosition);\r\n    }\r\n\r\n    // We want to set either `left` or `right` based on whether the overlay wants to appear \"before\"\r\n    // or \"after\" the origin, which determines the direction in which the element will expand.\r\n    // For the horizontal axis, the meaning of \"before\" and \"after\" change based on whether the\r\n    // page is in RTL or LTR.\r\n    let horizontalStyleProperty: 'left' | 'right';\r\n\r\n    if (this._isRtl()) {\r\n      horizontalStyleProperty = position.overlayX === 'end' ? 'left' : 'right';\r\n    } else {\r\n      horizontalStyleProperty = position.overlayX === 'end' ? 'right' : 'left';\r\n    }\r\n\r\n    // When we're setting `right`, we adjust the x position such that it is the distance\r\n    // from the right edge of the viewport rather than the left edge.\r\n    if (horizontalStyleProperty === 'right') {\r\n      const documentWidth = this._document.documentElement!.clientWidth;\r\n      styles.right = `${documentWidth - (overlayPoint.x + this._overlayRect.width)}px`;\r\n    } else {\r\n      styles.left = coerceCssPixelValue(overlayPoint.x);\r\n    }\r\n\r\n    return styles;\r\n  }\r\n\r\n  /**\r\n   * Gets the view properties of the trigger and overlay, including whether they are clipped\r\n   * or completely outside the view of any of the strategy's scrollables.\r\n   */\r\n  private _getScrollVisibility(): ScrollingVisibility {\r\n    // Note: needs fresh rects since the position could've changed.\r\n    const originBounds = this._getOriginRect();\r\n    const overlayBounds =  this._pane.getBoundingClientRect();\r\n\r\n    // TODO(jelbourn): instead of needing all of the client rects for these scrolling containers\r\n    // every time, we should be able to use the scrollTop of the containers if the size of those\r\n    // containers hasn't changed.\r\n    const scrollContainerBounds = this._scrollables.map(scrollable => {\r\n      return scrollable.getElementRef().nativeElement.getBoundingClientRect();\r\n    });\r\n\r\n    return {\r\n      isOriginClipped: isElementClippedByScrolling(originBounds, scrollContainerBounds),\r\n      isOriginOutsideView: isElementScrolledOutsideView(originBounds, scrollContainerBounds),\r\n      isOverlayClipped: isElementClippedByScrolling(overlayBounds, scrollContainerBounds),\r\n      isOverlayOutsideView: isElementScrolledOutsideView(overlayBounds, scrollContainerBounds),\r\n    };\r\n  }\r\n\r\n  /** Subtracts the amount that an element is overflowing on an axis from its length. */\r\n  private _subtractOverflows(length: number, ...overflows: number[]): number {\r\n    return overflows.reduce((currentValue: number, currentOverflow: number) => {\r\n      return currentValue - Math.max(currentOverflow, 0);\r\n    }, length);\r\n  }\r\n\r\n  /** Narrows the given viewport rect by the current _viewportMargin. */\r\n  private _getNarrowedViewportRect(): ClientRect {\r\n    // We recalculate the viewport rect here ourselves, rather than using the ViewportRuler,\r\n    // because we want to use the `clientWidth` and `clientHeight` as the base. The difference\r\n    // being that the client properties don't include the scrollbar, as opposed to `innerWidth`\r\n    // and `innerHeight` that do. This is necessary, because the overlay container uses\r\n    // 100% `width` and `height` which don't include the scrollbar either.\r\n    const width = this._document.documentElement!.clientWidth;\r\n    const height = this._document.documentElement!.clientHeight;\r\n    const scrollPosition = this._viewportRuler.getViewportScrollPosition();\r\n\r\n    return {\r\n      top:    scrollPosition.top + this._viewportMargin,\r\n      left:   scrollPosition.left + this._viewportMargin,\r\n      right:  scrollPosition.left + width - this._viewportMargin,\r\n      bottom: scrollPosition.top + height - this._viewportMargin,\r\n      width:  width  - (2 * this._viewportMargin),\r\n      height: height - (2 * this._viewportMargin),\r\n    };\r\n  }\r\n\r\n  /** Whether the we're dealing with an RTL context */\r\n  private _isRtl() {\r\n    return this._overlayRef.getDirection() === 'rtl';\r\n  }\r\n\r\n  /** Determines whether the overlay uses exact or flexible positioning. */\r\n  private _hasExactPosition() {\r\n    return !this._hasFlexibleDimensions || this._isPushed;\r\n  }\r\n\r\n  /** Retrieves the offset of a position along the x or y axis. */\r\n  private _getOffset(position: ConnectedPosition, axis: 'x' | 'y') {\r\n    if (axis === 'x') {\r\n      // We don't do something like `position['offset' + axis]` in\r\n      // order to avoid breking minifiers that rename properties.\r\n      return position.offsetX == null ? this._offsetX : position.offsetX;\r\n    }\r\n\r\n    return position.offsetY == null ? this._offsetY : position.offsetY;\r\n  }\r\n\r\n  /** Validates that the current position match the expected values. */\r\n  private _validatePositions(): void {\r\n    if (typeof ngDevMode === 'undefined' || ngDevMode) {\r\n      if (!this._preferredPositions.length) {\r\n        throw Error('FlexibleConnectedPositionStrategy: At least one position is required.');\r\n      }\r\n\r\n      // TODO(crisbeto): remove these once Angular's template type\r\n      // checking is advanced enough to catch these cases.\r\n      this._preferredPositions.forEach(pair => {\r\n        validateHorizontalPosition('originX', pair.originX);\r\n        validateVerticalPosition('originY', pair.originY);\r\n        validateHorizontalPosition('overlayX', pair.overlayX);\r\n        validateVerticalPosition('overlayY', pair.overlayY);\r\n      });\r\n    }\r\n  }\r\n\r\n  /** Adds a single CSS class or an array of classes on the overlay panel. */\r\n  private _addPanelClasses(cssClasses: string | string[]) {\r\n    if (this._pane) {\r\n      coerceArray(cssClasses).forEach(cssClass => {\r\n        if (cssClass !== '' && this._appliedPanelClasses.indexOf(cssClass) === -1) {\r\n          this._appliedPanelClasses.push(cssClass);\r\n          this._pane.classList.add(cssClass);\r\n        }\r\n      });\r\n    }\r\n  }\r\n\r\n  /** Clears the classes that the position strategy has applied from the overlay panel. */\r\n  private _clearPanelClasses() {\r\n    if (this._pane) {\r\n      this._appliedPanelClasses.forEach(cssClass => {\r\n        this._pane.classList.remove(cssClass);\r\n      });\r\n      this._appliedPanelClasses = [];\r\n    }\r\n  }\r\n\r\n  /** Returns the ClientRect of the current origin. */\r\n  private _getOriginRect(): ClientRect {\r\n    const origin = this._origin;\r\n\r\n    if (origin instanceof ElementRef) {\r\n      return origin.nativeElement.getBoundingClientRect();\r\n    }\r\n\r\n    // Check for Element so SVG elements are also supported.\r\n    if (origin instanceof Element) {\r\n      return origin.getBoundingClientRect();\r\n    }\r\n\r\n    const width = origin.width || 0;\r\n    const height = origin.height || 0;\r\n\r\n    // If the origin is a point, return a client rect as if it was a 0x0 element at the point.\r\n    return {\r\n      top: origin.y,\r\n      bottom: origin.y + height,\r\n      left: origin.x,\r\n      right: origin.x + width,\r\n      height,\r\n      width\r\n    };\r\n  }\r\n}\r\n\r\n/** A simple (x, y) coordinate. */\r\ninterface Point {\r\n  x: number;\r\n  y: number;\r\n}\r\n\r\n/** Record of measurements for how an overlay (at a given position) fits into the viewport. */\r\ninterface OverlayFit {\r\n  /** Whether the overlay fits completely in the viewport. */\r\n  isCompletelyWithinViewport: boolean;\r\n\r\n  /** Whether the overlay fits in the viewport on the y-axis. */\r\n  fitsInViewportVertically: boolean;\r\n\r\n  /** Whether the overlay fits in the viewport on the x-axis. */\r\n  fitsInViewportHorizontally: boolean;\r\n\r\n  /** The total visible area (in px^2) of the overlay inside the viewport. */\r\n  visibleArea: number;\r\n}\r\n\r\n/** Record of the measurments determining whether an overlay will fit in a specific position. */\r\ninterface FallbackPosition {\r\n  position: ConnectedPosition;\r\n  originPoint: Point;\r\n  overlayPoint: Point;\r\n  overlayFit: OverlayFit;\r\n  overlayRect: ClientRect;\r\n}\r\n\r\n/** Position and size of the overlay sizing wrapper for a specific position. */\r\ninterface BoundingBoxRect {\r\n  top: number;\r\n  left: number;\r\n  bottom: number;\r\n  right: number;\r\n  height: number;\r\n  width: number;\r\n}\r\n\r\n/** Record of measures determining how well a given position will fit with flexible dimensions. */\r\ninterface FlexibleFit {\r\n  position: ConnectedPosition;\r\n  origin: Point;\r\n  overlayRect: ClientRect;\r\n  boundingBoxRect: BoundingBoxRect;\r\n}\r\n\r\n/** A connected position as specified by the user. */\r\nexport interface ConnectedPosition {\r\n  originX: 'start' | 'center' | 'end';\r\n  originY: 'top' | 'center' | 'bottom';\r\n\r\n  overlayX: 'start' | 'center' | 'end';\r\n  overlayY: 'top' | 'center' | 'bottom';\r\n\r\n  weight?: number;\r\n  offsetX?: number;\r\n  offsetY?: number;\r\n  panelClass?: string | string[];\r\n}\r\n\r\n/** Shallow-extends a stylesheet object with another stylesheet object. */\r\nfunction extendStyles(destination: CSSStyleDeclaration,\r\n                      source: CSSStyleDeclaration): CSSStyleDeclaration {\r\n  for (let key in source) {\r\n    if (source.hasOwnProperty(key)) {\r\n      destination[key] = source[key];\r\n    }\r\n  }\r\n\r\n  return destination;\r\n}\r\n\r\n\r\n/**\r\n * Extracts the pixel value as a number from a value, if it's a number\r\n * or a CSS pixel string (e.g. `1337px`). Otherwise returns null.\r\n */\r\nfunction getPixelValue(input: number|string|null|undefined): number|null {\r\n  if (typeof input !== 'number' && input != null) {\r\n    const [value, units] = input.split(cssUnitPattern);\r\n    return (!units || units === 'px') ? parseFloat(value) : null;\r\n  }\r\n\r\n  return input || null;\r\n}\r\n\r\n/**\r\n * Gets a version of an element's bounding `ClientRect` where all the values are rounded down to\r\n * the nearest pixel. This allows us to account for the cases where there may be sub-pixel\r\n * deviations in the `ClientRect` returned by the browser (e.g. when zoomed in with a percentage\r\n * size, see #21350).\r\n */\r\nfunction getRoundedBoundingClientRect(clientRect: ClientRect): ClientRect {\r\n  return {\r\n    top: Math.floor(clientRect.top),\r\n    right: Math.floor(clientRect.right),\r\n    bottom: Math.floor(clientRect.bottom),\r\n    left: Math.floor(clientRect.left),\r\n    width: Math.floor(clientRect.width),\r\n    height: Math.floor(clientRect.height)\r\n  };\r\n}\r\n","/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n\r\nimport {Direction} from '@angular/cdk/bidi';\r\nimport {Platform} from '@angular/cdk/platform';\r\nimport {CdkScrollable, ViewportRuler} from '@angular/cdk/scrolling';\r\nimport {ElementRef} from '@angular/core';\r\nimport {Observable} from 'rxjs';\r\n\r\nimport {OverlayContainer} from '../overlay-container';\r\nimport {OverlayReference} from '../overlay-reference';\r\n\r\nimport {\r\n  ConnectedOverlayPositionChange,\r\n  ConnectionPositionPair,\r\n  OriginConnectionPosition,\r\n  OverlayConnectionPosition,\r\n} from './connected-position';\r\nimport {FlexibleConnectedPositionStrategy} from './flexible-connected-position-strategy';\r\nimport {PositionStrategy} from './position-strategy';\r\n\r\n/**\r\n * A strategy for positioning overlays. Using this strategy, an overlay is given an\r\n * implicit position relative to some origin element. The relative position is defined in terms of\r\n * a point on the origin element that is connected to a point on the overlay element. For example,\r\n * a basic dropdown is connecting the bottom-left corner of the origin to the top-left corner\r\n * of the overlay.\r\n * @deprecated Use `FlexibleConnectedPositionStrategy` instead.\r\n * @breaking-change 8.0.0\r\n */\r\nexport class ConnectedPositionStrategy implements PositionStrategy {\r\n  /**\r\n   * Reference to the underlying position strategy to which all the API calls are proxied.\r\n   * @docs-private\r\n   */\r\n  _positionStrategy: FlexibleConnectedPositionStrategy;\r\n\r\n  /** The overlay to which this strategy is attached. */\r\n  private _overlayRef: OverlayReference;\r\n\r\n  private _direction: Direction | null;\r\n\r\n  /** Ordered list of preferred positions, from most to least desirable. */\r\n  _preferredPositions: ConnectionPositionPair[] = [];\r\n\r\n  /** Emits an event when the connection point changes. */\r\n  readonly onPositionChange: Observable<ConnectedOverlayPositionChange>;\r\n\r\n  constructor(\r\n      originPos: OriginConnectionPosition, overlayPos: OverlayConnectionPosition,\r\n      connectedTo: ElementRef<HTMLElement>, viewportRuler: ViewportRuler, document: Document,\r\n      platform: Platform, overlayContainer: OverlayContainer) {\r\n    // Since the `ConnectedPositionStrategy` is deprecated and we don't want to maintain\r\n    // the extra logic, we create an instance of the positioning strategy that has some\r\n    // defaults that make it behave as the old position strategy and to which we'll\r\n    // proxy all of the API calls.\r\n    this._positionStrategy = new FlexibleConnectedPositionStrategy(\r\n                                 connectedTo, viewportRuler, document, platform, overlayContainer)\r\n                                 .withFlexibleDimensions(false)\r\n                                 .withPush(false)\r\n                                 .withViewportMargin(0);\r\n\r\n    this.withFallbackPosition(originPos, overlayPos);\r\n    this.onPositionChange = this._positionStrategy.positionChanges;\r\n  }\r\n\r\n  /** Ordered list of preferred positions, from most to least desirable. */\r\n  get positions(): ConnectionPositionPair[] {\r\n    return this._preferredPositions;\r\n  }\r\n\r\n  /** Attach this position strategy to an overlay. */\r\n  attach(overlayRef: OverlayReference): void {\r\n    this._overlayRef = overlayRef;\r\n    this._positionStrategy.attach(overlayRef);\r\n\r\n    if (this._direction) {\r\n      overlayRef.setDirection(this._direction);\r\n      this._direction = null;\r\n    }\r\n  }\r\n\r\n  /** Disposes all resources used by the position strategy. */\r\n  dispose() {\r\n    this._positionStrategy.dispose();\r\n  }\r\n\r\n  /** @docs-private */\r\n  detach() {\r\n    this._positionStrategy.detach();\r\n  }\r\n\r\n  /**\r\n   * Updates the position of the overlay element, using whichever preferred position relative\r\n   * to the origin fits on-screen.\r\n   * @docs-private\r\n   */\r\n  apply(): void {\r\n    this._positionStrategy.apply();\r\n  }\r\n\r\n  /**\r\n   * Re-positions the overlay element with the trigger in its last calculated position,\r\n   * even if a position higher in the \"preferred positions\" list would now fit. This\r\n   * allows one to re-align the panel without changing the orientation of the panel.\r\n   */\r\n  recalculateLastPosition(): void {\r\n    this._positionStrategy.reapplyLastPosition();\r\n  }\r\n\r\n  /**\r\n   * Sets the list of Scrollable containers that host the origin element so that\r\n   * on reposition we can evaluate if it or the overlay has been clipped or outside view. Every\r\n   * Scrollable must be an ancestor element of the strategy's origin element.\r\n   */\r\n  withScrollableContainers(scrollables: CdkScrollable[]) {\r\n    this._positionStrategy.withScrollableContainers(scrollables);\r\n  }\r\n\r\n  /**\r\n   * Adds a new preferred fallback position.\r\n   * @param originPos\r\n   * @param overlayPos\r\n   */\r\n  withFallbackPosition(\r\n      originPos: OriginConnectionPosition,\r\n      overlayPos: OverlayConnectionPosition,\r\n      offsetX?: number,\r\n      offsetY?: number): this {\r\n\r\n    const position = new ConnectionPositionPair(originPos, overlayPos, offsetX, offsetY);\r\n    this._preferredPositions.push(position);\r\n    this._positionStrategy.withPositions(this._preferredPositions);\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * Sets the layout direction so the overlay's position can be adjusted to match.\r\n   * @param dir New layout direction.\r\n   */\r\n  withDirection(dir: 'ltr' | 'rtl'): this {\r\n    // Since the direction might be declared before the strategy is attached,\r\n    // we save the value in a temporary property and we'll transfer it to the\r\n    // overlay ref on attachment.\r\n    if (this._overlayRef) {\r\n      this._overlayRef.setDirection(dir);\r\n    } else {\r\n      this._direction = dir;\r\n    }\r\n\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * Sets an offset for the overlay's connection point on the x-axis\r\n   * @param offset New offset in the X axis.\r\n   */\r\n  withOffsetX(offset: number): this {\r\n    this._positionStrategy.withDefaultOffsetX(offset);\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * Sets an offset for the overlay's connection point on the y-axis\r\n   * @param  offset New offset in the Y axis.\r\n   */\r\n  withOffsetY(offset: number): this {\r\n    this._positionStrategy.withDefaultOffsetY(offset);\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * Sets whether the overlay's position should be locked in after it is positioned\r\n   * initially. When an overlay is locked in, it won't attempt to reposition itself\r\n   * when the position is re-applied (e.g. when the user scrolls away).\r\n   * @param isLocked Whether the overlay should locked in.\r\n   */\r\n  withLockedPosition(isLocked: boolean): this {\r\n    this._positionStrategy.withLockedPosition(isLocked);\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * Overwrites the current set of positions with an array of new ones.\r\n   * @param positions Position pairs to be set on the strategy.\r\n   */\r\n  withPositions(positions: ConnectionPositionPair[]): this {\r\n    this._preferredPositions = positions.slice();\r\n    this._positionStrategy.withPositions(this._preferredPositions);\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * Sets the origin element, relative to which to position the overlay.\r\n   * @param origin Reference to the new origin element.\r\n   */\r\n  setOrigin(origin: ElementRef): this {\r\n    this._positionStrategy.setOrigin(origin);\r\n    return this;\r\n  }\r\n}\r\n","/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n\r\nimport {PositionStrategy} from './position-strategy';\r\nimport {OverlayReference} from '../overlay-reference';\r\n\r\n/** Class to be added to the overlay pane wrapper. */\r\nconst wrapperClass = 'cdk-global-overlay-wrapper';\r\n\r\n/**\r\n * A strategy for positioning overlays. Using this strategy, an overlay is given an\r\n * explicit position relative to the browser's viewport. We use flexbox, instead of\r\n * transforms, in order to avoid issues with subpixel rendering which can cause the\r\n * element to become blurry.\r\n */\r\nexport class GlobalPositionStrategy implements PositionStrategy {\r\n  /** The overlay to which this strategy is attached. */\r\n  private _overlayRef: OverlayReference;\r\n  private _cssPosition: string = 'static';\r\n  private _topOffset: string = '';\r\n  private _bottomOffset: string = '';\r\n  private _leftOffset: string = '';\r\n  private _rightOffset: string = '';\r\n  private _alignItems: string = '';\r\n  private _justifyContent: string = '';\r\n  private _width: string = '';\r\n  private _height: string = '';\r\n  private _isDisposed: boolean;\r\n\r\n  attach(overlayRef: OverlayReference): void {\r\n    const config = overlayRef.getConfig();\r\n\r\n    this._overlayRef = overlayRef;\r\n\r\n    if (this._width && !config.width) {\r\n      overlayRef.updateSize({width: this._width});\r\n    }\r\n\r\n    if (this._height && !config.height) {\r\n      overlayRef.updateSize({height: this._height});\r\n    }\r\n\r\n    overlayRef.hostElement.classList.add(wrapperClass);\r\n    this._isDisposed = false;\r\n  }\r\n\r\n  /**\r\n   * Sets the top position of the overlay. Clears any previously set vertical position.\r\n   * @param value New top offset.\r\n   */\r\n  top(value: string = ''): this {\r\n    this._bottomOffset = '';\r\n    this._topOffset = value;\r\n    this._alignItems = 'flex-start';\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * Sets the left position of the overlay. Clears any previously set horizontal position.\r\n   * @param value New left offset.\r\n   */\r\n  left(value: string = ''): this {\r\n    this._rightOffset = '';\r\n    this._leftOffset = value;\r\n    this._justifyContent = 'flex-start';\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * Sets the bottom position of the overlay. Clears any previously set vertical position.\r\n   * @param value New bottom offset.\r\n   */\r\n  bottom(value: string = ''): this {\r\n    this._topOffset = '';\r\n    this._bottomOffset = value;\r\n    this._alignItems = 'flex-end';\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * Sets the right position of the overlay. Clears any previously set horizontal position.\r\n   * @param value New right offset.\r\n   */\r\n  right(value: string = ''): this {\r\n    this._leftOffset = '';\r\n    this._rightOffset = value;\r\n    this._justifyContent = 'flex-end';\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * Sets the overlay width and clears any previously set width.\r\n   * @param value New width for the overlay\r\n   * @deprecated Pass the `width` through the `OverlayConfig`.\r\n   * @breaking-change 8.0.0\r\n   */\r\n  width(value: string = ''): this {\r\n    if (this._overlayRef) {\r\n      this._overlayRef.updateSize({width: value});\r\n    } else {\r\n      this._width = value;\r\n    }\r\n\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * Sets the overlay height and clears any previously set height.\r\n   * @param value New height for the overlay\r\n   * @deprecated Pass the `height` through the `OverlayConfig`.\r\n   * @breaking-change 8.0.0\r\n   */\r\n  height(value: string = ''): this {\r\n    if (this._overlayRef) {\r\n      this._overlayRef.updateSize({height: value});\r\n    } else {\r\n      this._height = value;\r\n    }\r\n\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * Centers the overlay horizontally with an optional offset.\r\n   * Clears any previously set horizontal position.\r\n   *\r\n   * @param offset Overlay offset from the horizontal center.\r\n   */\r\n  centerHorizontally(offset: string = ''): this {\r\n    this.left(offset);\r\n    this._justifyContent = 'center';\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * Centers the overlay vertically with an optional offset.\r\n   * Clears any previously set vertical position.\r\n   *\r\n   * @param offset Overlay offset from the vertical center.\r\n   */\r\n  centerVertically(offset: string = ''): this {\r\n    this.top(offset);\r\n    this._alignItems = 'center';\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * Apply the position to the element.\r\n   * @docs-private\r\n   */\r\n  apply(): void {\r\n    // Since the overlay ref applies the strategy asynchronously, it could\r\n    // have been disposed before it ends up being applied. If that is the\r\n    // case, we shouldn't do anything.\r\n    if (!this._overlayRef || !this._overlayRef.hasAttached()) {\r\n      return;\r\n    }\r\n\r\n    const styles = this._overlayRef.overlayElement.style;\r\n    const parentStyles = this._overlayRef.hostElement.style;\r\n    const config = this._overlayRef.getConfig();\r\n    const {width, height, maxWidth, maxHeight} = config;\r\n    const shouldBeFlushHorizontally = (width === '100%' || width === '100vw') &&\r\n                                      (!maxWidth || maxWidth === '100%' || maxWidth === '100vw');\r\n    const shouldBeFlushVertically = (height === '100%' || height === '100vh') &&\r\n                                    (!maxHeight || maxHeight === '100%' || maxHeight === '100vh');\r\n\r\n    styles.position = this._cssPosition;\r\n    styles.marginLeft = shouldBeFlushHorizontally ? '0' : this._leftOffset;\r\n    styles.marginTop = shouldBeFlushVertically ? '0' : this._topOffset;\r\n    styles.marginBottom = this._bottomOffset;\r\n    styles.marginRight = this._rightOffset;\r\n\r\n    if (shouldBeFlushHorizontally) {\r\n      parentStyles.justifyContent = 'flex-start';\r\n    } else if (this._justifyContent === 'center') {\r\n      parentStyles.justifyContent = 'center';\r\n    } else if (this._overlayRef.getConfig().direction === 'rtl') {\r\n      // In RTL the browser will invert `flex-start` and `flex-end` automatically, but we\r\n      // don't want that because our positioning is explicitly `left` and `right`, hence\r\n      // why we do another inversion to ensure that the overlay stays in the same position.\r\n      // TODO: reconsider this if we add `start` and `end` methods.\r\n      if (this._justifyContent === 'flex-start') {\r\n        parentStyles.justifyContent = 'flex-end';\r\n      } else if (this._justifyContent === 'flex-end') {\r\n        parentStyles.justifyContent = 'flex-start';\r\n      }\r\n    } else {\r\n      parentStyles.justifyContent = this._justifyContent;\r\n    }\r\n\r\n    parentStyles.alignItems = shouldBeFlushVertically ? 'flex-start' : this._alignItems;\r\n  }\r\n\r\n  /**\r\n   * Cleans up the DOM changes from the position strategy.\r\n   * @docs-private\r\n   */\r\n  dispose(): void {\r\n    if (this._isDisposed || !this._overlayRef) {\r\n      return;\r\n    }\r\n\r\n    const styles = this._overlayRef.overlayElement.style;\r\n    const parent = this._overlayRef.hostElement;\r\n    const parentStyles = parent.style;\r\n\r\n    parent.classList.remove(wrapperClass);\r\n    parentStyles.justifyContent = parentStyles.alignItems = styles.marginTop =\r\n      styles.marginBottom = styles.marginLeft = styles.marginRight = styles.position = '';\r\n\r\n    this._overlayRef = null!;\r\n    this._isDisposed = true;\r\n  }\r\n}\r\n","/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n\r\nimport {Platform} from '@angular/cdk/platform';\r\nimport {ViewportRuler} from '@angular/cdk/scrolling';\r\nimport {DOCUMENT} from '@angular/common';\r\nimport {ElementRef, Inject, Injectable} from '@angular/core';\r\n\r\nimport {OverlayContainer} from '../overlay-container';\r\n\r\nimport {OriginConnectionPosition, OverlayConnectionPosition} from './connected-position';\r\nimport {ConnectedPositionStrategy} from './connected-position-strategy';\r\nimport {\r\n  FlexibleConnectedPositionStrategy,\r\n  FlexibleConnectedPositionStrategyOrigin,\r\n} from './flexible-connected-position-strategy';\r\nimport {GlobalPositionStrategy} from './global-position-strategy';\r\n\r\n\r\n/** Builder for overlay position strategy. */\r\n@Injectable({providedIn: 'root'})\r\nexport class OverlayPositionBuilder {\r\n  constructor(\r\n      private _viewportRuler: ViewportRuler, @Inject(DOCUMENT) private _document: any,\r\n      private _platform: Platform, private _overlayContainer: OverlayContainer) {}\r\n\r\n  /**\r\n   * Creates a global position strategy.\r\n   */\r\n  global(): GlobalPositionStrategy {\r\n    return new GlobalPositionStrategy();\r\n  }\r\n\r\n  /**\r\n   * Creates a relative position strategy.\r\n   * @param elementRef\r\n   * @param originPos\r\n   * @param overlayPos\r\n   * @deprecated Use `flexibleConnectedTo` instead.\r\n   * @breaking-change 8.0.0\r\n   */\r\n  connectedTo(\r\n      elementRef: ElementRef,\r\n      originPos: OriginConnectionPosition,\r\n      overlayPos: OverlayConnectionPosition): ConnectedPositionStrategy {\r\n    return new ConnectedPositionStrategy(\r\n        originPos, overlayPos, elementRef, this._viewportRuler, this._document, this._platform,\r\n        this._overlayContainer);\r\n  }\r\n\r\n  /**\r\n   * Creates a flexible position strategy.\r\n   * @param origin Origin relative to which to position the overlay.\r\n   */\r\n  flexibleConnectedTo(origin: FlexibleConnectedPositionStrategyOrigin):\r\n    FlexibleConnectedPositionStrategy {\r\n    return new FlexibleConnectedPositionStrategy(origin, this._viewportRuler, this._document,\r\n        this._platform, this._overlayContainer);\r\n  }\r\n\r\n}\r\n","/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n\r\nimport {Directionality} from '@angular/cdk/bidi';\r\nimport {DomPortalOutlet} from '@angular/cdk/portal';\r\nimport {DOCUMENT, Location} from '@angular/common';\r\nimport {\r\n  ApplicationRef,\r\n  ComponentFactoryResolver,\r\n  Inject,\r\n  Injectable,\r\n  Injector,\r\n  NgZone,\r\n} from '@angular/core';\r\nimport {OverlayKeyboardDispatcher} from './dispatchers/overlay-keyboard-dispatcher';\r\nimport {OverlayOutsideClickDispatcher} from './dispatchers/overlay-outside-click-dispatcher';\r\nimport {OverlayConfig} from './overlay-config';\r\nimport {OverlayContainer} from './overlay-container';\r\nimport {OverlayRef} from './overlay-ref';\r\nimport {OverlayPositionBuilder} from './position/overlay-position-builder';\r\nimport {ScrollStrategyOptions} from './scroll/index';\r\n\r\n\r\n/** Next overlay unique ID. */\r\nlet nextUniqueId = 0;\r\n\r\n// Note that Overlay is *not* scoped to the app root because of the ComponentFactoryResolver\r\n// which needs to be different depending on where OverlayModule is imported.\r\n\r\n/**\r\n * Service to create Overlays. Overlays are dynamically added pieces of floating UI, meant to be\r\n * used as a low-level building block for other components. Dialogs, tooltips, menus,\r\n * selects, etc. can all be built using overlays. The service should primarily be used by authors\r\n * of re-usable components rather than developers building end-user applications.\r\n *\r\n * An overlay *is* a PortalOutlet, so any kind of Portal can be loaded into one.\r\n */\r\n@Injectable()\r\nexport class Overlay {\r\n  private _appRef: ApplicationRef;\r\n\r\n  constructor(\r\n              /** Scrolling strategies that can be used when creating an overlay. */\r\n              public scrollStrategies: ScrollStrategyOptions,\r\n              private _overlayContainer: OverlayContainer,\r\n              private _componentFactoryResolver: ComponentFactoryResolver,\r\n              private _positionBuilder: OverlayPositionBuilder,\r\n              private _keyboardDispatcher: OverlayKeyboardDispatcher,\r\n              private _injector: Injector,\r\n              private _ngZone: NgZone,\r\n              @Inject(DOCUMENT) private _document: any,\r\n              private _directionality: Directionality,\r\n              private _location: Location,\r\n              private _outsideClickDispatcher: OverlayOutsideClickDispatcher) { }\r\n\r\n  /**\r\n   * Creates an overlay.\r\n   * @param config Configuration applied to the overlay.\r\n   * @returns Reference to the created overlay.\r\n   */\r\n  create(config?: OverlayConfig): OverlayRef {\r\n    const host = this._createHostElement();\r\n    const pane = this._createPaneElement(host);\r\n    const portalOutlet = this._createPortalOutlet(pane);\r\n    const overlayConfig = new OverlayConfig(config);\r\n\r\n    overlayConfig.direction = overlayConfig.direction || this._directionality.value;\r\n\r\n    return new OverlayRef(portalOutlet, host, pane, overlayConfig, this._ngZone,\r\n      this._keyboardDispatcher, this._document, this._location, this._outsideClickDispatcher);\r\n  }\r\n\r\n  /**\r\n   * Gets a position builder that can be used, via fluent API,\r\n   * to construct and configure a position strategy.\r\n   * @returns An overlay position builder.\r\n   */\r\n  position(): OverlayPositionBuilder {\r\n    return this._positionBuilder;\r\n  }\r\n\r\n  /**\r\n   * Creates the DOM element for an overlay and appends it to the overlay container.\r\n   * @returns Newly-created pane element\r\n   */\r\n  private _createPaneElement(host: HTMLElement): HTMLElement {\r\n    const pane = this._document.createElement('div');\r\n\r\n    pane.id = `cdk-overlay-${nextUniqueId++}`;\r\n    pane.classList.add('cdk-overlay-pane');\r\n    host.appendChild(pane);\r\n\r\n    return pane;\r\n  }\r\n\r\n  /**\r\n   * Creates the host element that wraps around an overlay\r\n   * and can be used for advanced positioning.\r\n   * @returns Newly-create host element.\r\n   */\r\n  private _createHostElement(): HTMLElement {\r\n    const host = this._document.createElement('div');\r\n    this._overlayContainer.getContainerElement().appendChild(host);\r\n    return host;\r\n  }\r\n\r\n  /**\r\n   * Create a DomPortalOutlet into which the overlay content can be loaded.\r\n   * @param pane The DOM element to turn into a portal outlet.\r\n   * @returns A portal outlet for the given DOM element.\r\n   */\r\n  private _createPortalOutlet(pane: HTMLElement): DomPortalOutlet {\r\n    // We have to resolve the ApplicationRef later in order to allow people\r\n    // to use overlay-based providers during app initialization.\r\n    if (!this._appRef) {\r\n      this._appRef = this._injector.get<ApplicationRef>(ApplicationRef);\r\n    }\r\n\r\n    return new DomPortalOutlet(pane, this._componentFactoryResolver, this._appRef, this._injector,\r\n                               this._document);\r\n  }\r\n}\r\n","/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n\r\nimport {Direction, Directionality} from '@angular/cdk/bidi';\r\nimport {BooleanInput, coerceBooleanProperty} from '@angular/cdk/coercion';\r\nimport {ESCAPE, hasModifierKey} from '@angular/cdk/keycodes';\r\nimport {TemplatePortal} from '@angular/cdk/portal';\r\nimport {\r\n  Directive,\r\n  ElementRef,\r\n  EventEmitter,\r\n  Inject,\r\n  InjectionToken,\r\n  Input,\r\n  OnChanges,\r\n  OnDestroy,\r\n  Optional,\r\n  Output,\r\n  SimpleChanges,\r\n  TemplateRef,\r\n  ViewContainerRef,\r\n} from '@angular/core';\r\nimport {Subscription} from 'rxjs';\r\nimport {takeWhile} from 'rxjs/operators';\r\nimport {Overlay} from './overlay';\r\nimport {OverlayConfig} from './overlay-config';\r\nimport {OverlayRef} from './overlay-ref';\r\nimport {ConnectedOverlayPositionChange} from './position/connected-position';\r\nimport {\r\n  ConnectedPosition,\r\n  FlexibleConnectedPositionStrategy,\r\n} from './position/flexible-connected-position-strategy';\r\nimport {\r\n  RepositionScrollStrategy,\r\n  ScrollStrategy,\r\n} from './scroll/index';\r\n\r\n\r\n/** Default set of positions for the overlay. Follows the behavior of a dropdown. */\r\nconst defaultPositionList: ConnectedPosition[] = [\r\n  {\r\n    originX: 'start',\r\n    originY: 'bottom',\r\n    overlayX: 'start',\r\n    overlayY: 'top'\r\n  },\r\n  {\r\n    originX: 'start',\r\n    originY: 'top',\r\n    overlayX: 'start',\r\n    overlayY: 'bottom'\r\n  },\r\n  {\r\n    originX: 'end',\r\n    originY: 'top',\r\n    overlayX: 'end',\r\n    overlayY: 'bottom'\r\n  },\r\n  {\r\n    originX: 'end',\r\n    originY: 'bottom',\r\n    overlayX: 'end',\r\n    overlayY: 'top'\r\n  }\r\n];\r\n\r\n/** Injection token that determines the scroll handling while the connected overlay is open. */\r\nexport const CDK_CONNECTED_OVERLAY_SCROLL_STRATEGY =\r\n    new InjectionToken<() => ScrollStrategy>('cdk-connected-overlay-scroll-strategy');\r\n\r\n/**\r\n * Directive applied to an element to make it usable as an origin for an Overlay using a\r\n * ConnectedPositionStrategy.\r\n */\r\n@Directive({\r\n  selector: '[cdk-overlay-origin], [overlay-origin], [cdkOverlayOrigin]',\r\n  exportAs: 'cdkOverlayOrigin',\r\n})\r\nexport class CdkOverlayOrigin {\r\n  constructor(\r\n      /** Reference to the element on which the directive is applied. */\r\n      public elementRef: ElementRef) { }\r\n}\r\n\r\n\r\n/**\r\n * Directive to facilitate declarative creation of an\r\n * Overlay using a FlexibleConnectedPositionStrategy.\r\n */\r\n@Directive({\r\n  selector: '[cdk-connected-overlay], [connected-overlay], [cdkConnectedOverlay]',\r\n  exportAs: 'cdkConnectedOverlay'\r\n})\r\nexport class CdkConnectedOverlay implements OnDestroy, OnChanges {\r\n  private _overlayRef: OverlayRef;\r\n  private _templatePortal: TemplatePortal;\r\n  private _hasBackdrop = false;\r\n  private _lockPosition = false;\r\n  private _growAfterOpen = false;\r\n  private _flexibleDimensions = false;\r\n  private _push = false;\r\n  private _backdropSubscription = Subscription.EMPTY;\r\n  private _attachSubscription = Subscription.EMPTY;\r\n  private _detachSubscription = Subscription.EMPTY;\r\n  private _positionSubscription = Subscription.EMPTY;\r\n  private _offsetX: number;\r\n  private _offsetY: number;\r\n  private _position: FlexibleConnectedPositionStrategy;\r\n  private _scrollStrategyFactory: () => ScrollStrategy;\r\n\r\n  /** Origin for the connected overlay. */\r\n  @Input('cdkConnectedOverlayOrigin') origin: CdkOverlayOrigin;\r\n\r\n  /** Registered connected position pairs. */\r\n  @Input('cdkConnectedOverlayPositions') positions: ConnectedPosition[];\r\n\r\n  /**\r\n   * This input overrides the positions input if specified. It lets users pass\r\n   * in arbitrary positioning strategies.\r\n   */\r\n  @Input('cdkConnectedOverlayPositionStrategy') positionStrategy: FlexibleConnectedPositionStrategy;\r\n\r\n  /** The offset in pixels for the overlay connection point on the x-axis */\r\n  @Input('cdkConnectedOverlayOffsetX')\r\n  get offsetX(): number { return this._offsetX; }\r\n  set offsetX(offsetX: number) {\r\n    this._offsetX = offsetX;\r\n\r\n    if (this._position) {\r\n      this._updatePositionStrategy(this._position);\r\n    }\r\n  }\r\n\r\n  /** The offset in pixels for the overlay connection point on the y-axis */\r\n  @Input('cdkConnectedOverlayOffsetY')\r\n  get offsetY() { return this._offsetY; }\r\n  set offsetY(offsetY: number) {\r\n    this._offsetY = offsetY;\r\n\r\n    if (this._position) {\r\n      this._updatePositionStrategy(this._position);\r\n    }\r\n  }\r\n\r\n  /** The width of the overlay panel. */\r\n  @Input('cdkConnectedOverlayWidth') width: number | string;\r\n\r\n  /** The height of the overlay panel. */\r\n  @Input('cdkConnectedOverlayHeight') height: number | string;\r\n\r\n  /** The min width of the overlay panel. */\r\n  @Input('cdkConnectedOverlayMinWidth') minWidth: number | string;\r\n\r\n  /** The min height of the overlay panel. */\r\n  @Input('cdkConnectedOverlayMinHeight') minHeight: number | string;\r\n\r\n  /** The custom class to be set on the backdrop element. */\r\n  @Input('cdkConnectedOverlayBackdropClass') backdropClass: string;\r\n\r\n  /** The custom class to add to the overlay pane element. */\r\n  @Input('cdkConnectedOverlayPanelClass') panelClass: string | string[];\r\n\r\n  /** Margin between the overlay and the viewport edges. */\r\n  @Input('cdkConnectedOverlayViewportMargin') viewportMargin: number = 0;\r\n\r\n  /** Strategy to be used when handling scroll events while the overlay is open. */\r\n  @Input('cdkConnectedOverlayScrollStrategy') scrollStrategy: ScrollStrategy;\r\n\r\n  /** Whether the overlay is open. */\r\n  @Input('cdkConnectedOverlayOpen') open: boolean = false;\r\n\r\n  /** Whether the overlay can be closed by user interaction. */\r\n  @Input('cdkConnectedOverlayDisableClose') disableClose: boolean = false;\r\n\r\n  /** CSS selector which to set the transform origin. */\r\n  @Input('cdkConnectedOverlayTransformOriginOn') transformOriginSelector: string;\r\n\r\n  /** Whether or not the overlay should attach a backdrop. */\r\n  @Input('cdkConnectedOverlayHasBackdrop')\r\n  get hasBackdrop() { return this._hasBackdrop; }\r\n  set hasBackdrop(value: any) { this._hasBackdrop = coerceBooleanProperty(value); }\r\n\r\n  /** Whether or not the overlay should be locked when scrolling. */\r\n  @Input('cdkConnectedOverlayLockPosition')\r\n  get lockPosition() { return this._lockPosition; }\r\n  set lockPosition(value: any) { this._lockPosition = coerceBooleanProperty(value); }\r\n\r\n  /** Whether the overlay's width and height can be constrained to fit within the viewport. */\r\n  @Input('cdkConnectedOverlayFlexibleDimensions')\r\n  get flexibleDimensions() { return this._flexibleDimensions; }\r\n  set flexibleDimensions(value: boolean) {\r\n    this._flexibleDimensions = coerceBooleanProperty(value);\r\n  }\r\n\r\n  /** Whether the overlay can grow after the initial open when flexible positioning is turned on. */\r\n  @Input('cdkConnectedOverlayGrowAfterOpen')\r\n  get growAfterOpen() { return this._growAfterOpen; }\r\n  set growAfterOpen(value: boolean) { this._growAfterOpen = coerceBooleanProperty(value); }\r\n\r\n  /** Whether the overlay can be pushed on-screen if none of the provided positions fit. */\r\n  @Input('cdkConnectedOverlayPush')\r\n  get push() { return this._push; }\r\n  set push(value: boolean) { this._push = coerceBooleanProperty(value); }\r\n\r\n  /** Event emitted when the backdrop is clicked. */\r\n  @Output() backdropClick = new EventEmitter<MouseEvent>();\r\n\r\n  /** Event emitted when the position has changed. */\r\n  @Output() positionChange = new EventEmitter<ConnectedOverlayPositionChange>();\r\n\r\n  /** Event emitted when the overlay has been attached. */\r\n  @Output() attach = new EventEmitter<void>();\r\n\r\n  /** Event emitted when the overlay has been detached. */\r\n  @Output() detach = new EventEmitter<void>();\r\n\r\n  /** Emits when there are keyboard events that are targeted at the overlay. */\r\n  @Output() overlayKeydown = new EventEmitter<KeyboardEvent>();\r\n\r\n  /** Emits when there are mouse outside click events that are targeted at the overlay. */\r\n  @Output() overlayOutsideClick = new EventEmitter<MouseEvent>();\r\n\r\n  // TODO(jelbourn): inputs for size, scroll behavior, animation, etc.\r\n\r\n  constructor(\r\n      private _overlay: Overlay,\r\n      templateRef: TemplateRef<any>,\r\n      viewContainerRef: ViewContainerRef,\r\n      @Inject(CDK_CONNECTED_OVERLAY_SCROLL_STRATEGY) scrollStrategyFactory: any,\r\n      @Optional() private _dir: Directionality) {\r\n    this._templatePortal = new TemplatePortal(templateRef, viewContainerRef);\r\n    this._scrollStrategyFactory = scrollStrategyFactory;\r\n    this.scrollStrategy = this._scrollStrategyFactory();\r\n  }\r\n\r\n  /** The associated overlay reference. */\r\n  get overlayRef(): OverlayRef {\r\n    return this._overlayRef;\r\n  }\r\n\r\n  /** The element's layout direction. */\r\n  get dir(): Direction {\r\n    return this._dir ? this._dir.value : 'ltr';\r\n  }\r\n\r\n  ngOnDestroy() {\r\n    this._attachSubscription.unsubscribe();\r\n    this._detachSubscription.unsubscribe();\r\n    this._backdropSubscription.unsubscribe();\r\n    this._positionSubscription.unsubscribe();\r\n\r\n    if (this._overlayRef) {\r\n      this._overlayRef.dispose();\r\n    }\r\n  }\r\n\r\n  ngOnChanges(changes: SimpleChanges) {\r\n    if (this._position) {\r\n      this._updatePositionStrategy(this._position);\r\n      this._overlayRef.updateSize({\r\n        width: this.width,\r\n        minWidth: this.minWidth,\r\n        height: this.height,\r\n        minHeight: this.minHeight,\r\n      });\r\n\r\n      if (changes['origin'] && this.open) {\r\n        this._position.apply();\r\n      }\r\n    }\r\n\r\n    if (changes['open']) {\r\n      this.open ? this._attachOverlay() : this._detachOverlay();\r\n    }\r\n  }\r\n\r\n  /** Creates an overlay */\r\n  private _createOverlay() {\r\n    if (!this.positions || !this.positions.length) {\r\n      this.positions = defaultPositionList;\r\n    }\r\n\r\n    const overlayRef = this._overlayRef = this._overlay.create(this._buildConfig());\r\n    this._attachSubscription = overlayRef.attachments().subscribe(() => this.attach.emit());\r\n    this._detachSubscription = overlayRef.detachments().subscribe(() => this.detach.emit());\r\n    overlayRef.keydownEvents().subscribe((event: KeyboardEvent) => {\r\n      this.overlayKeydown.next(event);\r\n\r\n      if (event.keyCode === ESCAPE && !this.disableClose && !hasModifierKey(event)) {\r\n        event.preventDefault();\r\n        this._detachOverlay();\r\n      }\r\n    });\r\n\r\n    this._overlayRef.outsidePointerEvents().subscribe((event: MouseEvent) => {\r\n      this.overlayOutsideClick.next(event);\r\n    });\r\n  }\r\n\r\n  /** Builds the overlay config based on the directive's inputs */\r\n  private _buildConfig(): OverlayConfig {\r\n    const positionStrategy = this._position =\r\n      this.positionStrategy || this._createPositionStrategy();\r\n    const overlayConfig = new OverlayConfig({\r\n      direction: this._dir,\r\n      positionStrategy,\r\n      scrollStrategy: this.scrollStrategy,\r\n      hasBackdrop: this.hasBackdrop\r\n    });\r\n\r\n    if (this.width || this.width === 0) {\r\n      overlayConfig.width = this.width;\r\n    }\r\n\r\n    if (this.height || this.height === 0) {\r\n      overlayConfig.height = this.height;\r\n    }\r\n\r\n    if (this.minWidth || this.minWidth === 0) {\r\n      overlayConfig.minWidth = this.minWidth;\r\n    }\r\n\r\n    if (this.minHeight || this.minHeight === 0) {\r\n      overlayConfig.minHeight = this.minHeight;\r\n    }\r\n\r\n    if (this.backdropClass) {\r\n      overlayConfig.backdropClass = this.backdropClass;\r\n    }\r\n\r\n    if (this.panelClass) {\r\n      overlayConfig.panelClass = this.panelClass;\r\n    }\r\n\r\n    return overlayConfig;\r\n  }\r\n\r\n  /** Updates the state of a position strategy, based on the values of the directive inputs. */\r\n  private _updatePositionStrategy(positionStrategy: FlexibleConnectedPositionStrategy) {\r\n    const positions: ConnectedPosition[] = this.positions.map(currentPosition => ({\r\n      originX: currentPosition.originX,\r\n      originY: currentPosition.originY,\r\n      overlayX: currentPosition.overlayX,\r\n      overlayY: currentPosition.overlayY,\r\n      offsetX: currentPosition.offsetX || this.offsetX,\r\n      offsetY: currentPosition.offsetY || this.offsetY,\r\n      panelClass: currentPosition.panelClass || undefined,\r\n    }));\r\n\r\n    return positionStrategy\r\n      .setOrigin(this.origin.elementRef)\r\n      .withPositions(positions)\r\n      .withFlexibleDimensions(this.flexibleDimensions)\r\n      .withPush(this.push)\r\n      .withGrowAfterOpen(this.growAfterOpen)\r\n      .withViewportMargin(this.viewportMargin)\r\n      .withLockedPosition(this.lockPosition)\r\n      .withTransformOriginOn(this.transformOriginSelector);\r\n  }\r\n\r\n  /** Returns the position strategy of the overlay to be set on the overlay config */\r\n  private _createPositionStrategy(): FlexibleConnectedPositionStrategy {\r\n    const strategy = this._overlay.position().flexibleConnectedTo(this.origin.elementRef);\r\n    this._updatePositionStrategy(strategy);\r\n    return strategy;\r\n  }\r\n\r\n  /** Attaches the overlay and subscribes to backdrop clicks if backdrop exists */\r\n  private _attachOverlay() {\r\n    if (!this._overlayRef) {\r\n      this._createOverlay();\r\n    } else {\r\n      // Update the overlay size, in case the directive's inputs have changed\r\n      this._overlayRef.getConfig().hasBackdrop = this.hasBackdrop;\r\n    }\r\n\r\n    if (!this._overlayRef.hasAttached()) {\r\n      this._overlayRef.attach(this._templatePortal);\r\n    }\r\n\r\n    if (this.hasBackdrop) {\r\n      this._backdropSubscription = this._overlayRef.backdropClick().subscribe(event => {\r\n        this.backdropClick.emit(event);\r\n      });\r\n    } else {\r\n      this._backdropSubscription.unsubscribe();\r\n    }\r\n\r\n    this._positionSubscription.unsubscribe();\r\n\r\n    // Only subscribe to `positionChanges` if requested, because putting\r\n    // together all the information for it can be expensive.\r\n    if (this.positionChange.observers.length > 0) {\r\n      this._positionSubscription = this._position.positionChanges\r\n        .pipe(takeWhile(() => this.positionChange.observers.length > 0))\r\n        .subscribe(position => {\r\n          this.positionChange.emit(position);\r\n\r\n          if (this.positionChange.observers.length === 0) {\r\n            this._positionSubscription.unsubscribe();\r\n          }\r\n        });\r\n    }\r\n  }\r\n\r\n  /** Detaches the overlay and unsubscribes to backdrop clicks if backdrop exists */\r\n  private _detachOverlay() {\r\n    if (this._overlayRef) {\r\n      this._overlayRef.detach();\r\n    }\r\n\r\n    this._backdropSubscription.unsubscribe();\r\n    this._positionSubscription.unsubscribe();\r\n  }\r\n\r\n  static ngAcceptInputType_hasBackdrop: BooleanInput;\r\n  static ngAcceptInputType_lockPosition: BooleanInput;\r\n  static ngAcceptInputType_flexibleDimensions: BooleanInput;\r\n  static ngAcceptInputType_growAfterOpen: BooleanInput;\r\n  static ngAcceptInputType_push: BooleanInput;\r\n}\r\n\r\n\r\n/** @docs-private */\r\nexport function CDK_CONNECTED_OVERLAY_SCROLL_STRATEGY_PROVIDER_FACTORY(overlay: Overlay):\r\n    () => RepositionScrollStrategy {\r\n  return () => overlay.scrollStrategies.reposition();\r\n}\r\n\r\n/** @docs-private */\r\nexport const CDK_CONNECTED_OVERLAY_SCROLL_STRATEGY_PROVIDER = {\r\n  provide: CDK_CONNECTED_OVERLAY_SCROLL_STRATEGY,\r\n  deps: [Overlay],\r\n  useFactory: CDK_CONNECTED_OVERLAY_SCROLL_STRATEGY_PROVIDER_FACTORY,\r\n};\r\n","/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n\r\nimport {BidiModule} from '@angular/cdk/bidi';\r\nimport {PortalModule} from '@angular/cdk/portal';\r\nimport {ScrollingModule} from '@angular/cdk/scrolling';\r\nimport {NgModule} from '@angular/core';\r\nimport {Overlay} from './overlay';\r\nimport {\r\n  CDK_CONNECTED_OVERLAY_SCROLL_STRATEGY_PROVIDER,\r\n  CdkConnectedOverlay,\r\n  CdkOverlayOrigin,\r\n} from './overlay-directives';\r\n\r\n\r\n@NgModule({\r\n  imports: [BidiModule, PortalModule, ScrollingModule],\r\n  exports: [CdkConnectedOverlay, CdkOverlayOrigin, ScrollingModule],\r\n  declarations: [CdkConnectedOverlay, CdkOverlayOrigin],\r\n  providers: [\r\n    Overlay,\r\n    CDK_CONNECTED_OVERLAY_SCROLL_STRATEGY_PROVIDER,\r\n  ],\r\n})\r\nexport class OverlayModule {}\r\n","/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n\r\nexport {OverlayOutsideClickDispatcher} from './overlay-outside-click-dispatcher';\r\nexport {OverlayKeyboardDispatcher} from './overlay-keyboard-dispatcher';\r\n","/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n\r\nimport {Injectable, Inject, OnDestroy} from '@angular/core';\r\nimport {OverlayContainer} from './overlay-container';\r\nimport {DOCUMENT} from '@angular/common';\r\nimport {Platform} from '@angular/cdk/platform';\r\n\r\n\r\n/**\r\n * Alternative to OverlayContainer that supports correct displaying of overlay elements in\r\n * Fullscreen mode\r\n * https://developer.mozilla.org/en-US/docs/Web/API/Element/requestFullScreen\r\n *\r\n * Should be provided in the root component.\r\n */\r\n@Injectable({providedIn: 'root'})\r\nexport class FullscreenOverlayContainer extends OverlayContainer implements OnDestroy {\r\n  private _fullScreenEventName: string | undefined;\r\n  private _fullScreenListener: () => void;\r\n\r\n  constructor(@Inject(DOCUMENT) _document: any, platform: Platform) {\r\n    super(_document, platform);\r\n  }\r\n\r\n  ngOnDestroy() {\r\n    super.ngOnDestroy();\r\n\r\n    if (this._fullScreenEventName && this._fullScreenListener) {\r\n      this._document.removeEventListener(this._fullScreenEventName, this._fullScreenListener);\r\n    }\r\n  }\r\n\r\n  protected _createContainer(): void {\r\n    super._createContainer();\r\n    this._adjustParentForFullscreenChange();\r\n    this._addFullscreenChangeListener(() => this._adjustParentForFullscreenChange());\r\n  }\r\n\r\n  private _adjustParentForFullscreenChange(): void {\r\n    if (!this._containerElement) {\r\n      return;\r\n    }\r\n\r\n    const fullscreenElement = this.getFullscreenElement();\r\n    const parent = fullscreenElement || this._document.body;\r\n    parent.appendChild(this._containerElement);\r\n  }\r\n\r\n  private _addFullscreenChangeListener(fn: () => void) {\r\n    const eventName = this._getEventName();\r\n\r\n    if (eventName) {\r\n      if (this._fullScreenListener) {\r\n        this._document.removeEventListener(eventName, this._fullScreenListener);\r\n      }\r\n\r\n      this._document.addEventListener(eventName, fn);\r\n      this._fullScreenListener = fn;\r\n    }\r\n  }\r\n\r\n  private _getEventName(): string | undefined {\r\n    if (!this._fullScreenEventName) {\r\n      const _document = this._document as any;\r\n\r\n      if (_document.fullscreenEnabled) {\r\n        this._fullScreenEventName = 'fullscreenchange';\r\n      } else if (_document.webkitFullscreenEnabled) {\r\n        this._fullScreenEventName = 'webkitfullscreenchange';\r\n      } else if (_document.mozFullScreenEnabled) {\r\n        this._fullScreenEventName = 'mozfullscreenchange';\r\n      } else if (_document.msFullscreenEnabled) {\r\n        this._fullScreenEventName = 'MSFullscreenChange';\r\n      }\r\n    }\r\n\r\n    return this._fullScreenEventName;\r\n  }\r\n\r\n  /**\r\n   * When the page is put into fullscreen mode, a specific element is specified.\r\n   * Only that element and its children are visible when in fullscreen mode.\r\n   */\r\n  getFullscreenElement(): Element {\r\n    const _document = this._document as any;\r\n\r\n    return _document.fullscreenElement ||\r\n           _document.webkitFullscreenElement ||\r\n           _document.mozFullScreenElement ||\r\n           _document.msFullscreenElement ||\r\n           null;\r\n  }\r\n}\r\n","/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n\r\nexport * from './overlay-config';\r\nexport * from './position/connected-position';\r\nexport * from './scroll/index';\r\nexport * from './overlay-module';\r\nexport * from './dispatchers/index';\r\nexport {Overlay} from './overlay';\r\nexport {OverlayContainer} from './overlay-container';\r\nexport {CdkOverlayOrigin, CdkConnectedOverlay} from './overlay-directives';\r\nexport {FullscreenOverlayContainer} from './fullscreen-overlay-container';\r\nexport {OverlayRef, OverlaySizeConfig} from './overlay-ref';\r\nexport {ViewportRuler} from '@angular/cdk/scrolling';\r\nexport {ComponentType} from '@angular/cdk/portal';\r\nexport {OverlayPositionBuilder} from './position/overlay-position-builder';\r\n\r\n// Export pre-defined position strategies and interface to build custom ones.\r\nexport {PositionStrategy} from './position/position-strategy';\r\nexport {GlobalPositionStrategy} from './position/global-position-strategy';\r\nexport {ConnectedPositionStrategy} from './position/connected-position-strategy';\r\nexport {\r\n  ConnectedPosition,\r\n  FlexibleConnectedPositionStrategy,\r\n  FlexibleConnectedPositionStrategyOrigin,\r\n} from './position/flexible-connected-position-strategy';\r\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './public-api';\n\nexport {BaseOverlayDispatcher as ɵangular_material_src_cdk_overlay_overlay_d} from './dispatchers/base-overlay-dispatcher';\nexport {CDK_CONNECTED_OVERLAY_SCROLL_STRATEGY as ɵangular_material_src_cdk_overlay_overlay_a,CDK_CONNECTED_OVERLAY_SCROLL_STRATEGY_PROVIDER as ɵangular_material_src_cdk_overlay_overlay_c,CDK_CONNECTED_OVERLAY_SCROLL_STRATEGY_PROVIDER_FACTORY as ɵangular_material_src_cdk_overlay_overlay_b} from './overlay-directives';"],"names":["supportsScrollBehavior","coerceCssPixelValue","Injectable","ScrollDispatcher","ViewportRuler","NgZone","Inject","DOCUMENT","Optional","Platform","Subject","Subscription","take","coerceArray","takeUntil","merge","ElementRef","ApplicationRef","DomPortalOutlet","ComponentFactoryResolver","Injector","Directionality","Location","InjectionToken","Directive","EventEmitter","TemplatePortal","coerceBooleanProperty","ESCAPE","hasModifierKey","takeWhile","TemplateRef","ViewContainerRef","Input","Output","NgModule","BidiModule","PortalModule","ScrollingModule"],"mappings":"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"}