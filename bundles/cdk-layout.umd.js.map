{"version":3,"file":"cdk-layout.umd.js","sources":["../../../../../src/cdk/layout/layout-module.ts","../../../../../src/cdk/layout/media-matcher.ts","../../../../../src/cdk/layout/breakpoints-observer.ts","../../../../../src/cdk/layout/breakpoints.ts","../../../../../src/cdk/layout/public-api.ts","../../../../../src/cdk/layout/index.ts"],"sourcesContent":["/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\nimport {NgModule} from '@angular/core';\r\n\r\n\r\n@NgModule({})\r\nexport class LayoutModule {}\r\n","/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\nimport {Injectable} from '@angular/core';\r\nimport {Platform} from '@angular/cdk/platform';\r\n\r\n/** Global registry for all dynamically-created, injected media queries. */\r\nconst mediaQueriesForWebkitCompatibility: Set<string> = new Set<string>();\r\n\r\n/** Style tag that holds all of the dynamically-created media queries. */\r\nlet mediaQueryStyleNode: HTMLStyleElement | undefined;\r\n\r\n/** A utility for calling matchMedia queries. */\r\n@Injectable({providedIn: 'root'})\r\nexport class MediaMatcher {\r\n  /** The internal matchMedia method to return back a MediaQueryList like object. */\r\n  private _matchMedia: (query: string) => MediaQueryList;\r\n\r\n  constructor(private _platform: Platform) {\r\n    this._matchMedia = this._platform.isBrowser && window.matchMedia ?\r\n      // matchMedia is bound to the window scope intentionally as it is an illegal invocation to\r\n      // call it from a different scope.\r\n      window.matchMedia.bind(window) :\r\n      noopMatchMedia;\r\n  }\r\n\r\n  /**\r\n   * Evaluates the given media query and returns the native MediaQueryList from which results\r\n   * can be retrieved.\r\n   * Confirms the layout engine will trigger for the selector query provided and returns the\r\n   * MediaQueryList for the query provided.\r\n   */\r\n  matchMedia(query: string): MediaQueryList {\r\n    if (this._platform.WEBKIT) {\r\n      createEmptyStyleRule(query);\r\n    }\r\n    return this._matchMedia(query);\r\n  }\r\n}\r\n\r\n/**\r\n * For Webkit engines that only trigger the MediaQueryListListener when\r\n * there is at least one CSS selector for the respective media query.\r\n */\r\nfunction createEmptyStyleRule(query: string) {\r\n  if (mediaQueriesForWebkitCompatibility.has(query)) {\r\n    return;\r\n  }\r\n\r\n  try {\r\n    if (!mediaQueryStyleNode) {\r\n      mediaQueryStyleNode = document.createElement('style');\r\n      mediaQueryStyleNode.setAttribute('type', 'text/css');\r\n      document.head!.appendChild(mediaQueryStyleNode);\r\n    }\r\n\r\n    if (mediaQueryStyleNode.sheet) {\r\n      (mediaQueryStyleNode.sheet as CSSStyleSheet)\r\n          .insertRule(`@media ${query} {.fx-query-test{ }}`, 0);\r\n      mediaQueriesForWebkitCompatibility.add(query);\r\n    }\r\n  } catch (e) {\r\n    console.error(e);\r\n  }\r\n}\r\n\r\n/** No-op matchMedia replacement for non-browser platforms. */\r\nfunction noopMatchMedia(query: string): MediaQueryList {\r\n  // Use `as any` here to avoid adding additional necessary properties for\r\n  // the noop matcher.\r\n  return {\r\n    matches: query === 'all' || query === '',\r\n    media: query,\r\n    addListener: () => {},\r\n    removeListener: () => {}\r\n  } as any;\r\n}\r\n","/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n\r\nimport {coerceArray} from '@angular/cdk/coercion';\r\nimport {Injectable, NgZone, OnDestroy} from '@angular/core';\r\nimport {combineLatest, concat, Observable, Observer, Subject} from 'rxjs';\r\nimport {debounceTime, map, skip, startWith, take, takeUntil} from 'rxjs/operators';\r\nimport {MediaMatcher} from './media-matcher';\r\n\r\n\r\n/** The current state of a layout breakpoint. */\r\nexport interface BreakpointState {\r\n  /** Whether the breakpoint is currently matching. */\r\n  matches: boolean;\r\n  /**\r\n   * A key boolean pair for each query provided to the observe method,\r\n   * with its current matched state.\r\n   */\r\n  breakpoints: {\r\n    [key: string]: boolean;\r\n  };\r\n}\r\n\r\n/** The current state of a layout breakpoint. */\r\ninterface InternalBreakpointState {\r\n  /** Whether the breakpoint is currently matching. */\r\n  matches: boolean;\r\n  /** The media query being to be matched */\r\n  query: string;\r\n}\r\n\r\ninterface Query {\r\n  observable: Observable<InternalBreakpointState>;\r\n  mql: MediaQueryList;\r\n}\r\n\r\n/** Utility for checking the matching state of @media queries. */\r\n@Injectable({providedIn: 'root'})\r\nexport class BreakpointObserver implements OnDestroy {\r\n  /**  A map of all media queries currently being listened for. */\r\n  private _queries = new Map<string, Query>();\r\n  /** A subject for all other observables to takeUntil based on. */\r\n  private _destroySubject = new Subject<void>();\r\n\r\n  constructor(private _mediaMatcher: MediaMatcher, private _zone: NgZone) {}\r\n\r\n  /** Completes the active subject, signalling to all other observables to complete. */\r\n  ngOnDestroy() {\r\n    this._destroySubject.next();\r\n    this._destroySubject.complete();\r\n  }\r\n\r\n  /**\r\n   * Whether one or more media queries match the current viewport size.\r\n   * @param value One or more media queries to check.\r\n   * @returns Whether any of the media queries match.\r\n   */\r\n  isMatched(value: string | readonly string[]): boolean {\r\n    const queries = splitQueries(coerceArray(value));\r\n    return queries.some(mediaQuery => this._registerQuery(mediaQuery).mql.matches);\r\n  }\r\n\r\n  /**\r\n   * Gets an observable of results for the given queries that will emit new results for any changes\r\n   * in matching of the given queries.\r\n   * @param value One or more media queries to check.\r\n   * @returns A stream of matches for the given queries.\r\n   */\r\n  observe(value: string | readonly string[]): Observable<BreakpointState> {\r\n    const queries = splitQueries(coerceArray(value));\r\n    const observables = queries.map(query => this._registerQuery(query).observable);\r\n\r\n    let stateObservable = combineLatest(observables);\r\n    // Emit the first state immediately, and then debounce the subsequent emissions.\r\n    stateObservable = concat(\r\n      stateObservable.pipe(take(1)),\r\n      stateObservable.pipe(skip(1), debounceTime(0)));\r\n    return stateObservable.pipe(map(breakpointStates => {\r\n      const response: BreakpointState = {\r\n        matches: false,\r\n        breakpoints: {},\r\n      };\r\n      breakpointStates.forEach(({matches, query}) => {\r\n        response.matches = response.matches || matches;\r\n        response.breakpoints[query] = matches;\r\n      });\r\n      return response;\r\n    }));\r\n  }\r\n\r\n  /** Registers a specific query to be listened for. */\r\n  private _registerQuery(query: string): Query {\r\n    // Only set up a new MediaQueryList if it is not already being listened for.\r\n    if (this._queries.has(query)) {\r\n      return this._queries.get(query)!;\r\n    }\r\n\r\n    const mql = this._mediaMatcher.matchMedia(query);\r\n\r\n    // Create callback for match changes and add it is as a listener.\r\n    const queryObservable = new Observable((observer: Observer<MediaQueryList>) => {\r\n      // Listener callback methods are wrapped to be placed back in ngZone. Callbacks must be placed\r\n      // back into the zone because matchMedia is only included in Zone.js by loading the\r\n      // webapis-media-query.js file alongside the zone.js file.  Additionally, some browsers do not\r\n      // have MediaQueryList inherit from EventTarget, which causes inconsistencies in how Zone.js\r\n      // patches it.\r\n      const handler = (e: any) => this._zone.run(() => observer.next(e));\r\n      mql.addListener(handler);\r\n\r\n      return () => {\r\n        mql.removeListener(handler);\r\n      };\r\n    }).pipe(\r\n      startWith(mql),\r\n      map(({matches}) => ({query, matches})),\r\n      takeUntil(this._destroySubject)\r\n    );\r\n\r\n    // Add the MediaQueryList to the set of queries.\r\n    const output = {observable: queryObservable, mql};\r\n    this._queries.set(query, output);\r\n    return output;\r\n  }\r\n}\r\n\r\n/**\r\n * Split each query string into separate query strings if two queries are provided as comma\r\n * separated.\r\n */\r\nfunction splitQueries(queries: readonly string[]): readonly string[] {\r\n  return queries.map(query => query.split(','))\r\n                .reduce((a1, a2) => a1.concat(a2))\r\n                .map(query => query.trim());\r\n}\r\n","/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n// PascalCase is being used as Breakpoints is used like an enum.\r\n// tslint:disable-next-line:variable-name\r\nexport const Breakpoints = {\r\n  XSmall: '(max-width: 599.98px)',\r\n  Small: '(min-width: 600px) and (max-width: 959.98px)',\r\n  Medium: '(min-width: 960px) and (max-width: 1279.98px)',\r\n  Large: '(min-width: 1280px) and (max-width: 1919.98px)',\r\n  XLarge: '(min-width: 1920px)',\r\n\r\n  Handset: '(max-width: 599.98px) and (orientation: portrait), ' +\r\n           '(max-width: 959.98px) and (orientation: landscape)',\r\n  Tablet: '(min-width: 600px) and (max-width: 839.98px) and (orientation: portrait), ' +\r\n          '(min-width: 960px) and (max-width: 1279.98px) and (orientation: landscape)',\r\n  Web: '(min-width: 840px) and (orientation: portrait), ' +\r\n       '(min-width: 1280px) and (orientation: landscape)',\r\n\r\n  HandsetPortrait: '(max-width: 599.98px) and (orientation: portrait)',\r\n  TabletPortrait: '(min-width: 600px) and (max-width: 839.98px) and (orientation: portrait)',\r\n  WebPortrait: '(min-width: 840px) and (orientation: portrait)',\r\n\r\n  HandsetLandscape: '(max-width: 959.98px) and (orientation: landscape)',\r\n  TabletLandscape: '(min-width: 960px) and (max-width: 1279.98px) and (orientation: landscape)',\r\n  WebLandscape: '(min-width: 1280px) and (orientation: landscape)',\r\n};\r\n","/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n\r\nexport {LayoutModule} from './layout-module';\r\nexport {BreakpointObserver, BreakpointState} from './breakpoints-observer';\r\nexport {Breakpoints} from './breakpoints';\r\nexport {MediaMatcher} from './media-matcher';\r\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './public-api';\n"],"names":["NgModule","Injectable","Platform","Subject","coerceArray","combineLatest","concat","take","skip","debounceTime","map","Observable","startWith","takeUntil","NgZone"],"mappings":"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"}